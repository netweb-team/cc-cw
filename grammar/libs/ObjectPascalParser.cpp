
// Generated from ObjectPascalParser.g4 by ANTLR 4.10.1


#include "ObjectPascalParserVisitor.h"

#include "ObjectPascalParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ObjectPascalParserStaticData final {
  ObjectPascalParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ObjectPascalParserStaticData(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData(ObjectPascalParserStaticData&&) = delete;
  ObjectPascalParserStaticData& operator=(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData& operator=(ObjectPascalParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag objectpascalparserParserOnceFlag;
ObjectPascalParserStaticData *objectpascalparserParserStaticData = nullptr;

void objectpascalparserParserInitialize() {
  assert(objectpascalparserParserStaticData == nullptr);
  auto staticData = std::make_unique<ObjectPascalParserStaticData>(
    std::vector<std::string>{
      "goal", "program", "unit", "package", "library", "programBlock", "usesClause", 
      "portabilityDirective", "interfaceSection", "interfaceDecl", "exportedHeading", 
      "implementationSection", "block", "exportsStmt", "exportsItem", "declSection", 
      "labelDeclSection", "constSection", "constantDecl", "typeSection", 
      "typeDecl", "typedConstant", "arrayConstant", "recordConstant", "recordFieldConstant", 
      "type", "restrictedType", "classRefType", "simpleType", "realType", 
      "ordinalType", "ordIdent", "variantType", "subrangeType", "enumeratedType", 
      "enumeratedTypeElement", "stringType", "strucType", "arrayType", "recType", 
      "fieldList", "fieldDecl", "variantSection", "recVariant", "setType", 
      "fileType", "pointerType", "procedureType", "varSection", "varDecl", 
      "expression", "simpleGrouped", "simpleExpression", "term", "factor", 
      "relOp", "addOp", "mulOp", "additiveOp", "designator", "setConstructor", 
      "setElement", "exprList", "statement", "stmtList", "simpleStatement", 
      "structStmt", "compoundStmt", "conditionalStmt", "procedureCall", 
      "assignmentStmt", "ifStmt", "caseStmt", "caseSelector", "caseLabel", 
      "loopStmt", "repeatStmt", "whileStmt", "forStmt", "withStmt", "tryExceptStmt", 
      "exceptionBlock", "tryFinallyStmt", "raiseStmt", "procedureDeclSection", 
      "procedureDecl", "functionDecl", "constructorDecl", "destructorDecl", 
      "functionHeading", "procedureHeading", "formalParameters", "formalParm", 
      "parameter", "directive", "externalDirective", "objectType", "objHeritage", 
      "methodList", "methodHeading", "constructorHeading", "destructorHeading", 
      "objFieldList", "initSection", "classType", "classHeritage", "classVisibility", 
      "classFieldList", "classMethodList", "classPropertyList", "propertyList", 
      "propertyInterface", "propertyParameterList", "propertySpecifiers", 
      "interfaceType", "interfaceHeritage", "requiresClause", "containsClause", 
      "identList", "qualIdList", "qualId", "typeId", "predefinedType", "charExpr", 
      "subrangeExp", "constExpr", "unitId", "labelId", "string", "number", 
      "signedInteger"
    },
    std::vector<std::string>{
      "", "'program'", "'package'", "'end'", "'requires'", "'contains'", 
      "'library'", "'unit'", "'interface'", "'implementation'", "'intitialization'", 
      "'uses'", "'in'", "'label'", "'const'", "'type'", "'class'", "'of'", 
      "'real'", "'single'", "'double'", "'extended'", "'currency'", "'comp'", 
      "'shortint'", "'smallint'", "'integer'", "'byte'", "'longint'", "'word'", 
      "'boolean'", "'char'", "'widechar'", "'longchar'", "'pchar'", "'variant'", 
      "'olevariant'", "'string'", "'ansistring'", "'widestring'", "'packed'", 
      "'array'", "'record'", "'case'", "'set'", "'file'", "'object'", "'virtual'", 
      "'constructor'", "'destructor'", "'finalization'", "'public'", "'protected'", 
      "'private'", "'published'", "'property'", "'index'", "'read'", "'write'", 
      "'stored'", "'default'", "'nodefault'", "'implements'", "'var'", "'absolute'", 
      "'absctuct'", "'function'", "'procedure'", "'out'", "'inherited'", 
      "'goto'", "'begin'", "'then'", "'else'", "'if'", "'repeat'", "'until'", 
      "'while'", "'to'", "'downto'", "'for'", "'do'", "'with'", "'try'", 
      "'finally'", "'except'", "'on'", "'raise'", "'at'", "'is'", "'or'", 
      "'xor'", "'div'", "'mod'", "'and'", "'shl'", "'shr'", "'nil'", "'not'", 
      "'true'", "'false'", "'UID'", "'NAME'", "'as'", "'cdecl'", "'register'", 
      "'dynamic'", "'export'", "'external'", "'far'", "'forward'", "'message'", 
      "'override'", "'overload'", "'pascal'", "'reintroduce'", "'safecall'", 
      "'stdcall'", "'varargs'", "'local'", "'real48'", "';'", "'.'", "'..'", 
      "'('", "')'", "'['", "']'", "','", "'='", "':'", "'^'", "':='", "'>'", 
      "'<'", "'>='", "'<='", "'<>'", "'+'", "'-'", "'*'", "'/'", "'@'", 
      "'#'", "'</'", "'near'", "'inline'", "'assembler'", "'platform'", 
      "'deprecated'", "'cardinal'", "'int64'", "'longword'", "'unicodestring'", 
      "'\"'", "'E'", "'''"
    },
    std::vector<std::string>{
      "", "PROGRAM", "PACKAGE", "END", "REQUIRES", "CONTAINS", "LIBRARY", 
      "UNIT", "INTERFACE", "IMPLEMENTATION", "INITIALIZATION", "USES", "IN", 
      "LABEL", "CONST", "TYPE_", "CLASS", "OF", "REAL", "SINGLE", "DOUBLE", 
      "EXTENDED", "CURRENCY", "COMP", "SHORTINT", "SMALLINT", "INTEGER", 
      "BYTE", "LONGINT", "WORD", "BOOLEAN", "CHAR", "WIDECHAR", "LONGCHAR", 
      "PCHAR", "VARIANT", "OLEVARIANT", "STRING", "ANSISTRING", "WIDESTRING", 
      "PACKED", "ARRAY", "RECORD", "CASE", "SET", "FILE", "OBJECT", "VIRTUAL", 
      "CONSTRUCTOR", "DESTRUCTOR", "FINALIZATION", "PUBLIC", "PROTECTED", 
      "PRIVATE", "PUBLISHED", "PROPERTY", "INDEX", "READ", "WRITE", "STORED", 
      "DEFAULT", "NODEFAULT", "IMPLEMENTS", "VAR", "ABSOLUTE", "ABSTRACT", 
      "FUNCTION", "PROCEDURE", "OUT", "INHERITED", "GOTO", "BEGIN", "THEN", 
      "ELSE", "IF", "REPEAT", "UNTIL", "WHILE", "TO", "DOWNTO", "FOR", "DO", 
      "WITH", "TRY", "FINALLY", "EXCEPT", "ON", "RAISE", "AT", "IS", "OR", 
      "XOR", "DIV", "MOD", "AND", "SHL", "SHR", "NIL", "NOT", "TRUE", "FALSE", 
      "UID", "NAME", "AS", "CDECL", "REGISTER", "DYNAMIC", "EXPORT", "EXTERNAL", 
      "FAR", "FORWARD", "MESSAGE", "OVERRIDE", "OVERLOAD", "PASCAL", "REINTRODUCE", 
      "SAFECALL", "STDCALL", "VARARGS", "LOCAL", "REAL48", "SEMI", "DOT", 
      "DOT_DOT", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
      "COMMA", "ASSIGN", "COLON", "CARET", "COLON_ASSIGN", "GRATER", "LESS", 
      "GRATER_EQUAL", "LESS_EQUAL", "NOT_EQUAL", "PLUS", "MINUS", "STAR", 
      "DIV_", "DOG", "SHARP", "LESS_DIV", "NEAR", "INLINE", "ASSEMBLER", 
      "PLATFORM", "DEPRECATED", "CARDINAL", "INT64", "LONGWORD", "UNICODESTRING", 
      "QUOTE", "E", "SINGLE_QUOTE", "Identifier", "Integer", "IntegerLiteral", 
      "OctLiteral", "HexLiteral", "Float", "Whitespace", "Newline", "BlockComment", 
      "LineComment", "CharacterLiteral", "StringLiteral", "BooleanLiteral", 
      "MultiLineMacro"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,170,1402,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,1,0,1,0,1,0,1,0,3,0,267,8,0,1,1,1,1,1,1,
  	1,1,1,1,1,1,3,1,275,8,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,284,8,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,296,8,3,1,3,3,3,299,8,3,1,3,1,3,
  	1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,3,5,311,8,5,1,5,5,5,314,8,5,10,5,12,5,
  	317,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,3,8,329,8,8,1,8,5,8,332,
  	8,8,10,8,12,8,335,9,8,1,9,1,9,1,9,1,9,3,9,341,8,9,1,10,1,10,1,10,3,10,
  	346,8,10,1,10,1,10,1,10,3,10,351,8,10,3,10,353,8,10,1,11,1,11,3,11,357,
  	8,11,1,11,5,11,360,8,11,10,11,12,11,363,9,11,1,12,3,12,366,8,12,1,12,
  	1,12,1,13,1,13,1,13,1,13,5,13,374,8,13,10,13,12,13,377,9,13,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,3,14,386,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	3,14,394,8,14,3,14,396,8,14,1,15,1,15,1,15,1,15,1,15,3,15,403,8,15,1,
  	16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,412,8,17,10,17,12,17,415,9,17,1,
  	18,1,18,1,18,1,18,3,18,421,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,429,
  	8,18,3,18,431,8,18,1,19,1,19,1,19,1,19,4,19,437,8,19,11,19,12,19,438,
  	1,20,1,20,1,20,3,20,444,8,20,1,20,1,20,3,20,448,8,20,1,20,1,20,1,20,3,
  	20,453,8,20,1,20,1,20,3,20,457,8,20,3,20,459,8,20,1,21,1,21,1,21,3,21,
  	464,8,21,1,22,1,22,1,22,1,22,5,22,470,8,22,10,22,12,22,473,9,22,1,22,
  	1,22,1,23,1,23,1,23,1,23,5,23,481,8,23,10,23,12,23,484,9,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,500,
  	8,25,1,26,1,26,1,26,3,26,505,8,26,1,27,1,27,1,27,1,27,1,28,1,28,3,28,
  	513,8,28,1,29,1,29,1,30,1,30,1,30,3,30,520,8,30,1,31,1,31,1,32,1,32,1,
  	33,1,33,3,33,528,8,33,1,33,1,33,1,33,3,33,533,8,33,1,34,1,34,1,34,1,34,
  	5,34,539,8,34,10,34,12,34,542,9,34,1,34,1,34,1,35,1,35,1,35,3,35,549,
  	8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,560,8,36,1,37,
  	3,37,563,8,37,1,37,1,37,1,37,1,37,1,37,3,37,570,8,37,3,37,572,8,37,1,
  	38,1,38,1,38,1,38,1,38,5,38,579,8,38,10,38,12,38,582,9,38,1,38,1,38,3,
  	38,586,8,38,1,38,1,38,1,38,3,38,591,8,38,1,39,1,39,3,39,595,8,39,1,39,
  	1,39,3,39,599,8,39,1,40,1,40,1,40,4,40,604,8,40,11,40,12,40,605,1,40,
  	3,40,609,8,40,1,40,3,40,612,8,40,1,41,1,41,1,41,1,41,3,41,618,8,41,1,
  	42,1,42,1,42,3,42,623,8,42,1,42,1,42,1,42,1,42,1,42,5,42,630,8,42,10,
  	42,12,42,633,9,42,1,43,1,43,1,43,5,43,638,8,43,10,43,12,43,641,9,43,1,
  	43,1,43,1,43,3,43,646,8,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,654,8,44,
  	1,45,1,45,1,45,1,45,3,45,660,8,45,1,46,1,46,1,46,3,46,665,8,46,1,47,1,
  	47,3,47,669,8,47,1,47,1,47,3,47,673,8,47,1,48,1,48,1,48,1,48,4,48,679,
  	8,48,11,48,12,48,680,1,49,1,49,1,49,1,49,1,49,1,49,3,49,689,8,49,1,49,
  	1,49,3,49,693,8,49,1,49,3,49,696,8,49,1,50,1,50,1,50,1,50,5,50,702,8,
  	50,10,50,12,50,705,9,50,1,51,1,51,1,51,1,51,1,51,3,51,712,8,51,1,52,3,
  	52,715,8,52,1,52,1,52,1,52,1,52,5,52,721,8,52,10,52,12,52,724,9,52,1,
  	53,1,53,1,53,1,53,5,53,730,8,53,10,53,12,53,733,9,53,1,54,1,54,1,54,1,
  	54,1,54,3,54,740,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
  	54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,759,8,54,1,55,1,55,1,56,1,
  	56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,777,
  	8,59,10,59,12,59,780,9,59,1,60,1,60,1,60,1,60,5,60,786,8,60,10,60,12,
  	60,789,9,60,1,60,1,60,1,61,1,61,1,61,3,61,796,8,61,1,62,1,62,1,62,5,62,
  	801,8,62,10,62,12,62,804,9,62,1,63,1,63,1,63,3,63,809,8,63,1,63,1,63,
  	3,63,813,8,63,1,64,1,64,1,64,4,64,818,8,64,11,64,12,64,819,1,65,1,65,
  	1,65,1,65,1,65,3,65,827,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,
  	836,8,66,1,67,1,67,1,67,3,67,841,8,67,1,67,1,67,1,68,1,68,3,68,847,8,
  	68,1,69,1,69,1,69,1,69,1,69,3,69,854,8,69,1,70,1,70,1,70,1,70,1,71,1,
  	71,1,71,1,71,1,71,1,71,3,71,866,8,71,1,72,1,72,1,72,1,72,1,72,1,72,5,
  	72,874,8,72,10,72,12,72,877,9,72,1,72,1,72,3,72,881,8,72,1,72,3,72,884,
  	8,72,1,72,1,72,1,73,1,73,1,73,5,73,891,8,73,10,73,12,73,894,9,73,1,73,
  	1,73,1,73,1,74,1,74,1,74,3,74,902,8,74,1,75,1,75,1,75,3,75,907,8,75,1,
  	76,1,76,1,76,3,76,912,8,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,
  	78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,
  	80,1,80,1,80,1,80,5,80,940,8,80,10,80,12,80,943,9,80,1,80,1,80,1,80,1,
  	80,1,81,1,81,1,81,3,81,952,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,
  	81,961,8,81,1,81,1,81,1,81,1,81,5,81,967,8,81,10,81,12,81,970,9,81,1,
  	81,1,81,5,81,974,8,81,10,81,12,81,977,9,81,1,81,3,81,980,8,81,1,82,1,
  	82,1,82,1,82,1,82,3,82,987,8,82,1,82,1,82,1,83,1,83,3,83,993,8,83,1,83,
  	1,83,3,83,997,8,83,1,84,1,84,1,84,1,84,3,84,1003,8,84,1,85,1,85,1,85,
  	3,85,1008,8,85,1,85,3,85,1011,8,85,1,85,1,85,1,85,1,86,1,86,1,86,3,86,
  	1019,8,86,1,86,3,86,1022,8,86,1,86,1,86,1,86,1,87,1,87,1,87,3,87,1030,
  	8,87,1,87,3,87,1033,8,87,1,87,1,87,1,87,1,88,1,88,1,88,3,88,1041,8,88,
  	1,88,3,88,1044,8,88,1,88,1,88,1,88,1,89,1,89,1,89,3,89,1052,8,89,1,89,
  	1,89,1,89,3,89,1057,8,89,1,90,1,90,1,90,3,90,1062,8,90,1,91,1,91,3,91,
  	1066,8,91,1,91,1,91,5,91,1070,8,91,10,91,12,91,1073,9,91,1,91,1,91,1,
  	92,3,92,1078,8,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,1086,8,93,1,93,1,
  	93,1,93,3,93,1091,8,93,3,93,1093,8,93,1,93,1,93,1,93,1,93,1,93,3,93,1100,
  	8,93,3,93,1102,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
  	1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1126,
  	8,94,1,95,1,95,1,95,1,95,5,95,1132,8,95,10,95,12,95,1135,9,95,3,95,1137,
  	8,95,3,95,1139,8,95,1,96,1,96,3,96,1143,8,96,1,96,3,96,1146,8,96,1,96,
  	3,96,1149,8,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,
  	3,98,1162,8,98,3,98,1164,8,98,1,98,1,98,4,98,1168,8,98,11,98,12,98,1169,
  	1,99,3,99,1173,8,99,1,99,1,99,3,99,1177,8,99,1,99,1,99,3,99,1181,8,99,
  	1,100,1,100,1,100,3,100,1186,8,100,1,101,1,101,1,101,3,101,1191,8,101,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,3,103,1203,
  	8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1212,8,103,1,104,
  	1,104,3,104,1216,8,104,1,104,1,104,1,104,5,104,1221,8,104,10,104,12,104,
  	1224,9,104,1,104,1,104,1,105,1,105,1,105,1,105,1,106,1,106,1,107,3,107,
  	1235,8,107,1,107,4,107,1238,8,107,11,107,12,107,1239,1,108,3,108,1243,
  	8,108,1,108,4,108,1246,8,108,11,108,12,108,1247,1,109,3,109,1251,8,109,
  	1,109,4,109,1254,8,109,11,109,12,109,1255,1,110,1,110,1,110,3,110,1261,
  	8,110,1,110,3,110,1264,8,110,1,110,3,110,1267,8,110,1,111,3,111,1270,
  	8,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,5,112,1281,
  	8,112,10,112,12,112,1284,9,112,1,112,1,112,1,113,1,113,1,113,1,113,1,
  	113,1,113,1,113,1,113,1,113,3,113,1297,8,113,1,113,1,113,1,113,3,113,
  	1302,8,113,1,113,1,113,3,113,1306,8,113,1,114,1,114,3,114,1310,8,114,
  	1,114,3,114,1313,8,114,1,114,3,114,1316,8,114,1,114,1,114,1,115,1,115,
  	1,115,1,115,1,116,1,116,4,116,1326,8,116,11,116,12,116,1327,1,116,1,116,
  	1,117,1,117,4,117,1334,8,117,11,117,12,117,1335,1,117,1,117,1,118,1,118,
  	1,118,5,118,1343,8,118,10,118,12,118,1346,9,118,1,119,1,119,1,119,4,119,
  	1351,8,119,11,119,12,119,1352,1,120,1,120,1,120,1,120,4,120,1359,8,120,
  	11,120,12,120,1360,3,120,1363,8,120,1,121,1,121,1,121,3,121,1368,8,121,
  	1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,125,1,125,
  	1,125,1,125,1,125,3,125,1385,8,125,1,126,1,126,1,126,1,126,3,126,1391,
  	8,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,130,1,130,0,0,
  	131,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
  	48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
  	94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
  	130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
  	166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
  	202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
  	238,240,242,244,246,248,250,252,254,256,258,260,0,15,2,0,6,6,148,149,
  	2,0,18,23,120,120,3,0,24,32,34,34,150,152,1,0,35,36,1,0,138,139,4,0,12,
  	12,89,89,103,103,133,137,2,0,90,91,138,139,2,0,92,96,140,140,1,0,138,
  	140,1,0,78,79,3,0,14,14,63,63,68,68,1,0,51,54,3,0,18,18,26,27,30,31,2,
  	0,157,157,159,159,2,0,158,158,162,162,1512,0,266,1,0,0,0,2,268,1,0,0,
  	0,4,280,1,0,0,0,6,291,1,0,0,0,8,303,1,0,0,0,10,310,1,0,0,0,12,320,1,0,
  	0,0,14,324,1,0,0,0,16,326,1,0,0,0,18,340,1,0,0,0,20,352,1,0,0,0,22,354,
  	1,0,0,0,24,365,1,0,0,0,26,369,1,0,0,0,28,395,1,0,0,0,30,402,1,0,0,0,32,
  	404,1,0,0,0,34,407,1,0,0,0,36,430,1,0,0,0,38,432,1,0,0,0,40,458,1,0,0,
  	0,42,463,1,0,0,0,44,465,1,0,0,0,46,476,1,0,0,0,48,487,1,0,0,0,50,499,
  	1,0,0,0,52,504,1,0,0,0,54,506,1,0,0,0,56,512,1,0,0,0,58,514,1,0,0,0,60,
  	519,1,0,0,0,62,521,1,0,0,0,64,523,1,0,0,0,66,527,1,0,0,0,68,534,1,0,0,
  	0,70,545,1,0,0,0,72,559,1,0,0,0,74,562,1,0,0,0,76,573,1,0,0,0,78,592,
  	1,0,0,0,80,603,1,0,0,0,82,613,1,0,0,0,84,619,1,0,0,0,86,634,1,0,0,0,88,
  	649,1,0,0,0,90,655,1,0,0,0,92,661,1,0,0,0,94,668,1,0,0,0,96,674,1,0,0,
  	0,98,682,1,0,0,0,100,697,1,0,0,0,102,711,1,0,0,0,104,714,1,0,0,0,106,
  	725,1,0,0,0,108,758,1,0,0,0,110,760,1,0,0,0,112,762,1,0,0,0,114,764,1,
  	0,0,0,116,766,1,0,0,0,118,768,1,0,0,0,120,781,1,0,0,0,122,792,1,0,0,0,
  	124,797,1,0,0,0,126,808,1,0,0,0,128,817,1,0,0,0,130,826,1,0,0,0,132,835,
  	1,0,0,0,134,837,1,0,0,0,136,846,1,0,0,0,138,848,1,0,0,0,140,855,1,0,0,
  	0,142,859,1,0,0,0,144,867,1,0,0,0,146,887,1,0,0,0,148,898,1,0,0,0,150,
  	906,1,0,0,0,152,908,1,0,0,0,154,916,1,0,0,0,156,921,1,0,0,0,158,930,1,
  	0,0,0,160,935,1,0,0,0,162,948,1,0,0,0,164,981,1,0,0,0,166,990,1,0,0,0,
  	168,1002,1,0,0,0,170,1004,1,0,0,0,172,1015,1,0,0,0,174,1026,1,0,0,0,176,
  	1037,1,0,0,0,178,1048,1,0,0,0,180,1058,1,0,0,0,182,1063,1,0,0,0,184,1077,
  	1,0,0,0,186,1101,1,0,0,0,188,1125,1,0,0,0,190,1127,1,0,0,0,192,1140,1,
  	0,0,0,194,1152,1,0,0,0,196,1167,1,0,0,0,198,1180,1,0,0,0,200,1182,1,0,
  	0,0,202,1187,1,0,0,0,204,1192,1,0,0,0,206,1211,1,0,0,0,208,1213,1,0,0,
  	0,210,1227,1,0,0,0,212,1231,1,0,0,0,214,1234,1,0,0,0,216,1242,1,0,0,0,
  	218,1250,1,0,0,0,220,1257,1,0,0,0,222,1269,1,0,0,0,224,1274,1,0,0,0,226,
  	1305,1,0,0,0,228,1307,1,0,0,0,230,1319,1,0,0,0,232,1323,1,0,0,0,234,1331,
  	1,0,0,0,236,1339,1,0,0,0,238,1347,1,0,0,0,240,1354,1,0,0,0,242,1367,1,
  	0,0,0,244,1371,1,0,0,0,246,1373,1,0,0,0,248,1375,1,0,0,0,250,1384,1,0,
  	0,0,252,1390,1,0,0,0,254,1392,1,0,0,0,256,1394,1,0,0,0,258,1396,1,0,0,
  	0,260,1398,1,0,0,0,262,267,3,2,1,0,263,267,3,6,3,0,264,267,3,8,4,0,265,
  	267,3,4,2,0,266,262,1,0,0,0,266,263,1,0,0,0,266,264,1,0,0,0,266,265,1,
  	0,0,0,267,1,1,0,0,0,268,269,5,1,0,0,269,274,5,157,0,0,270,271,5,124,0,
  	0,271,272,3,236,118,0,272,273,5,125,0,0,273,275,1,0,0,0,274,270,1,0,0,
  	0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,5,121,0,0,277,278,3,10,5,0,
  	278,279,5,122,0,0,279,3,1,0,0,0,280,281,5,7,0,0,281,283,3,240,120,0,282,
  	284,3,14,7,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,
  	5,121,0,0,286,287,3,16,8,0,287,288,3,22,11,0,288,289,3,206,103,0,289,
  	290,5,122,0,0,290,5,1,0,0,0,291,292,5,2,0,0,292,293,5,157,0,0,293,295,
  	5,121,0,0,294,296,3,232,116,0,295,294,1,0,0,0,295,296,1,0,0,0,296,298,
  	1,0,0,0,297,299,3,234,117,0,298,297,1,0,0,0,298,299,1,0,0,0,299,300,1,
  	0,0,0,300,301,5,3,0,0,301,302,5,122,0,0,302,7,1,0,0,0,303,304,5,6,0,0,
  	304,305,5,157,0,0,305,306,5,121,0,0,306,307,3,10,5,0,307,308,5,122,0,
  	0,308,9,1,0,0,0,309,311,3,12,6,0,310,309,1,0,0,0,310,311,1,0,0,0,311,
  	315,1,0,0,0,312,314,3,30,15,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,
  	1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,319,3,134,
  	67,0,319,11,1,0,0,0,320,321,5,11,0,0,321,322,3,238,119,0,322,323,5,121,
  	0,0,323,13,1,0,0,0,324,325,7,0,0,0,325,15,1,0,0,0,326,328,5,8,0,0,327,
  	329,3,12,6,0,328,327,1,0,0,0,328,329,1,0,0,0,329,333,1,0,0,0,330,332,
  	3,18,9,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,
  	0,0,334,17,1,0,0,0,335,333,1,0,0,0,336,341,3,34,17,0,337,341,3,38,19,
  	0,338,341,3,96,48,0,339,341,3,20,10,0,340,336,1,0,0,0,340,337,1,0,0,0,
  	340,338,1,0,0,0,340,339,1,0,0,0,341,19,1,0,0,0,342,343,3,180,90,0,343,
  	345,5,121,0,0,344,346,3,188,94,0,345,344,1,0,0,0,345,346,1,0,0,0,346,
  	353,1,0,0,0,347,348,3,178,89,0,348,350,5,121,0,0,349,351,3,188,94,0,350,
  	349,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,342,1,0,0,0,352,347,1,
  	0,0,0,353,21,1,0,0,0,354,356,5,9,0,0,355,357,3,12,6,0,356,355,1,0,0,0,
  	356,357,1,0,0,0,357,361,1,0,0,0,358,360,3,30,15,0,359,358,1,0,0,0,360,
  	363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,23,1,0,0,0,363,361,1,
  	0,0,0,364,366,3,30,15,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,
  	0,367,368,3,134,67,0,368,25,1,0,0,0,369,370,5,107,0,0,370,375,3,28,14,
  	0,371,372,5,128,0,0,372,374,3,28,14,0,373,371,1,0,0,0,374,377,1,0,0,0,
  	375,373,1,0,0,0,375,376,1,0,0,0,376,27,1,0,0,0,377,375,1,0,0,0,378,385,
  	5,157,0,0,379,386,5,102,0,0,380,381,5,56,0,0,381,382,5,156,0,0,382,383,
  	3,250,125,0,383,384,5,156,0,0,384,386,1,0,0,0,385,379,1,0,0,0,385,380,
  	1,0,0,0,385,386,1,0,0,0,386,396,1,0,0,0,387,394,5,56,0,0,388,389,5,102,
  	0,0,389,390,5,156,0,0,390,391,3,250,125,0,391,392,5,156,0,0,392,394,1,
  	0,0,0,393,387,1,0,0,0,393,388,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,
  	395,378,1,0,0,0,395,393,1,0,0,0,396,29,1,0,0,0,397,403,3,32,16,0,398,
  	403,3,34,17,0,399,403,3,38,19,0,400,403,3,96,48,0,401,403,3,168,84,0,
  	402,397,1,0,0,0,402,398,1,0,0,0,402,399,1,0,0,0,402,400,1,0,0,0,402,401,
  	1,0,0,0,403,31,1,0,0,0,404,405,5,13,0,0,405,406,3,254,127,0,406,33,1,
  	0,0,0,407,413,5,14,0,0,408,409,3,36,18,0,409,410,5,121,0,0,410,412,1,
  	0,0,0,411,408,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,
  	414,35,1,0,0,0,415,413,1,0,0,0,416,417,5,157,0,0,417,418,5,129,0,0,418,
  	420,3,250,125,0,419,421,3,14,7,0,420,419,1,0,0,0,420,421,1,0,0,0,421,
  	431,1,0,0,0,422,423,5,157,0,0,423,424,5,130,0,0,424,425,3,242,121,0,425,
  	426,5,129,0,0,426,428,3,42,21,0,427,429,3,14,7,0,428,427,1,0,0,0,428,
  	429,1,0,0,0,429,431,1,0,0,0,430,416,1,0,0,0,430,422,1,0,0,0,431,37,1,
  	0,0,0,432,436,5,15,0,0,433,434,3,40,20,0,434,435,5,121,0,0,435,437,1,
  	0,0,0,436,433,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,
  	439,39,1,0,0,0,440,441,5,157,0,0,441,443,5,129,0,0,442,444,5,15,0,0,443,
  	442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,447,3,50,25,0,446,448,
  	3,14,7,0,447,446,1,0,0,0,447,448,1,0,0,0,448,459,1,0,0,0,449,450,5,157,
  	0,0,450,452,5,129,0,0,451,453,5,15,0,0,452,451,1,0,0,0,452,453,1,0,0,
  	0,453,454,1,0,0,0,454,456,3,52,26,0,455,457,3,14,7,0,456,455,1,0,0,0,
  	456,457,1,0,0,0,457,459,1,0,0,0,458,440,1,0,0,0,458,449,1,0,0,0,459,41,
  	1,0,0,0,460,464,3,250,125,0,461,464,3,44,22,0,462,464,3,46,23,0,463,460,
  	1,0,0,0,463,461,1,0,0,0,463,462,1,0,0,0,464,43,1,0,0,0,465,466,5,124,
  	0,0,466,471,3,42,21,0,467,468,5,128,0,0,468,470,3,42,21,0,469,467,1,0,
  	0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,
  	471,1,0,0,0,474,475,5,125,0,0,475,45,1,0,0,0,476,482,5,124,0,0,477,478,
  	3,48,24,0,478,479,5,121,0,0,479,481,1,0,0,0,480,477,1,0,0,0,481,484,1,
  	0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,
  	485,486,5,125,0,0,486,47,1,0,0,0,487,488,5,157,0,0,488,489,5,130,0,0,
  	489,490,3,42,21,0,490,49,1,0,0,0,491,500,3,242,121,0,492,500,3,56,28,
  	0,493,500,3,74,37,0,494,500,3,92,46,0,495,500,3,72,36,0,496,500,3,94,
  	47,0,497,500,3,64,32,0,498,500,3,54,27,0,499,491,1,0,0,0,499,492,1,0,
  	0,0,499,493,1,0,0,0,499,494,1,0,0,0,499,495,1,0,0,0,499,496,1,0,0,0,499,
  	497,1,0,0,0,499,498,1,0,0,0,500,51,1,0,0,0,501,505,3,192,96,0,502,505,
  	3,208,104,0,503,505,3,228,114,0,504,501,1,0,0,0,504,502,1,0,0,0,504,503,
  	1,0,0,0,505,53,1,0,0,0,506,507,5,16,0,0,507,508,5,17,0,0,508,509,3,242,
  	121,0,509,55,1,0,0,0,510,513,3,60,30,0,511,513,3,58,29,0,512,510,1,0,
  	0,0,512,511,1,0,0,0,513,57,1,0,0,0,514,515,7,1,0,0,515,59,1,0,0,0,516,
  	520,3,66,33,0,517,520,3,68,34,0,518,520,3,62,31,0,519,516,1,0,0,0,519,
  	517,1,0,0,0,519,518,1,0,0,0,520,61,1,0,0,0,521,522,7,2,0,0,522,63,1,0,
  	0,0,523,524,7,3,0,0,524,65,1,0,0,0,525,528,3,250,125,0,526,528,5,157,
  	0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,529,1,0,0,0,529,532,5,123,0,0,
  	530,533,3,250,125,0,531,533,5,157,0,0,532,530,1,0,0,0,532,531,1,0,0,0,
  	533,67,1,0,0,0,534,535,5,124,0,0,535,540,3,70,35,0,536,537,5,128,0,0,
  	537,539,3,70,35,0,538,536,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,
  	541,1,0,0,0,541,543,1,0,0,0,542,540,1,0,0,0,543,544,5,125,0,0,544,69,
  	1,0,0,0,545,548,5,157,0,0,546,547,5,129,0,0,547,549,3,250,125,0,548,546,
  	1,0,0,0,548,549,1,0,0,0,549,71,1,0,0,0,550,560,5,37,0,0,551,560,5,38,
  	0,0,552,560,5,39,0,0,553,560,5,153,0,0,554,555,5,37,0,0,555,556,5,126,
  	0,0,556,557,3,250,125,0,557,558,5,127,0,0,558,560,1,0,0,0,559,550,1,0,
  	0,0,559,551,1,0,0,0,559,552,1,0,0,0,559,553,1,0,0,0,559,554,1,0,0,0,560,
  	73,1,0,0,0,561,563,5,40,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,571,1,
  	0,0,0,564,572,3,76,38,0,565,572,3,88,44,0,566,572,3,90,45,0,567,569,3,
  	78,39,0,568,570,5,40,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,572,1,0,
  	0,0,571,564,1,0,0,0,571,565,1,0,0,0,571,566,1,0,0,0,571,567,1,0,0,0,572,
  	75,1,0,0,0,573,585,5,41,0,0,574,575,5,126,0,0,575,580,3,60,30,0,576,577,
  	5,128,0,0,577,579,3,60,30,0,578,576,1,0,0,0,579,582,1,0,0,0,580,578,1,
  	0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,580,1,0,0,0,583,584,5,127,0,
  	0,584,586,1,0,0,0,585,574,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,
  	588,5,17,0,0,588,590,3,50,25,0,589,591,3,14,7,0,590,589,1,0,0,0,590,591,
  	1,0,0,0,591,77,1,0,0,0,592,594,5,42,0,0,593,595,3,80,40,0,594,593,1,0,
  	0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,5,3,0,0,597,599,3,14,7,0,
  	598,597,1,0,0,0,598,599,1,0,0,0,599,79,1,0,0,0,600,601,3,82,41,0,601,
  	602,5,121,0,0,602,604,1,0,0,0,603,600,1,0,0,0,604,605,1,0,0,0,605,603,
  	1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,3,84,42,0,608,607,1,0,
  	0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,612,5,121,0,0,611,610,1,0,0,0,
  	611,612,1,0,0,0,612,81,1,0,0,0,613,614,3,236,118,0,614,615,5,130,0,0,
  	615,617,3,50,25,0,616,618,3,14,7,0,617,616,1,0,0,0,617,618,1,0,0,0,618,
  	83,1,0,0,0,619,622,5,43,0,0,620,621,5,157,0,0,621,623,5,130,0,0,622,620,
  	1,0,0,0,622,623,1,0,0,0,623,624,1,0,0,0,624,625,3,242,121,0,625,626,5,
  	17,0,0,626,631,3,86,43,0,627,628,5,121,0,0,628,630,3,86,43,0,629,627,
  	1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,85,1,0,0,
  	0,633,631,1,0,0,0,634,639,3,250,125,0,635,636,5,128,0,0,636,638,3,250,
  	125,0,637,635,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,
  	640,642,1,0,0,0,641,639,1,0,0,0,642,643,5,130,0,0,643,645,5,124,0,0,644,
  	646,3,80,40,0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,
  	5,125,0,0,648,87,1,0,0,0,649,650,5,44,0,0,650,651,5,17,0,0,651,653,3,
  	60,30,0,652,654,3,14,7,0,653,652,1,0,0,0,653,654,1,0,0,0,654,89,1,0,0,
  	0,655,656,5,45,0,0,656,657,5,17,0,0,657,659,3,242,121,0,658,660,3,14,
  	7,0,659,658,1,0,0,0,659,660,1,0,0,0,660,91,1,0,0,0,661,662,5,131,0,0,
  	662,664,3,242,121,0,663,665,3,14,7,0,664,663,1,0,0,0,664,665,1,0,0,0,
  	665,93,1,0,0,0,666,669,3,180,90,0,667,669,3,178,89,0,668,666,1,0,0,0,
  	668,667,1,0,0,0,669,672,1,0,0,0,670,671,5,17,0,0,671,673,5,46,0,0,672,
  	670,1,0,0,0,672,673,1,0,0,0,673,95,1,0,0,0,674,678,5,63,0,0,675,676,3,
  	98,49,0,676,677,5,121,0,0,677,679,1,0,0,0,678,675,1,0,0,0,679,680,1,0,
  	0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,97,1,0,0,0,682,683,3,236,118,
  	0,683,684,5,130,0,0,684,692,3,50,25,0,685,688,5,64,0,0,686,689,5,157,
  	0,0,687,689,3,250,125,0,688,686,1,0,0,0,688,687,1,0,0,0,689,693,1,0,0,
  	0,690,691,5,129,0,0,691,693,3,250,125,0,692,685,1,0,0,0,692,690,1,0,0,
  	0,692,693,1,0,0,0,693,695,1,0,0,0,694,696,3,14,7,0,695,694,1,0,0,0,695,
  	696,1,0,0,0,696,99,1,0,0,0,697,703,3,102,51,0,698,699,3,110,55,0,699,
  	700,3,102,51,0,700,702,1,0,0,0,701,698,1,0,0,0,702,705,1,0,0,0,703,701,
  	1,0,0,0,703,704,1,0,0,0,704,101,1,0,0,0,705,703,1,0,0,0,706,712,3,104,
  	52,0,707,708,5,124,0,0,708,709,3,104,52,0,709,710,5,125,0,0,710,712,1,
  	0,0,0,711,706,1,0,0,0,711,707,1,0,0,0,712,103,1,0,0,0,713,715,7,4,0,0,
  	714,713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,722,3,106,53,0,717,
  	718,3,112,56,0,718,719,3,106,53,0,719,721,1,0,0,0,720,717,1,0,0,0,721,
  	724,1,0,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,105,1,0,0,0,724,722,1,
  	0,0,0,725,731,3,108,54,0,726,727,3,114,57,0,727,728,3,108,54,0,728,730,
  	1,0,0,0,729,726,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,
  	0,732,107,1,0,0,0,733,731,1,0,0,0,734,739,3,118,59,0,735,736,5,124,0,
  	0,736,737,3,124,62,0,737,738,5,125,0,0,738,740,1,0,0,0,739,735,1,0,0,
  	0,739,740,1,0,0,0,740,759,1,0,0,0,741,742,5,142,0,0,742,759,3,118,59,
  	0,743,759,3,258,129,0,744,759,3,256,128,0,745,759,5,97,0,0,746,747,5,
  	124,0,0,747,748,3,100,50,0,748,749,5,125,0,0,749,759,1,0,0,0,750,751,
  	5,98,0,0,751,759,3,108,54,0,752,759,3,120,60,0,753,754,3,242,121,0,754,
  	755,5,124,0,0,755,756,3,100,50,0,756,757,5,125,0,0,757,759,1,0,0,0,758,
  	734,1,0,0,0,758,741,1,0,0,0,758,743,1,0,0,0,758,744,1,0,0,0,758,745,1,
  	0,0,0,758,746,1,0,0,0,758,750,1,0,0,0,758,752,1,0,0,0,758,753,1,0,0,0,
  	759,109,1,0,0,0,760,761,7,5,0,0,761,111,1,0,0,0,762,763,7,6,0,0,763,113,
  	1,0,0,0,764,765,7,7,0,0,765,115,1,0,0,0,766,767,7,8,0,0,767,117,1,0,0,
  	0,768,778,3,240,120,0,769,770,5,122,0,0,770,777,5,157,0,0,771,772,5,126,
  	0,0,772,773,3,124,62,0,773,774,5,127,0,0,774,777,1,0,0,0,775,777,5,131,
  	0,0,776,769,1,0,0,0,776,771,1,0,0,0,776,775,1,0,0,0,777,780,1,0,0,0,778,
  	776,1,0,0,0,778,779,1,0,0,0,779,119,1,0,0,0,780,778,1,0,0,0,781,782,5,
  	126,0,0,782,787,3,122,61,0,783,784,5,128,0,0,784,786,3,122,61,0,785,783,
  	1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,
  	0,789,787,1,0,0,0,790,791,5,127,0,0,791,121,1,0,0,0,792,795,3,100,50,
  	0,793,794,5,123,0,0,794,796,3,100,50,0,795,793,1,0,0,0,795,796,1,0,0,
  	0,796,123,1,0,0,0,797,802,3,100,50,0,798,799,5,128,0,0,799,801,3,100,
  	50,0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,
  	803,125,1,0,0,0,804,802,1,0,0,0,805,806,3,254,127,0,806,807,5,130,0,0,
  	807,809,1,0,0,0,808,805,1,0,0,0,808,809,1,0,0,0,809,812,1,0,0,0,810,813,
  	3,130,65,0,811,813,3,132,66,0,812,810,1,0,0,0,812,811,1,0,0,0,813,127,
  	1,0,0,0,814,815,3,126,63,0,815,816,5,121,0,0,816,818,1,0,0,0,817,814,
  	1,0,0,0,818,819,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,129,1,0,0,
  	0,821,827,3,140,70,0,822,827,5,69,0,0,823,824,5,70,0,0,824,827,3,254,
  	127,0,825,827,3,138,69,0,826,821,1,0,0,0,826,822,1,0,0,0,826,823,1,0,
  	0,0,826,825,1,0,0,0,827,131,1,0,0,0,828,836,3,134,67,0,829,836,3,136,
  	68,0,830,836,3,150,75,0,831,836,3,158,79,0,832,836,3,160,80,0,833,836,
  	3,164,82,0,834,836,3,166,83,0,835,828,1,0,0,0,835,829,1,0,0,0,835,830,
  	1,0,0,0,835,831,1,0,0,0,835,832,1,0,0,0,835,833,1,0,0,0,835,834,1,0,0,
  	0,836,133,1,0,0,0,837,838,5,71,0,0,838,840,3,128,64,0,839,841,5,121,0,
  	0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,843,5,3,0,0,843,
  	135,1,0,0,0,844,847,3,142,71,0,845,847,3,144,72,0,846,844,1,0,0,0,846,
  	845,1,0,0,0,847,137,1,0,0,0,848,853,3,240,120,0,849,850,5,124,0,0,850,
  	851,3,124,62,0,851,852,5,125,0,0,852,854,1,0,0,0,853,849,1,0,0,0,853,
  	854,1,0,0,0,854,139,1,0,0,0,855,856,3,118,59,0,856,857,5,132,0,0,857,
  	858,3,100,50,0,858,141,1,0,0,0,859,860,5,74,0,0,860,861,3,100,50,0,861,
  	862,5,72,0,0,862,865,3,126,63,0,863,864,5,73,0,0,864,866,3,126,63,0,865,
  	863,1,0,0,0,865,866,1,0,0,0,866,143,1,0,0,0,867,868,5,43,0,0,868,869,
  	3,100,50,0,869,870,5,17,0,0,870,875,3,146,73,0,871,872,5,121,0,0,872,
  	874,3,146,73,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,876,
  	1,0,0,0,876,880,1,0,0,0,877,875,1,0,0,0,878,879,5,73,0,0,879,881,3,128,
  	64,0,880,878,1,0,0,0,880,881,1,0,0,0,881,883,1,0,0,0,882,884,5,121,0,
  	0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,5,3,0,0,886,
  	145,1,0,0,0,887,892,3,148,74,0,888,889,5,128,0,0,889,891,3,148,74,0,890,
  	888,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,0,893,895,1,
  	0,0,0,894,892,1,0,0,0,895,896,5,130,0,0,896,897,3,126,63,0,897,147,1,
  	0,0,0,898,901,3,250,125,0,899,900,5,123,0,0,900,902,3,250,125,0,901,899,
  	1,0,0,0,901,902,1,0,0,0,902,149,1,0,0,0,903,907,3,152,76,0,904,907,3,
  	154,77,0,905,907,3,156,78,0,906,903,1,0,0,0,906,904,1,0,0,0,906,905,1,
  	0,0,0,907,151,1,0,0,0,908,909,5,75,0,0,909,911,3,128,64,0,910,912,5,121,
  	0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,1,0,0,0,913,914,5,76,0,0,
  	914,915,3,100,50,0,915,153,1,0,0,0,916,917,5,77,0,0,917,918,3,100,50,
  	0,918,919,5,81,0,0,919,920,3,126,63,0,920,155,1,0,0,0,921,922,5,80,0,
  	0,922,923,3,240,120,0,923,924,5,132,0,0,924,925,3,100,50,0,925,926,7,
  	9,0,0,926,927,3,100,50,0,927,928,5,81,0,0,928,929,3,126,63,0,929,157,
  	1,0,0,0,930,931,5,82,0,0,931,932,3,238,119,0,932,933,5,81,0,0,933,934,
  	3,126,63,0,934,159,1,0,0,0,935,936,5,83,0,0,936,941,3,126,63,0,937,938,
  	5,121,0,0,938,940,3,126,63,0,939,937,1,0,0,0,940,943,1,0,0,0,941,939,
  	1,0,0,0,941,942,1,0,0,0,942,944,1,0,0,0,943,941,1,0,0,0,944,945,5,85,
  	0,0,945,946,3,162,81,0,946,947,5,3,0,0,947,161,1,0,0,0,948,951,5,86,0,
  	0,949,950,5,157,0,0,950,952,5,130,0,0,951,949,1,0,0,0,951,952,1,0,0,0,
  	952,953,1,0,0,0,953,954,3,242,121,0,954,955,5,81,0,0,955,968,3,126,63,
  	0,956,957,5,121,0,0,957,960,5,86,0,0,958,959,5,157,0,0,959,961,5,130,
  	0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,963,3,242,121,
  	0,963,964,5,81,0,0,964,965,3,126,63,0,965,967,1,0,0,0,966,956,1,0,0,0,
  	967,970,1,0,0,0,968,966,1,0,0,0,968,969,1,0,0,0,969,971,1,0,0,0,970,968,
  	1,0,0,0,971,975,5,73,0,0,972,974,3,126,63,0,973,972,1,0,0,0,974,977,1,
  	0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,
  	978,980,5,121,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,163,1,0,0,0,981,
  	982,5,83,0,0,982,983,3,126,63,0,983,984,5,84,0,0,984,986,3,126,63,0,985,
  	987,5,121,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,
  	5,3,0,0,989,165,1,0,0,0,990,992,5,87,0,0,991,993,5,157,0,0,992,991,1,
  	0,0,0,992,993,1,0,0,0,993,996,1,0,0,0,994,995,5,88,0,0,995,997,5,157,
  	0,0,996,994,1,0,0,0,996,997,1,0,0,0,997,167,1,0,0,0,998,1003,3,170,85,
  	0,999,1003,3,172,86,0,1000,1003,3,174,87,0,1001,1003,3,176,88,0,1002,
  	998,1,0,0,0,1002,999,1,0,0,0,1002,1000,1,0,0,0,1002,1001,1,0,0,0,1003,
  	169,1,0,0,0,1004,1005,3,180,90,0,1005,1007,5,121,0,0,1006,1008,3,188,
  	94,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,1009,1011,
  	3,14,7,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1013,
  	3,24,12,0,1013,1014,5,121,0,0,1014,171,1,0,0,0,1015,1016,3,178,89,0,1016,
  	1018,5,121,0,0,1017,1019,3,188,94,0,1018,1017,1,0,0,0,1018,1019,1,0,0,
  	0,1019,1021,1,0,0,0,1020,1022,3,14,7,0,1021,1020,1,0,0,0,1021,1022,1,
  	0,0,0,1022,1023,1,0,0,0,1023,1024,3,24,12,0,1024,1025,5,121,0,0,1025,
  	173,1,0,0,0,1026,1027,3,200,100,0,1027,1029,5,121,0,0,1028,1030,3,188,
  	94,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,1033,
  	3,14,7,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,
  	3,24,12,0,1035,1036,5,121,0,0,1036,175,1,0,0,0,1037,1038,3,202,101,0,
  	1038,1040,5,121,0,0,1039,1041,3,188,94,0,1040,1039,1,0,0,0,1040,1041,
  	1,0,0,0,1041,1043,1,0,0,0,1042,1044,3,14,7,0,1043,1042,1,0,0,0,1043,1044,
  	1,0,0,0,1044,1045,1,0,0,0,1045,1046,3,24,12,0,1046,1047,5,121,0,0,1047,
  	177,1,0,0,0,1048,1049,5,66,0,0,1049,1051,5,157,0,0,1050,1052,3,182,91,
  	0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1056,5,130,
  	0,0,1054,1057,3,56,28,0,1055,1057,5,37,0,0,1056,1054,1,0,0,0,1056,1055,
  	1,0,0,0,1057,179,1,0,0,0,1058,1059,5,67,0,0,1059,1061,5,157,0,0,1060,
  	1062,3,182,91,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,181,1,0,0,0,
  	1063,1065,5,124,0,0,1064,1066,3,184,92,0,1065,1064,1,0,0,0,1065,1066,
  	1,0,0,0,1066,1071,1,0,0,0,1067,1068,5,128,0,0,1068,1070,3,184,92,0,1069,
  	1067,1,0,0,0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1071,1072,1,0,0,0,1072,
  	1074,1,0,0,0,1073,1071,1,0,0,0,1074,1075,5,125,0,0,1075,183,1,0,0,0,1076,
  	1078,7,10,0,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1079,1,0,0,0,1079,
  	1080,3,186,93,0,1080,185,1,0,0,0,1081,1092,3,236,118,0,1082,1090,5,130,
  	0,0,1083,1084,5,41,0,0,1084,1086,5,17,0,0,1085,1083,1,0,0,0,1085,1086,
  	1,0,0,0,1086,1087,1,0,0,0,1087,1091,3,56,28,0,1088,1091,5,37,0,0,1089,
  	1091,5,45,0,0,1090,1085,1,0,0,0,1090,1088,1,0,0,0,1090,1089,1,0,0,0,1091,
  	1093,1,0,0,0,1092,1082,1,0,0,0,1092,1093,1,0,0,0,1093,1102,1,0,0,0,1094,
  	1095,5,157,0,0,1095,1096,5,130,0,0,1096,1099,3,56,28,0,1097,1098,5,129,
  	0,0,1098,1100,3,250,125,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1102,
  	1,0,0,0,1101,1081,1,0,0,0,1101,1094,1,0,0,0,1102,187,1,0,0,0,1103,1126,
  	5,104,0,0,1104,1126,5,105,0,0,1105,1126,5,106,0,0,1106,1126,5,47,0,0,
  	1107,1126,5,107,0,0,1108,1126,3,190,95,0,1109,1126,5,145,0,0,1110,1126,
  	5,109,0,0,1111,1126,5,110,0,0,1112,1126,5,146,0,0,1113,1126,5,147,0,0,
  	1114,1115,5,111,0,0,1115,1126,3,250,125,0,1116,1126,5,112,0,0,1117,1126,
  	5,113,0,0,1118,1126,5,114,0,0,1119,1126,5,115,0,0,1120,1126,5,116,0,0,
  	1121,1126,5,117,0,0,1122,1126,5,118,0,0,1123,1126,5,119,0,0,1124,1126,
  	5,65,0,0,1125,1103,1,0,0,0,1125,1104,1,0,0,0,1125,1105,1,0,0,0,1125,1106,
  	1,0,0,0,1125,1107,1,0,0,0,1125,1108,1,0,0,0,1125,1109,1,0,0,0,1125,1110,
  	1,0,0,0,1125,1111,1,0,0,0,1125,1112,1,0,0,0,1125,1113,1,0,0,0,1125,1114,
  	1,0,0,0,1125,1116,1,0,0,0,1125,1117,1,0,0,0,1125,1118,1,0,0,0,1125,1119,
  	1,0,0,0,1125,1120,1,0,0,0,1125,1121,1,0,0,0,1125,1122,1,0,0,0,1125,1123,
  	1,0,0,0,1125,1124,1,0,0,0,1126,189,1,0,0,0,1127,1138,5,108,0,0,1128,1136,
  	3,256,128,0,1129,1133,5,102,0,0,1130,1132,5,157,0,0,1131,1130,1,0,0,0,
  	1132,1135,1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1137,1,0,0,
  	0,1135,1133,1,0,0,0,1136,1129,1,0,0,0,1136,1137,1,0,0,0,1137,1139,1,0,
  	0,0,1138,1128,1,0,0,0,1138,1139,1,0,0,0,1139,191,1,0,0,0,1140,1142,5,
  	46,0,0,1141,1143,3,194,97,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
  	1145,1,0,0,0,1144,1146,3,204,102,0,1145,1144,1,0,0,0,1145,1146,1,0,0,
  	0,1146,1148,1,0,0,0,1147,1149,3,196,98,0,1148,1147,1,0,0,0,1148,1149,
  	1,0,0,0,1149,1150,1,0,0,0,1150,1151,5,3,0,0,1151,193,1,0,0,0,1152,1153,
  	5,124,0,0,1153,1154,3,240,120,0,1154,1155,5,125,0,0,1155,195,1,0,0,0,
  	1156,1163,3,198,99,0,1157,1158,5,121,0,0,1158,1161,5,47,0,0,1159,1160,
  	5,121,0,0,1160,1162,5,65,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,
  	1164,1,0,0,0,1163,1157,1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,
  	1166,5,121,0,0,1166,1168,1,0,0,0,1167,1156,1,0,0,0,1168,1169,1,0,0,0,
  	1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,197,1,0,0,0,1171,1173,5,16,0,
  	0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1176,1,0,0,0,1174,1177,3,180,
  	90,0,1175,1177,3,178,89,0,1176,1174,1,0,0,0,1176,1175,1,0,0,0,1177,1181,
  	1,0,0,0,1178,1181,3,200,100,0,1179,1181,3,202,101,0,1180,1172,1,0,0,0,
  	1180,1178,1,0,0,0,1180,1179,1,0,0,0,1181,199,1,0,0,0,1182,1183,5,48,0,
  	0,1183,1185,5,157,0,0,1184,1186,3,182,91,0,1185,1184,1,0,0,0,1185,1186,
  	1,0,0,0,1186,201,1,0,0,0,1187,1188,5,49,0,0,1188,1190,5,157,0,0,1189,
  	1191,3,182,91,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,203,1,0,0,0,
  	1192,1193,3,236,118,0,1193,1194,5,130,0,0,1194,1195,3,50,25,0,1195,1196,
  	1,0,0,0,1196,1197,5,121,0,0,1197,205,1,0,0,0,1198,1199,5,10,0,0,1199,
  	1202,3,128,64,0,1200,1201,5,50,0,0,1201,1203,3,128,64,0,1202,1200,1,0,
  	0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1205,5,3,0,0,1205,1212,1,
  	0,0,0,1206,1207,5,71,0,0,1207,1208,3,128,64,0,1208,1209,5,3,0,0,1209,
  	1212,1,0,0,0,1210,1212,5,3,0,0,1211,1198,1,0,0,0,1211,1206,1,0,0,0,1211,
  	1210,1,0,0,0,1212,207,1,0,0,0,1213,1215,5,16,0,0,1214,1216,3,210,105,
  	0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1222,1,0,0,0,1217,1221,3,214,
  	107,0,1218,1221,3,216,108,0,1219,1221,3,218,109,0,1220,1217,1,0,0,0,1220,
  	1218,1,0,0,0,1220,1219,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,
  	1223,1,0,0,0,1223,1225,1,0,0,0,1224,1222,1,0,0,0,1225,1226,5,3,0,0,1226,
  	209,1,0,0,0,1227,1228,5,124,0,0,1228,1229,3,236,118,0,1229,1230,5,125,
  	0,0,1230,211,1,0,0,0,1231,1232,7,11,0,0,1232,213,1,0,0,0,1233,1235,3,
  	212,106,0,1234,1233,1,0,0,0,1234,1235,1,0,0,0,1235,1237,1,0,0,0,1236,
  	1238,3,204,102,0,1237,1236,1,0,0,0,1238,1239,1,0,0,0,1239,1237,1,0,0,
  	0,1239,1240,1,0,0,0,1240,215,1,0,0,0,1241,1243,3,212,106,0,1242,1241,
  	1,0,0,0,1242,1243,1,0,0,0,1243,1245,1,0,0,0,1244,1246,3,196,98,0,1245,
  	1244,1,0,0,0,1246,1247,1,0,0,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,
  	217,1,0,0,0,1249,1251,3,212,106,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,
  	1251,1253,1,0,0,0,1252,1254,3,220,110,0,1253,1252,1,0,0,0,1254,1255,1,
  	0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,219,1,0,0,0,1257,1258,
  	5,55,0,0,1258,1260,5,157,0,0,1259,1261,3,222,111,0,1260,1259,1,0,0,0,
  	1260,1261,1,0,0,0,1261,1263,1,0,0,0,1262,1264,3,226,113,0,1263,1262,1,
  	0,0,0,1263,1264,1,0,0,0,1264,1266,1,0,0,0,1265,1267,3,14,7,0,1266,1265,
  	1,0,0,0,1266,1267,1,0,0,0,1267,221,1,0,0,0,1268,1270,3,224,112,0,1269,
  	1268,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1272,5,130,0,0,
  	1272,1273,5,157,0,0,1273,223,1,0,0,0,1274,1275,5,126,0,0,1275,1276,3,
  	236,118,0,1276,1277,5,130,0,0,1277,1278,3,242,121,0,1278,1282,1,0,0,0,
  	1279,1281,5,121,0,0,1280,1279,1,0,0,0,1281,1284,1,0,0,0,1282,1280,1,0,
  	0,0,1282,1283,1,0,0,0,1283,1285,1,0,0,0,1284,1282,1,0,0,0,1285,1286,5,
  	127,0,0,1286,225,1,0,0,0,1287,1288,5,56,0,0,1288,1306,3,250,125,0,1289,
  	1290,5,57,0,0,1290,1306,5,157,0,0,1291,1292,5,58,0,0,1292,1306,5,157,
  	0,0,1293,1296,5,59,0,0,1294,1297,5,157,0,0,1295,1297,3,250,125,0,1296,
  	1294,1,0,0,0,1296,1295,1,0,0,0,1297,1306,1,0,0,0,1298,1299,5,60,0,0,1299,
  	1302,3,250,125,0,1300,1302,5,61,0,0,1301,1298,1,0,0,0,1301,1300,1,0,0,
  	0,1302,1306,1,0,0,0,1303,1304,5,62,0,0,1304,1306,3,242,121,0,1305,1287,
  	1,0,0,0,1305,1289,1,0,0,0,1305,1291,1,0,0,0,1305,1293,1,0,0,0,1305,1301,
  	1,0,0,0,1305,1303,1,0,0,0,1306,227,1,0,0,0,1307,1309,5,8,0,0,1308,1310,
  	3,230,115,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1312,1,0,0,0,1311,
  	1313,3,216,108,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,
  	0,1314,1316,3,218,109,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,
  	1,0,0,0,1317,1318,5,3,0,0,1318,229,1,0,0,0,1319,1320,5,124,0,0,1320,1321,
  	5,157,0,0,1321,1322,5,125,0,0,1322,231,1,0,0,0,1323,1325,5,4,0,0,1324,
  	1326,3,236,118,0,1325,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1325,1,0,0,
  	0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1330,5,121,0,0,1330,233,1,
  	0,0,0,1331,1333,5,5,0,0,1332,1334,3,236,118,0,1333,1332,1,0,0,0,1334,
  	1335,1,0,0,0,1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,0,0,0,1337,
  	1338,5,121,0,0,1338,235,1,0,0,0,1339,1344,5,157,0,0,1340,1341,5,128,0,
  	0,1341,1343,5,157,0,0,1342,1340,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,
  	0,0,0,1344,1345,1,0,0,0,1345,237,1,0,0,0,1346,1344,1,0,0,0,1347,1350,
  	3,240,120,0,1348,1349,5,128,0,0,1349,1351,3,240,120,0,1350,1348,1,0,0,
  	0,1351,1352,1,0,0,0,1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,239,1,0,
  	0,0,1354,1362,3,252,126,0,1355,1356,5,122,0,0,1356,1358,5,157,0,0,1357,
  	1359,5,131,0,0,1358,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1358,1,0,0,0,
  	1360,1361,1,0,0,0,1361,1363,1,0,0,0,1362,1355,1,0,0,0,1362,1363,1,0,0,
  	0,1363,241,1,0,0,0,1364,1365,3,252,126,0,1365,1366,5,122,0,0,1366,1368,
  	1,0,0,0,1367,1364,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1370,
  	5,157,0,0,1370,243,1,0,0,0,1371,1372,7,12,0,0,1372,245,1,0,0,0,1373,1374,
  	5,168,0,0,1374,247,1,0,0,0,1375,1376,7,13,0,0,1376,249,1,0,0,0,1377,1385,
  	3,258,129,0,1378,1385,3,256,128,0,1379,1385,3,246,123,0,1380,1381,5,159,
  	0,0,1381,1382,3,116,58,0,1382,1383,5,159,0,0,1383,1385,1,0,0,0,1384,1377,
  	1,0,0,0,1384,1378,1,0,0,0,1384,1379,1,0,0,0,1384,1380,1,0,0,0,1385,251,
  	1,0,0,0,1386,1391,5,157,0,0,1387,1388,5,157,0,0,1388,1389,5,122,0,0,1389,
  	1391,5,157,0,0,1390,1386,1,0,0,0,1390,1387,1,0,0,0,1391,253,1,0,0,0,1392,
  	1393,7,13,0,0,1393,255,1,0,0,0,1394,1395,5,168,0,0,1395,257,1,0,0,0,1396,
  	1397,7,14,0,0,1397,259,1,0,0,0,1398,1399,7,4,0,0,1399,1400,5,159,0,0,
  	1400,261,1,0,0,0,171,266,274,283,295,298,310,315,328,333,340,345,350,
  	352,356,361,365,375,385,393,395,402,413,420,428,430,438,443,447,452,456,
  	458,463,471,482,499,504,512,519,527,532,540,548,559,562,569,571,580,585,
  	590,594,598,605,608,611,617,622,631,639,645,653,659,664,668,672,680,688,
  	692,695,703,711,714,722,731,739,758,776,778,787,795,802,808,812,819,826,
  	835,840,846,853,865,875,880,883,892,901,906,911,941,951,960,968,975,979,
  	986,992,996,1002,1007,1010,1018,1021,1029,1032,1040,1043,1051,1056,1061,
  	1065,1071,1077,1085,1090,1092,1099,1101,1125,1133,1136,1138,1142,1145,
  	1148,1161,1163,1169,1172,1176,1180,1185,1190,1202,1211,1215,1220,1222,
  	1234,1239,1242,1247,1250,1255,1260,1263,1266,1269,1282,1296,1301,1305,
  	1309,1312,1315,1327,1335,1344,1352,1360,1362,1367,1384,1390
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  objectpascalparserParserStaticData = staticData.release();
}

}

ObjectPascalParser::ObjectPascalParser(TokenStream *input) : ObjectPascalParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ObjectPascalParser::ObjectPascalParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ObjectPascalParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *objectpascalparserParserStaticData->atn, objectpascalparserParserStaticData->decisionToDFA, objectpascalparserParserStaticData->sharedContextCache, options);
}

ObjectPascalParser::~ObjectPascalParser() {
  delete _interpreter;
}

const atn::ATN& ObjectPascalParser::getATN() const {
  return *objectpascalparserParserStaticData->atn;
}

std::string ObjectPascalParser::getGrammarFileName() const {
  return "ObjectPascalParser.g4";
}

const std::vector<std::string>& ObjectPascalParser::getRuleNames() const {
  return objectpascalparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& ObjectPascalParser::getVocabulary() const {
  return objectpascalparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ObjectPascalParser::getSerializedATN() const {
  return objectpascalparserParserStaticData->serializedATN;
}


//----------------- GoalContext ------------------------------------------------------------------

ObjectPascalParser::GoalContext::GoalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::GoalContext::program() {
  return getRuleContext<ObjectPascalParser::ProgramContext>(0);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::GoalContext::package() {
  return getRuleContext<ObjectPascalParser::PackageContext>(0);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::GoalContext::library() {
  return getRuleContext<ObjectPascalParser::LibraryContext>(0);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::GoalContext::unit() {
  return getRuleContext<ObjectPascalParser::UnitContext>(0);
}


size_t ObjectPascalParser::GoalContext::getRuleIndex() const {
  return ObjectPascalParser::RuleGoal;
}


std::any ObjectPascalParser::GoalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitGoal(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::GoalContext* ObjectPascalParser::goal() {
  GoalContext *_localctx = _tracker.createInstance<GoalContext>(_ctx, getState());
  enterRule(_localctx, 0, ObjectPascalParser::RuleGoal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(266);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROGRAM: {
        enterOuterAlt(_localctx, 1);
        setState(262);
        program();
        break;
      }

      case ObjectPascalParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(263);
        package();
        break;
      }

      case ObjectPascalParser::LIBRARY: {
        enterOuterAlt(_localctx, 3);
        setState(264);
        library();
        break;
      }

      case ObjectPascalParser::UNIT: {
        enterOuterAlt(_localctx, 4);
        setState(265);
        unit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

ObjectPascalParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::PROGRAM() {
  return getToken(ObjectPascalParser::PROGRAM, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::ProgramContext::programBlock() {
  return getRuleContext<ObjectPascalParser::ProgramBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ProgramContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ProgramContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgram;
}


std::any ObjectPascalParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, ObjectPascalParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(268);
    match(ObjectPascalParser::PROGRAM);
    setState(269);
    match(ObjectPascalParser::Identifier);
    setState(274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(270);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(271);
      identList();
      setState(272);
      match(ObjectPascalParser::RIGHT_PAREN);
    }
    setState(276);
    match(ObjectPascalParser::SEMI);
    setState(277);
    programBlock();
    setState(278);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitContext ------------------------------------------------------------------

ObjectPascalParser::UnitContext::UnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UnitContext::UNIT() {
  return getToken(ObjectPascalParser::UNIT, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::UnitContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::UnitContext::interfaceSection() {
  return getRuleContext<ObjectPascalParser::InterfaceSectionContext>(0);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::UnitContext::implementationSection() {
  return getRuleContext<ObjectPascalParser::ImplementationSectionContext>(0);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::UnitContext::initSection() {
  return getRuleContext<ObjectPascalParser::InitSectionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::UnitContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::UnitContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnit;
}


std::any ObjectPascalParser::UnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnit(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::unit() {
  UnitContext *_localctx = _tracker.createInstance<UnitContext>(_ctx, getState());
  enterRule(_localctx, 4, ObjectPascalParser::RuleUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(280);
    match(ObjectPascalParser::UNIT);
    setState(281);
    qualId();
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(282);
      portabilityDirective();
    }
    setState(285);
    match(ObjectPascalParser::SEMI);
    setState(286);
    interfaceSection();
    setState(287);
    implementationSection();
    setState(288);
    initSection();
    setState(289);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

ObjectPascalParser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PackageContext::PACKAGE() {
  return getToken(ObjectPascalParser::PACKAGE, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::PackageContext::requiresClause() {
  return getRuleContext<ObjectPascalParser::RequiresClauseContext>(0);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::PackageContext::containsClause() {
  return getRuleContext<ObjectPascalParser::ContainsClauseContext>(0);
}


size_t ObjectPascalParser::PackageContext::getRuleIndex() const {
  return ObjectPascalParser::RulePackage;
}


std::any ObjectPascalParser::PackageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPackage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 6, ObjectPascalParser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(291);
    match(ObjectPascalParser::PACKAGE);
    setState(292);
    match(ObjectPascalParser::Identifier);
    setState(293);
    match(ObjectPascalParser::SEMI);
    setState(295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::REQUIRES) {
      setState(294);
      requiresClause();
    }
    setState(298);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CONTAINS) {
      setState(297);
      containsClause();
    }
    setState(300);
    match(ObjectPascalParser::END);
    setState(301);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryContext ------------------------------------------------------------------

ObjectPascalParser::LibraryContext::LibraryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::LibraryContext::programBlock() {
  return getRuleContext<ObjectPascalParser::ProgramBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::LibraryContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLibrary;
}


std::any ObjectPascalParser::LibraryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLibrary(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::library() {
  LibraryContext *_localctx = _tracker.createInstance<LibraryContext>(_ctx, getState());
  enterRule(_localctx, 8, ObjectPascalParser::RuleLibrary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(303);
    match(ObjectPascalParser::LIBRARY);
    setState(304);
    match(ObjectPascalParser::Identifier);
    setState(305);
    match(ObjectPascalParser::SEMI);
    setState(306);
    programBlock();
    setState(307);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramBlockContext ------------------------------------------------------------------

ObjectPascalParser::ProgramBlockContext::ProgramBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::ProgramBlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ProgramBlockContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ProgramBlockContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ProgramBlockContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ProgramBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgramBlock;
}


std::any ObjectPascalParser::ProgramBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgramBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::programBlock() {
  ProgramBlockContext *_localctx = _tracker.createInstance<ProgramBlockContext>(_ctx, getState());
  enterRule(_localctx, 10, ObjectPascalParser::RuleProgramBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(310);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(309);
      usesClause();
    }
    setState(315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(312);
      declSection();
      setState(317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(318);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsesClauseContext ------------------------------------------------------------------

ObjectPascalParser::UsesClauseContext::UsesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::USES() {
  return getToken(ObjectPascalParser::USES, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::UsesClauseContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::UsesClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUsesClause;
}


std::any ObjectPascalParser::UsesClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUsesClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::usesClause() {
  UsesClauseContext *_localctx = _tracker.createInstance<UsesClauseContext>(_ctx, getState());
  enterRule(_localctx, 12, ObjectPascalParser::RuleUsesClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(320);
    match(ObjectPascalParser::USES);
    setState(321);
    qualIdList();
    setState(322);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PortabilityDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::PortabilityDirectiveContext::PortabilityDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::PLATFORM() {
  return getToken(ObjectPascalParser::PLATFORM, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::DEPRECATED() {
  return getToken(ObjectPascalParser::DEPRECATED, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}


size_t ObjectPascalParser::PortabilityDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RulePortabilityDirective;
}


std::any ObjectPascalParser::PortabilityDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPortabilityDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::portabilityDirective() {
  PortabilityDirectiveContext *_localctx = _tracker.createInstance<PortabilityDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 14, ObjectPascalParser::RulePortabilityDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceSectionContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceSectionContext::InterfaceSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceSectionContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::InterfaceSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::InterfaceDeclContext *> ObjectPascalParser::InterfaceSectionContext::interfaceDecl() {
  return getRuleContexts<ObjectPascalParser::InterfaceDeclContext>();
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::InterfaceSectionContext::interfaceDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::InterfaceDeclContext>(i);
}


size_t ObjectPascalParser::InterfaceSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceSection;
}


std::any ObjectPascalParser::InterfaceSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::interfaceSection() {
  InterfaceSectionContext *_localctx = _tracker.createInstance<InterfaceSectionContext>(_ctx, getState());
  enterRule(_localctx, 16, ObjectPascalParser::RuleInterfaceSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(326);
    match(ObjectPascalParser::INTERFACE);
    setState(328);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(327);
      usesClause();
    }
    setState(333);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::TYPE_ - 14))
      | (1ULL << (ObjectPascalParser::VAR - 14))
      | (1ULL << (ObjectPascalParser::FUNCTION - 14))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 14)))) != 0)) {
      setState(330);
      interfaceDecl();
      setState(335);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceDeclContext::InterfaceDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::InterfaceDeclContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::InterfaceDeclContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::InterfaceDeclContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::InterfaceDeclContext::exportedHeading() {
  return getRuleContext<ObjectPascalParser::ExportedHeadingContext>(0);
}


size_t ObjectPascalParser::InterfaceDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceDecl;
}


std::any ObjectPascalParser::InterfaceDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::interfaceDecl() {
  InterfaceDeclContext *_localctx = _tracker.createInstance<InterfaceDeclContext>(_ctx, getState());
  enterRule(_localctx, 18, ObjectPascalParser::RuleInterfaceDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(340);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 1);
        setState(336);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 2);
        setState(337);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR: {
        enterOuterAlt(_localctx, 3);
        setState(338);
        varSection();
        break;
      }

      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 4);
        setState(339);
        exportedHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportedHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ExportedHeadingContext::ExportedHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ExportedHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExportedHeadingContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ExportedHeadingContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ExportedHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}


size_t ObjectPascalParser::ExportedHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportedHeading;
}


std::any ObjectPascalParser::ExportedHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportedHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::exportedHeading() {
  ExportedHeadingContext *_localctx = _tracker.createInstance<ExportedHeadingContext>(_ctx, getState());
  enterRule(_localctx, 20, ObjectPascalParser::RuleExportedHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(352);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(342);
        procedureHeading();
        setState(343);
        match(ObjectPascalParser::SEMI);
        setState(345);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 47) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
          | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
          | (1ULL << (ObjectPascalParser::CDECL - 47))
          | (1ULL << (ObjectPascalParser::REGISTER - 47))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
          | (1ULL << (ObjectPascalParser::EXPORT - 47))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
          | (1ULL << (ObjectPascalParser::FAR - 47))
          | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
          | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
          | (1ULL << (ObjectPascalParser::PASCAL - 111))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
          | (1ULL << (ObjectPascalParser::SAFECALL - 111))
          | (1ULL << (ObjectPascalParser::STDCALL - 111))
          | (1ULL << (ObjectPascalParser::VARARGS - 111))
          | (1ULL << (ObjectPascalParser::LOCAL - 111))
          | (1ULL << (ObjectPascalParser::NEAR - 111))
          | (1ULL << (ObjectPascalParser::INLINE - 111))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
          setState(344);
          directive();
        }
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(347);
        functionHeading();
        setState(348);
        match(ObjectPascalParser::SEMI);
        setState(350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 47) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
          | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
          | (1ULL << (ObjectPascalParser::CDECL - 47))
          | (1ULL << (ObjectPascalParser::REGISTER - 47))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
          | (1ULL << (ObjectPascalParser::EXPORT - 47))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
          | (1ULL << (ObjectPascalParser::FAR - 47))
          | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
          | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
          | (1ULL << (ObjectPascalParser::PASCAL - 111))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
          | (1ULL << (ObjectPascalParser::SAFECALL - 111))
          | (1ULL << (ObjectPascalParser::STDCALL - 111))
          | (1ULL << (ObjectPascalParser::VARARGS - 111))
          | (1ULL << (ObjectPascalParser::LOCAL - 111))
          | (1ULL << (ObjectPascalParser::NEAR - 111))
          | (1ULL << (ObjectPascalParser::INLINE - 111))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
          setState(349);
          directive();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementationSectionContext ------------------------------------------------------------------

ObjectPascalParser::ImplementationSectionContext::ImplementationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ImplementationSectionContext::IMPLEMENTATION() {
  return getToken(ObjectPascalParser::IMPLEMENTATION, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ImplementationSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ImplementationSectionContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ImplementationSectionContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ImplementationSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleImplementationSection;
}


std::any ObjectPascalParser::ImplementationSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitImplementationSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::implementationSection() {
  ImplementationSectionContext *_localctx = _tracker.createInstance<ImplementationSectionContext>(_ctx, getState());
  enterRule(_localctx, 22, ObjectPascalParser::RuleImplementationSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(354);
    match(ObjectPascalParser::IMPLEMENTATION);
    setState(356);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(355);
      usesClause();
    }
    setState(361);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(358);
      declSection();
      setState(363);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

ObjectPascalParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::BlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::BlockContext::declSection() {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(0);
}


size_t ObjectPascalParser::BlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleBlock;
}


std::any ObjectPascalParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 24, ObjectPascalParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(364);
      declSection();
    }
    setState(367);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsStmtContext ------------------------------------------------------------------

ObjectPascalParser::ExportsStmtContext::ExportsStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExportsStmtContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

std::vector<ObjectPascalParser::ExportsItemContext *> ObjectPascalParser::ExportsStmtContext::exportsItem() {
  return getRuleContexts<ObjectPascalParser::ExportsItemContext>();
}

ObjectPascalParser::ExportsItemContext* ObjectPascalParser::ExportsStmtContext::exportsItem(size_t i) {
  return getRuleContext<ObjectPascalParser::ExportsItemContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExportsStmtContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExportsStmtContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExportsStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportsStmt;
}


std::any ObjectPascalParser::ExportsStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportsStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportsStmtContext* ObjectPascalParser::exportsStmt() {
  ExportsStmtContext *_localctx = _tracker.createInstance<ExportsStmtContext>(_ctx, getState());
  enterRule(_localctx, 26, ObjectPascalParser::RuleExportsStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(369);
    match(ObjectPascalParser::EXPORT);
    setState(370);
    exportsItem();
    setState(375);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(371);
      match(ObjectPascalParser::COMMA);
      setState(372);
      exportsItem();
      setState(377);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsItemContext ------------------------------------------------------------------

ObjectPascalParser::ExportsItemContext::ExportsItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExportsItemContext::SINGLE_QUOTE() {
  return getTokens(ObjectPascalParser::SINGLE_QUOTE);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::SINGLE_QUOTE(size_t i) {
  return getToken(ObjectPascalParser::SINGLE_QUOTE, i);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ExportsItemContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ExportsItemContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportsItem;
}


std::any ObjectPascalParser::ExportsItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportsItem(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportsItemContext* ObjectPascalParser::exportsItem() {
  ExportsItemContext *_localctx = _tracker.createInstance<ExportsItemContext>(_ctx, getState());
  enterRule(_localctx, 28, ObjectPascalParser::RuleExportsItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(378);
        match(ObjectPascalParser::Identifier);
        setState(385);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::NAME: {
            setState(379);
            match(ObjectPascalParser::NAME);
            break;
          }

          case ObjectPascalParser::INDEX: {
            setState(380);
            match(ObjectPascalParser::INDEX);
            setState(381);
            match(ObjectPascalParser::SINGLE_QUOTE);
            setState(382);
            constExpr();
            setState(383);
            match(ObjectPascalParser::SINGLE_QUOTE);
            break;
          }

          case ObjectPascalParser::EOF:
          case ObjectPascalParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case ObjectPascalParser::EOF:
      case ObjectPascalParser::INDEX:
      case ObjectPascalParser::NAME:
      case ObjectPascalParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(393);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::INDEX: {
            setState(387);
            match(ObjectPascalParser::INDEX);
            break;
          }

          case ObjectPascalParser::NAME: {
            setState(388);
            match(ObjectPascalParser::NAME);
            setState(389);
            match(ObjectPascalParser::SINGLE_QUOTE);
            setState(390);
            constExpr();
            setState(391);
            match(ObjectPascalParser::SINGLE_QUOTE);
            break;
          }

          case ObjectPascalParser::EOF:
          case ObjectPascalParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::DeclSectionContext::DeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::DeclSectionContext::labelDeclSection() {
  return getRuleContext<ObjectPascalParser::LabelDeclSectionContext>(0);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::DeclSectionContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::DeclSectionContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::DeclSectionContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::DeclSectionContext::procedureDeclSection() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclSectionContext>(0);
}


size_t ObjectPascalParser::DeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDeclSection;
}


std::any ObjectPascalParser::DeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::declSection() {
  DeclSectionContext *_localctx = _tracker.createInstance<DeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 30, ObjectPascalParser::RuleDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(402);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(397);
        labelDeclSection();
        break;
      }

      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 2);
        setState(398);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 3);
        setState(399);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR: {
        enterOuterAlt(_localctx, 4);
        setState(400);
        varSection();
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR:
      case ObjectPascalParser::DESTRUCTOR:
      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 5);
        setState(401);
        procedureDeclSection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::LabelDeclSectionContext::LabelDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelDeclSectionContext::LABEL() {
  return getToken(ObjectPascalParser::LABEL, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::LabelDeclSectionContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}


size_t ObjectPascalParser::LabelDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelDeclSection;
}


std::any ObjectPascalParser::LabelDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::labelDeclSection() {
  LabelDeclSectionContext *_localctx = _tracker.createInstance<LabelDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 32, ObjectPascalParser::RuleLabelDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(404);
    match(ObjectPascalParser::LABEL);
    setState(405);
    labelId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstSectionContext ------------------------------------------------------------------

ObjectPascalParser::ConstSectionContext::ConstSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

std::vector<ObjectPascalParser::ConstantDeclContext *> ObjectPascalParser::ConstSectionContext::constantDecl() {
  return getRuleContexts<ObjectPascalParser::ConstantDeclContext>();
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::ConstSectionContext::constantDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstantDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ConstSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstSection;
}


std::any ObjectPascalParser::ConstSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::constSection() {
  ConstSectionContext *_localctx = _tracker.createInstance<ConstSectionContext>(_ctx, getState());
  enterRule(_localctx, 34, ObjectPascalParser::RuleConstSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(407);
    match(ObjectPascalParser::CONST);
    setState(413);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Identifier) {
      setState(408);
      constantDecl();
      setState(409);
      match(ObjectPascalParser::SEMI);
      setState(415);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclContext ------------------------------------------------------------------

ObjectPascalParser::ConstantDeclContext::ConstantDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ConstantDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ConstantDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ConstantDeclContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ConstantDeclContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::ConstantDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstantDecl;
}


std::any ObjectPascalParser::ConstantDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstantDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::constantDecl() {
  ConstantDeclContext *_localctx = _tracker.createInstance<ConstantDeclContext>(_ctx, getState());
  enterRule(_localctx, 36, ObjectPascalParser::RuleConstantDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(430);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(416);
      match(ObjectPascalParser::Identifier);
      setState(417);
      match(ObjectPascalParser::ASSIGN);
      setState(418);
      constExpr();
      setState(420);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(419);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(422);
      match(ObjectPascalParser::Identifier);
      setState(423);
      match(ObjectPascalParser::COLON);
      setState(424);
      typeId();
      setState(425);
      match(ObjectPascalParser::ASSIGN);
      setState(426);
      typedConstant();
      setState(428);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(427);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSectionContext ------------------------------------------------------------------

ObjectPascalParser::TypeSectionContext::TypeSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

std::vector<ObjectPascalParser::TypeDeclContext *> ObjectPascalParser::TypeSectionContext::typeDecl() {
  return getRuleContexts<ObjectPascalParser::TypeDeclContext>();
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::TypeSectionContext::typeDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TypeSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TypeSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeSection;
}


std::any ObjectPascalParser::TypeSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::typeSection() {
  TypeSectionContext *_localctx = _tracker.createInstance<TypeSectionContext>(_ctx, getState());
  enterRule(_localctx, 38, ObjectPascalParser::RuleTypeSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(432);
    match(ObjectPascalParser::TYPE_);
    setState(436); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(433);
      typeDecl();
      setState(434);
      match(ObjectPascalParser::SEMI);
      setState(438); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclContext ------------------------------------------------------------------

ObjectPascalParser::TypeDeclContext::TypeDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::TypeDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::TypeDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::TypeDeclContext::restrictedType() {
  return getRuleContext<ObjectPascalParser::RestrictedTypeContext>(0);
}


size_t ObjectPascalParser::TypeDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeDecl;
}


std::any ObjectPascalParser::TypeDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::typeDecl() {
  TypeDeclContext *_localctx = _tracker.createInstance<TypeDeclContext>(_ctx, getState());
  enterRule(_localctx, 40, ObjectPascalParser::RuleTypeDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(458);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(440);
      match(ObjectPascalParser::Identifier);
      setState(441);
      match(ObjectPascalParser::ASSIGN);
      setState(443);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(442);
        match(ObjectPascalParser::TYPE_);
      }
      setState(445);
      type();
      setState(447);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(446);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(449);
      match(ObjectPascalParser::Identifier);
      setState(450);
      match(ObjectPascalParser::ASSIGN);
      setState(452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(451);
        match(ObjectPascalParser::TYPE_);
      }
      setState(454);
      restrictedType();
      setState(456);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(455);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedConstantContext ------------------------------------------------------------------

ObjectPascalParser::TypedConstantContext::TypedConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::TypedConstantContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::TypedConstantContext::arrayConstant() {
  return getRuleContext<ObjectPascalParser::ArrayConstantContext>(0);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::TypedConstantContext::recordConstant() {
  return getRuleContext<ObjectPascalParser::RecordConstantContext>(0);
}


size_t ObjectPascalParser::TypedConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypedConstant;
}


std::any ObjectPascalParser::TypedConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypedConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::typedConstant() {
  TypedConstantContext *_localctx = _tracker.createInstance<TypedConstantContext>(_ctx, getState());
  enterRule(_localctx, 42, ObjectPascalParser::RuleTypedConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(463);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(460);
      constExpr();
      break;
    }

    case 2: {
      setState(461);
      arrayConstant();
      break;
    }

    case 3: {
      setState(462);
      recordConstant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstantContext ------------------------------------------------------------------

ObjectPascalParser::ArrayConstantContext::ArrayConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::TypedConstantContext *> ObjectPascalParser::ArrayConstantContext::typedConstant() {
  return getRuleContexts<ObjectPascalParser::TypedConstantContext>();
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ArrayConstantContext::typedConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayConstantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayConstant;
}


std::any ObjectPascalParser::ArrayConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::arrayConstant() {
  ArrayConstantContext *_localctx = _tracker.createInstance<ArrayConstantContext>(_ctx, getState());
  enterRule(_localctx, 44, ObjectPascalParser::RuleArrayConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(465);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(466);
    typedConstant();
    setState(471);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(467);
      match(ObjectPascalParser::COMMA);
      setState(468);
      typedConstant();
      setState(473);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(474);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordConstantContext::RecordConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::RecordFieldConstantContext *> ObjectPascalParser::RecordConstantContext::recordFieldConstant() {
  return getRuleContexts<ObjectPascalParser::RecordFieldConstantContext>();
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::RecordConstantContext::recordFieldConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecordFieldConstantContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecordConstantContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::RecordConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordConstant;
}


std::any ObjectPascalParser::RecordConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::recordConstant() {
  RecordConstantContext *_localctx = _tracker.createInstance<RecordConstantContext>(_ctx, getState());
  enterRule(_localctx, 46, ObjectPascalParser::RuleRecordConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(476);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(482);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Identifier) {
      setState(477);
      recordFieldConstant();
      setState(478);
      match(ObjectPascalParser::SEMI);
      setState(484);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(485);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordFieldConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordFieldConstantContext::RecordFieldConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::RecordFieldConstantContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::RecordFieldConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordFieldConstant;
}


std::any ObjectPascalParser::RecordFieldConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordFieldConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::recordFieldConstant() {
  RecordFieldConstantContext *_localctx = _tracker.createInstance<RecordFieldConstantContext>(_ctx, getState());
  enterRule(_localctx, 48, ObjectPascalParser::RuleRecordFieldConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(487);
    match(ObjectPascalParser::Identifier);
    setState(488);
    match(ObjectPascalParser::COLON);
    setState(489);
    typedConstant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

ObjectPascalParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::TypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::TypeContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::TypeContext::strucType() {
  return getRuleContext<ObjectPascalParser::StrucTypeContext>(0);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::TypeContext::pointerType() {
  return getRuleContext<ObjectPascalParser::PointerTypeContext>(0);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::TypeContext::stringType() {
  return getRuleContext<ObjectPascalParser::StringTypeContext>(0);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::TypeContext::procedureType() {
  return getRuleContext<ObjectPascalParser::ProcedureTypeContext>(0);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::TypeContext::variantType() {
  return getRuleContext<ObjectPascalParser::VariantTypeContext>(0);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::TypeContext::classRefType() {
  return getRuleContext<ObjectPascalParser::ClassRefTypeContext>(0);
}


size_t ObjectPascalParser::TypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleType;
}


std::any ObjectPascalParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 50, ObjectPascalParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(499);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(491);
      typeId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(492);
      simpleType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(493);
      strucType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(494);
      pointerType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(495);
      stringType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(496);
      procedureType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(497);
      variantType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(498);
      classRefType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestrictedTypeContext ------------------------------------------------------------------

ObjectPascalParser::RestrictedTypeContext::RestrictedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::RestrictedTypeContext::objectType() {
  return getRuleContext<ObjectPascalParser::ObjectTypeContext>(0);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::RestrictedTypeContext::classType() {
  return getRuleContext<ObjectPascalParser::ClassTypeContext>(0);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::RestrictedTypeContext::interfaceType() {
  return getRuleContext<ObjectPascalParser::InterfaceTypeContext>(0);
}


size_t ObjectPascalParser::RestrictedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRestrictedType;
}


std::any ObjectPascalParser::RestrictedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRestrictedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::restrictedType() {
  RestrictedTypeContext *_localctx = _tracker.createInstance<RestrictedTypeContext>(_ctx, getState());
  enterRule(_localctx, 52, ObjectPascalParser::RuleRestrictedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(504);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::OBJECT: {
        enterOuterAlt(_localctx, 1);
        setState(501);
        objectType();
        break;
      }

      case ObjectPascalParser::CLASS: {
        enterOuterAlt(_localctx, 2);
        setState(502);
        classType();
        break;
      }

      case ObjectPascalParser::INTERFACE: {
        enterOuterAlt(_localctx, 3);
        setState(503);
        interfaceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassRefTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassRefTypeContext::ClassRefTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ClassRefTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::ClassRefTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassRefType;
}


std::any ObjectPascalParser::ClassRefTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassRefType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::classRefType() {
  ClassRefTypeContext *_localctx = _tracker.createInstance<ClassRefTypeContext>(_ctx, getState());
  enterRule(_localctx, 54, ObjectPascalParser::RuleClassRefType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(ObjectPascalParser::CLASS);
    setState(507);
    match(ObjectPascalParser::OF);
    setState(508);
    typeId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

ObjectPascalParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SimpleTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::SimpleTypeContext::realType() {
  return getRuleContext<ObjectPascalParser::RealTypeContext>(0);
}


size_t ObjectPascalParser::SimpleTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleType;
}


std::any ObjectPascalParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 56, ObjectPascalParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(512);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::Identifier:
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::IntegerLiteral:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(510);
        ordinalType();
        break;
      }

      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::REAL48: {
        setState(511);
        realType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RealTypeContext ------------------------------------------------------------------

ObjectPascalParser::RealTypeContext::RealTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL48() {
  return getToken(ObjectPascalParser::REAL48, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::SINGLE() {
  return getToken(ObjectPascalParser::SINGLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::DOUBLE() {
  return getToken(ObjectPascalParser::DOUBLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::EXTENDED() {
  return getToken(ObjectPascalParser::EXTENDED, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::CURRENCY() {
  return getToken(ObjectPascalParser::CURRENCY, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::COMP() {
  return getToken(ObjectPascalParser::COMP, 0);
}


size_t ObjectPascalParser::RealTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRealType;
}


std::any ObjectPascalParser::RealTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRealType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::realType() {
  RealTypeContext *_localctx = _tracker.createInstance<RealTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, ObjectPascalParser::RuleRealType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(514);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::SINGLE)
      | (1ULL << ObjectPascalParser::DOUBLE)
      | (1ULL << ObjectPascalParser::EXTENDED)
      | (1ULL << ObjectPascalParser::CURRENCY)
      | (1ULL << ObjectPascalParser::COMP))) != 0) || _la == ObjectPascalParser::REAL48)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinalTypeContext ------------------------------------------------------------------

ObjectPascalParser::OrdinalTypeContext::OrdinalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::OrdinalTypeContext::subrangeType() {
  return getRuleContext<ObjectPascalParser::SubrangeTypeContext>(0);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::OrdinalTypeContext::enumeratedType() {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeContext>(0);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::OrdinalTypeContext::ordIdent() {
  return getRuleContext<ObjectPascalParser::OrdIdentContext>(0);
}


size_t ObjectPascalParser::OrdinalTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdinalType;
}


std::any ObjectPascalParser::OrdinalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdinalType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ordinalType() {
  OrdinalTypeContext *_localctx = _tracker.createInstance<OrdinalTypeContext>(_ctx, getState());
  enterRule(_localctx, 60, ObjectPascalParser::RuleOrdinalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Identifier:
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::IntegerLiteral:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(516);
        subrangeType();
        break;
      }

      case ObjectPascalParser::LEFT_PAREN: {
        setState(517);
        enumeratedType();
        break;
      }

      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD: {
        setState(518);
        ordIdent();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdIdentContext ------------------------------------------------------------------

ObjectPascalParser::OrdIdentContext::OrdIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SHORTINT() {
  return getToken(ObjectPascalParser::SHORTINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SMALLINT() {
  return getToken(ObjectPascalParser::SMALLINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CARDINAL() {
  return getToken(ObjectPascalParser::CARDINAL, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGINT() {
  return getToken(ObjectPascalParser::LONGINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INT64() {
  return getToken(ObjectPascalParser::INT64, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WORD() {
  return getToken(ObjectPascalParser::WORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WIDECHAR() {
  return getToken(ObjectPascalParser::WIDECHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGWORD() {
  return getToken(ObjectPascalParser::LONGWORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::PCHAR() {
  return getToken(ObjectPascalParser::PCHAR, 0);
}


size_t ObjectPascalParser::OrdIdentContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdIdent;
}


std::any ObjectPascalParser::OrdIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdIdent(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::ordIdent() {
  OrdIdentContext *_localctx = _tracker.createInstance<OrdIdentContext>(_ctx, getState());
  enterRule(_localctx, 62, ObjectPascalParser::RuleOrdIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::SHORTINT)
      | (1ULL << ObjectPascalParser::SMALLINT)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::LONGINT)
      | (1ULL << ObjectPascalParser::WORD)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR)
      | (1ULL << ObjectPascalParser::WIDECHAR)
      | (1ULL << ObjectPascalParser::PCHAR))) != 0) || ((((_la - 150) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 150)) & ((1ULL << (ObjectPascalParser::CARDINAL - 150))
      | (1ULL << (ObjectPascalParser::INT64 - 150))
      | (1ULL << (ObjectPascalParser::LONGWORD - 150)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantTypeContext ------------------------------------------------------------------

ObjectPascalParser::VariantTypeContext::VariantTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::VARIANT() {
  return getToken(ObjectPascalParser::VARIANT, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::OLEVARIANT() {
  return getToken(ObjectPascalParser::OLEVARIANT, 0);
}


size_t ObjectPascalParser::VariantTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantType;
}


std::any ObjectPascalParser::VariantTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::variantType() {
  VariantTypeContext *_localctx = _tracker.createInstance<VariantTypeContext>(_ctx, getState());
  enterRule(_localctx, 64, ObjectPascalParser::RuleVariantType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(523);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::VARIANT

    || _la == ObjectPascalParser::OLEVARIANT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubrangeTypeContext ------------------------------------------------------------------

ObjectPascalParser::SubrangeTypeContext::SubrangeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SubrangeTypeContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::SubrangeTypeContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::SubrangeTypeContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::SubrangeTypeContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::SubrangeTypeContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}


size_t ObjectPascalParser::SubrangeTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSubrangeType;
}


std::any ObjectPascalParser::SubrangeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSubrangeType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::subrangeType() {
  SubrangeTypeContext *_localctx = _tracker.createInstance<SubrangeTypeContext>(_ctx, getState());
  enterRule(_localctx, 66, ObjectPascalParser::RuleSubrangeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(527);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::IntegerLiteral:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(525);
        constExpr();
        break;
      }

      case ObjectPascalParser::Identifier: {
        setState(526);
        match(ObjectPascalParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(529);
    match(ObjectPascalParser::DOT_DOT);
    setState(532);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::IntegerLiteral:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(530);
        constExpr();
        break;
      }

      case ObjectPascalParser::Identifier: {
        setState(531);
        match(ObjectPascalParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeContext::EnumeratedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::EnumeratedTypeElementContext *> ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement() {
  return getRuleContexts<ObjectPascalParser::EnumeratedTypeElementContext>();
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement(size_t i) {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::EnumeratedTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::EnumeratedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedType;
}


std::any ObjectPascalParser::EnumeratedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::enumeratedType() {
  EnumeratedTypeContext *_localctx = _tracker.createInstance<EnumeratedTypeContext>(_ctx, getState());
  enterRule(_localctx, 68, ObjectPascalParser::RuleEnumeratedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(534);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(535);
    enumeratedTypeElement();
    setState(540);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(536);
      match(ObjectPascalParser::COMMA);
      setState(537);
      enumeratedTypeElement();
      setState(542);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(543);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeElementContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeElementContext::EnumeratedTypeElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::EnumeratedTypeElementContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::EnumeratedTypeElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedTypeElement;
}


std::any ObjectPascalParser::EnumeratedTypeElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedTypeElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::enumeratedTypeElement() {
  EnumeratedTypeElementContext *_localctx = _tracker.createInstance<EnumeratedTypeElementContext>(_ctx, getState());
  enterRule(_localctx, 70, ObjectPascalParser::RuleEnumeratedTypeElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(545);
    match(ObjectPascalParser::Identifier);
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ASSIGN) {
      setState(546);
      match(ObjectPascalParser::ASSIGN);
      setState(547);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringTypeContext ------------------------------------------------------------------

ObjectPascalParser::StringTypeContext::StringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::ANSISTRING() {
  return getToken(ObjectPascalParser::ANSISTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::WIDESTRING() {
  return getToken(ObjectPascalParser::WIDESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::UNICODESTRING() {
  return getToken(ObjectPascalParser::UNICODESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::StringTypeContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}


size_t ObjectPascalParser::StringTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStringType;
}


std::any ObjectPascalParser::StringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStringType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::stringType() {
  StringTypeContext *_localctx = _tracker.createInstance<StringTypeContext>(_ctx, getState());
  enterRule(_localctx, 72, ObjectPascalParser::RuleStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(559);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(550);
      match(ObjectPascalParser::STRING);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(551);
      match(ObjectPascalParser::ANSISTRING);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(552);
      match(ObjectPascalParser::WIDESTRING);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(553);
      match(ObjectPascalParser::UNICODESTRING);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(554);
      match(ObjectPascalParser::STRING);
      setState(555);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(556);
      constExpr();
      setState(557);
      match(ObjectPascalParser::RIGHT_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrucTypeContext ------------------------------------------------------------------

ObjectPascalParser::StrucTypeContext::StrucTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::StrucTypeContext::arrayType() {
  return getRuleContext<ObjectPascalParser::ArrayTypeContext>(0);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::StrucTypeContext::setType() {
  return getRuleContext<ObjectPascalParser::SetTypeContext>(0);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::StrucTypeContext::fileType() {
  return getRuleContext<ObjectPascalParser::FileTypeContext>(0);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::StrucTypeContext::recType() {
  return getRuleContext<ObjectPascalParser::RecTypeContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StrucTypeContext::PACKED() {
  return getTokens(ObjectPascalParser::PACKED);
}

tree::TerminalNode* ObjectPascalParser::StrucTypeContext::PACKED(size_t i) {
  return getToken(ObjectPascalParser::PACKED, i);
}


size_t ObjectPascalParser::StrucTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStrucType;
}


std::any ObjectPascalParser::StrucTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStrucType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::strucType() {
  StrucTypeContext *_localctx = _tracker.createInstance<StrucTypeContext>(_ctx, getState());
  enterRule(_localctx, 74, ObjectPascalParser::RuleStrucType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::PACKED) {
      setState(561);
      match(ObjectPascalParser::PACKED);
    }
    setState(571);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ARRAY: {
        setState(564);
        arrayType();
        break;
      }

      case ObjectPascalParser::SET: {
        setState(565);
        setType();
        break;
      }

      case ObjectPascalParser::FILE: {
        setState(566);
        fileType();
        break;
      }

      case ObjectPascalParser::RECORD: {
        setState(567);
        recType();
        setState(569);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::PACKED) {
          setState(568);
          match(ObjectPascalParser::PACKED);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

ObjectPascalParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::ARRAY() {
  return getToken(ObjectPascalParser::ARRAY, 0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ArrayTypeContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::OrdinalTypeContext *> ObjectPascalParser::ArrayTypeContext::ordinalType() {
  return getRuleContexts<ObjectPascalParser::OrdinalTypeContext>();
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ArrayTypeContext::ordinalType(size_t i) {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ArrayTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayType;
}


std::any ObjectPascalParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 76, ObjectPascalParser::RuleArrayType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(573);
    match(ObjectPascalParser::ARRAY);
    setState(585);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(574);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(575);
      ordinalType();
      setState(580);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectPascalParser::COMMA) {
        setState(576);
        match(ObjectPascalParser::COMMA);
        setState(577);
        ordinalType();
        setState(582);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(583);
      match(ObjectPascalParser::RIGHT_BRACKET);
    }
    setState(587);
    match(ObjectPascalParser::OF);
    setState(588);
    type();
    setState(590);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(589);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecTypeContext ------------------------------------------------------------------

ObjectPascalParser::RecTypeContext::RecTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::RECORD() {
  return getToken(ObjectPascalParser::RECORD, 0);
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecTypeContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::RecTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::RecTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecType;
}


std::any ObjectPascalParser::RecTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::recType() {
  RecTypeContext *_localctx = _tracker.createInstance<RecTypeContext>(_ctx, getState());
  enterRule(_localctx, 78, ObjectPascalParser::RuleRecType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(ObjectPascalParser::RECORD);
    setState(594);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Identifier) {
      setState(593);
      fieldList();
    }
    setState(596);
    match(ObjectPascalParser::END);
    setState(598);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(597);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldListContext ------------------------------------------------------------------

ObjectPascalParser::FieldListContext::FieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FieldDeclContext *> ObjectPascalParser::FieldListContext::fieldDecl() {
  return getRuleContexts<ObjectPascalParser::FieldDeclContext>();
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::FieldListContext::fieldDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::FieldDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FieldListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FieldListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::FieldListContext::variantSection() {
  return getRuleContext<ObjectPascalParser::VariantSectionContext>(0);
}


size_t ObjectPascalParser::FieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldList;
}


std::any ObjectPascalParser::FieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::fieldList() {
  FieldListContext *_localctx = _tracker.createInstance<FieldListContext>(_ctx, getState());
  enterRule(_localctx, 80, ObjectPascalParser::RuleFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(603); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(600);
      fieldDecl();
      setState(601);
      match(ObjectPascalParser::SEMI);
      setState(605); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CASE) {
      setState(607);
      variantSection();
    }
    setState(611);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(610);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclContext ------------------------------------------------------------------

ObjectPascalParser::FieldDeclContext::FieldDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::FieldDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FieldDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::FieldDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FieldDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FieldDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldDecl;
}


std::any ObjectPascalParser::FieldDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::fieldDecl() {
  FieldDeclContext *_localctx = _tracker.createInstance<FieldDeclContext>(_ctx, getState());
  enterRule(_localctx, 82, ObjectPascalParser::RuleFieldDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(613);
    identList();
    setState(614);
    match(ObjectPascalParser::COLON);
    setState(615);
    type();
    setState(617);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(616);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantSectionContext ------------------------------------------------------------------

ObjectPascalParser::VariantSectionContext::VariantSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::VariantSectionContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

std::vector<ObjectPascalParser::RecVariantContext *> ObjectPascalParser::VariantSectionContext::recVariant() {
  return getRuleContexts<ObjectPascalParser::RecVariantContext>();
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::VariantSectionContext::recVariant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecVariantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VariantSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VariantSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantSection;
}


std::any ObjectPascalParser::VariantSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::variantSection() {
  VariantSectionContext *_localctx = _tracker.createInstance<VariantSectionContext>(_ctx, getState());
  enterRule(_localctx, 84, ObjectPascalParser::RuleVariantSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(619);
    match(ObjectPascalParser::CASE);
    setState(622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(620);
      match(ObjectPascalParser::Identifier);
      setState(621);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(624);
    typeId();
    setState(625);
    match(ObjectPascalParser::OF);
    setState(626);
    recVariant();
    setState(631);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(627);
        match(ObjectPascalParser::SEMI);
        setState(628);
        recVariant(); 
      }
      setState(633);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecVariantContext ------------------------------------------------------------------

ObjectPascalParser::RecVariantContext::RecVariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::RecVariantContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::RecVariantContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecVariantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecVariantContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}


size_t ObjectPascalParser::RecVariantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecVariant;
}


std::any ObjectPascalParser::RecVariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecVariant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::recVariant() {
  RecVariantContext *_localctx = _tracker.createInstance<RecVariantContext>(_ctx, getState());
  enterRule(_localctx, 86, ObjectPascalParser::RuleRecVariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(634);
    constExpr();
    setState(639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(635);
      match(ObjectPascalParser::COMMA);
      setState(636);
      constExpr();
      setState(641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(642);
    match(ObjectPascalParser::COLON);
    setState(643);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Identifier) {
      setState(644);
      fieldList();
    }
    setState(647);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTypeContext ------------------------------------------------------------------

ObjectPascalParser::SetTypeContext::SetTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::SET() {
  return getToken(ObjectPascalParser::SET, 0);
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SetTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::SetTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::SetTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetType;
}


std::any ObjectPascalParser::SetTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::setType() {
  SetTypeContext *_localctx = _tracker.createInstance<SetTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, ObjectPascalParser::RuleSetType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(649);
    match(ObjectPascalParser::SET);
    setState(650);
    match(ObjectPascalParser::OF);
    setState(651);
    ordinalType();
    setState(653);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(652);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileTypeContext ------------------------------------------------------------------

ObjectPascalParser::FileTypeContext::FileTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FileTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FileTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FileTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFileType;
}


std::any ObjectPascalParser::FileTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFileType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::fileType() {
  FileTypeContext *_localctx = _tracker.createInstance<FileTypeContext>(_ctx, getState());
  enterRule(_localctx, 90, ObjectPascalParser::RuleFileType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    match(ObjectPascalParser::FILE);
    setState(656);
    match(ObjectPascalParser::OF);
    setState(657);
    typeId();
    setState(659);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      setState(658);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerTypeContext ------------------------------------------------------------------

ObjectPascalParser::PointerTypeContext::PointerTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PointerTypeContext::CARET() {
  return getToken(ObjectPascalParser::CARET, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PointerTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PointerTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PointerTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePointerType;
}


std::any ObjectPascalParser::PointerTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPointerType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::pointerType() {
  PointerTypeContext *_localctx = _tracker.createInstance<PointerTypeContext>(_ctx, getState());
  enterRule(_localctx, 92, ObjectPascalParser::RulePointerType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    match(ObjectPascalParser::CARET);
    setState(662);
    typeId();
    setState(664);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(663);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureTypeContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureTypeContext::ProcedureTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureTypeContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ProcedureTypeContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}


size_t ObjectPascalParser::ProcedureTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureType;
}


std::any ObjectPascalParser::ProcedureTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::procedureType() {
  ProcedureTypeContext *_localctx = _tracker.createInstance<ProcedureTypeContext>(_ctx, getState());
  enterRule(_localctx, 94, ObjectPascalParser::RuleProcedureType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(668);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        setState(666);
        procedureHeading();
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        setState(667);
        functionHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::OF) {
      setState(670);
      match(ObjectPascalParser::OF);
      setState(671);
      match(ObjectPascalParser::OBJECT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarSectionContext ------------------------------------------------------------------

ObjectPascalParser::VarSectionContext::VarSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::VAR() {
  return getToken(ObjectPascalParser::VAR, 0);
}

std::vector<ObjectPascalParser::VarDeclContext *> ObjectPascalParser::VarSectionContext::varDecl() {
  return getRuleContexts<ObjectPascalParser::VarDeclContext>();
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::VarSectionContext::varDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::VarDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VarSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VarSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarSection;
}


std::any ObjectPascalParser::VarSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::varSection() {
  VarSectionContext *_localctx = _tracker.createInstance<VarSectionContext>(_ctx, getState());
  enterRule(_localctx, 96, ObjectPascalParser::RuleVarSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(674);
    match(ObjectPascalParser::VAR);
    setState(678); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(675);
      varDecl();
      setState(676);
      match(ObjectPascalParser::SEMI);
      setState(680); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

ObjectPascalParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::VarDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::VarDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::VarDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::VarDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ABSOLUTE() {
  return getToken(ObjectPascalParser::ABSOLUTE, 0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}


size_t ObjectPascalParser::VarDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarDecl;
}


std::any ObjectPascalParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 98, ObjectPascalParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(682);
    identList();
    setState(683);
    match(ObjectPascalParser::COLON);
    setState(684);
    type();
    setState(692);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ABSOLUTE: {
        setState(685);
        match(ObjectPascalParser::ABSOLUTE);
        setState(688);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::Identifier: {
            setState(686);
            match(ObjectPascalParser::Identifier);
            break;
          }

          case ObjectPascalParser::Integer:
          case ObjectPascalParser::IntegerLiteral:
          case ObjectPascalParser::Float:
          case ObjectPascalParser::StringLiteral: {
            setState(687);
            constExpr();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::ASSIGN: {
        setState(690);
        match(ObjectPascalParser::ASSIGN);
        setState(691);
        constExpr();
        break;
      }

      case ObjectPascalParser::LIBRARY:
      case ObjectPascalParser::SEMI:
      case ObjectPascalParser::PLATFORM:
      case ObjectPascalParser::DEPRECATED: {
        break;
      }

    default:
      break;
    }
    setState(695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(694);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

ObjectPascalParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::SimpleGroupedContext *> ObjectPascalParser::ExpressionContext::simpleGrouped() {
  return getRuleContexts<ObjectPascalParser::SimpleGroupedContext>();
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::ExpressionContext::simpleGrouped(size_t i) {
  return getRuleContext<ObjectPascalParser::SimpleGroupedContext>(i);
}

std::vector<ObjectPascalParser::RelOpContext *> ObjectPascalParser::ExpressionContext::relOp() {
  return getRuleContexts<ObjectPascalParser::RelOpContext>();
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::ExpressionContext::relOp(size_t i) {
  return getRuleContext<ObjectPascalParser::RelOpContext>(i);
}


size_t ObjectPascalParser::ExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExpression;
}


std::any ObjectPascalParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 100, ObjectPascalParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(697);
    simpleGrouped();
    setState(703);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::IN || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & ((1ULL << (ObjectPascalParser::IS - 89))
      | (1ULL << (ObjectPascalParser::AS - 89))
      | (1ULL << (ObjectPascalParser::GRATER - 89))
      | (1ULL << (ObjectPascalParser::LESS - 89))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 89)))) != 0)) {
      setState(698);
      relOp();
      setState(699);
      simpleGrouped();
      setState(705);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleGroupedContext ------------------------------------------------------------------

ObjectPascalParser::SimpleGroupedContext::SimpleGroupedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::SimpleGroupedContext::simpleExpression() {
  return getRuleContext<ObjectPascalParser::SimpleExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::SimpleGroupedContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleGrouped;
}


std::any ObjectPascalParser::SimpleGroupedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleGrouped(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::simpleGrouped() {
  SimpleGroupedContext *_localctx = _tracker.createInstance<SimpleGroupedContext>(_ctx, getState());
  enterRule(_localctx, 102, ObjectPascalParser::RuleSimpleGrouped);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(711);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(706);
      simpleExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(707);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(708);
      simpleExpression();
      setState(709);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleExpressionContext ------------------------------------------------------------------

ObjectPascalParser::SimpleExpressionContext::SimpleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::TermContext *> ObjectPascalParser::SimpleExpressionContext::term() {
  return getRuleContexts<ObjectPascalParser::TermContext>();
}

ObjectPascalParser::TermContext* ObjectPascalParser::SimpleExpressionContext::term(size_t i) {
  return getRuleContext<ObjectPascalParser::TermContext>(i);
}

std::vector<ObjectPascalParser::AddOpContext *> ObjectPascalParser::SimpleExpressionContext::addOp() {
  return getRuleContexts<ObjectPascalParser::AddOpContext>();
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::SimpleExpressionContext::addOp(size_t i) {
  return getRuleContext<ObjectPascalParser::AddOpContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SimpleExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleExpression;
}


std::any ObjectPascalParser::SimpleExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::simpleExpression() {
  SimpleExpressionContext *_localctx = _tracker.createInstance<SimpleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, ObjectPascalParser::RuleSimpleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(714);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::PLUS

    || _la == ObjectPascalParser::MINUS) {
      setState(713);
      _la = _input->LA(1);
      if (!(_la == ObjectPascalParser::PLUS

      || _la == ObjectPascalParser::MINUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(716);
    term();
    setState(722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 90) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 90)) & ((1ULL << (ObjectPascalParser::OR - 90))
      | (1ULL << (ObjectPascalParser::XOR - 90))
      | (1ULL << (ObjectPascalParser::PLUS - 90))
      | (1ULL << (ObjectPascalParser::MINUS - 90)))) != 0)) {
      setState(717);
      addOp();
      setState(718);
      term();
      setState(724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

ObjectPascalParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FactorContext *> ObjectPascalParser::TermContext::factor() {
  return getRuleContexts<ObjectPascalParser::FactorContext>();
}

ObjectPascalParser::FactorContext* ObjectPascalParser::TermContext::factor(size_t i) {
  return getRuleContext<ObjectPascalParser::FactorContext>(i);
}

std::vector<ObjectPascalParser::MulOpContext *> ObjectPascalParser::TermContext::mulOp() {
  return getRuleContexts<ObjectPascalParser::MulOpContext>();
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::TermContext::mulOp(size_t i) {
  return getRuleContext<ObjectPascalParser::MulOpContext>(i);
}


size_t ObjectPascalParser::TermContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTerm;
}


std::any ObjectPascalParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TermContext* ObjectPascalParser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 106, ObjectPascalParser::RuleTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(725);
    factor();
    setState(731);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & ((1ULL << (ObjectPascalParser::DIV - 92))
      | (1ULL << (ObjectPascalParser::MOD - 92))
      | (1ULL << (ObjectPascalParser::AND - 92))
      | (1ULL << (ObjectPascalParser::SHL - 92))
      | (1ULL << (ObjectPascalParser::SHR - 92))
      | (1ULL << (ObjectPascalParser::STAR - 92)))) != 0)) {
      setState(726);
      mulOp();
      setState(727);
      factor();
      setState(733);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

ObjectPascalParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::FactorContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::FactorContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::DOG() {
  return getToken(ObjectPascalParser::DOG, 0);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::FactorContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::FactorContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NIL() {
  return getToken(ObjectPascalParser::NIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::FactorContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NOT() {
  return getToken(ObjectPascalParser::NOT, 0);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::FactorContext::factor() {
  return getRuleContext<ObjectPascalParser::FactorContext>(0);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::FactorContext::setConstructor() {
  return getRuleContext<ObjectPascalParser::SetConstructorContext>(0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FactorContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::FactorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFactor;
}


std::any ObjectPascalParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 108, ObjectPascalParser::RuleFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(758);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(734);
      designator();
      setState(739);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LEFT_PAREN) {
        setState(735);
        match(ObjectPascalParser::LEFT_PAREN);
        setState(736);
        exprList();
        setState(737);
        match(ObjectPascalParser::RIGHT_PAREN);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(741);
      match(ObjectPascalParser::DOG);
      setState(742);
      designator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(743);
      number();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(744);
      string();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(745);
      match(ObjectPascalParser::NIL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(746);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(747);
      expression();
      setState(748);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(750);
      match(ObjectPascalParser::NOT);
      setState(751);
      factor();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(752);
      setConstructor();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(753);
      typeId();
      setState(754);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(755);
      expression();
      setState(756);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelOpContext ------------------------------------------------------------------

ObjectPascalParser::RelOpContext::RelOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER() {
  return getToken(ObjectPascalParser::GRATER, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS() {
  return getToken(ObjectPascalParser::LESS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS_EQUAL() {
  return getToken(ObjectPascalParser::LESS_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER_EQUAL() {
  return getToken(ObjectPascalParser::GRATER_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::NOT_EQUAL() {
  return getToken(ObjectPascalParser::NOT_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IN() {
  return getToken(ObjectPascalParser::IN, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IS() {
  return getToken(ObjectPascalParser::IS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::AS() {
  return getToken(ObjectPascalParser::AS, 0);
}


size_t ObjectPascalParser::RelOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRelOp;
}


std::any ObjectPascalParser::RelOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRelOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::relOp() {
  RelOpContext *_localctx = _tracker.createInstance<RelOpContext>(_ctx, getState());
  enterRule(_localctx, 110, ObjectPascalParser::RuleRelOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(760);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::IN || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & ((1ULL << (ObjectPascalParser::IS - 89))
      | (1ULL << (ObjectPascalParser::AS - 89))
      | (1ULL << (ObjectPascalParser::GRATER - 89))
      | (1ULL << (ObjectPascalParser::LESS - 89))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 89)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddOpContext ------------------------------------------------------------------

ObjectPascalParser::AddOpContext::AddOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::OR() {
  return getToken(ObjectPascalParser::OR, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::XOR() {
  return getToken(ObjectPascalParser::XOR, 0);
}


size_t ObjectPascalParser::AddOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAddOp;
}


std::any ObjectPascalParser::AddOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAddOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::addOp() {
  AddOpContext *_localctx = _tracker.createInstance<AddOpContext>(_ctx, getState());
  enterRule(_localctx, 112, ObjectPascalParser::RuleAddOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(762);
    _la = _input->LA(1);
    if (!(((((_la - 90) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 90)) & ((1ULL << (ObjectPascalParser::OR - 90))
      | (1ULL << (ObjectPascalParser::XOR - 90))
      | (1ULL << (ObjectPascalParser::PLUS - 90))
      | (1ULL << (ObjectPascalParser::MINUS - 90)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulOpContext ------------------------------------------------------------------

ObjectPascalParser::MulOpContext::MulOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::DIV() {
  return getToken(ObjectPascalParser::DIV, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::MOD() {
  return getToken(ObjectPascalParser::MOD, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::AND() {
  return getToken(ObjectPascalParser::AND, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHL() {
  return getToken(ObjectPascalParser::SHL, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHR() {
  return getToken(ObjectPascalParser::SHR, 0);
}


size_t ObjectPascalParser::MulOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMulOp;
}


std::any ObjectPascalParser::MulOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMulOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::mulOp() {
  MulOpContext *_localctx = _tracker.createInstance<MulOpContext>(_ctx, getState());
  enterRule(_localctx, 114, ObjectPascalParser::RuleMulOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(764);
    _la = _input->LA(1);
    if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & ((1ULL << (ObjectPascalParser::DIV - 92))
      | (1ULL << (ObjectPascalParser::MOD - 92))
      | (1ULL << (ObjectPascalParser::AND - 92))
      | (1ULL << (ObjectPascalParser::SHL - 92))
      | (1ULL << (ObjectPascalParser::SHR - 92))
      | (1ULL << (ObjectPascalParser::STAR - 92)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveOpContext ------------------------------------------------------------------

ObjectPascalParser::AdditiveOpContext::AdditiveOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}


size_t ObjectPascalParser::AdditiveOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAdditiveOp;
}


std::any ObjectPascalParser::AdditiveOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::additiveOp() {
  AdditiveOpContext *_localctx = _tracker.createInstance<AdditiveOpContext>(_ctx, getState());
  enterRule(_localctx, 116, ObjectPascalParser::RuleAdditiveOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    _la = _input->LA(1);
    if (!(((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & ((1ULL << (ObjectPascalParser::PLUS - 138))
      | (1ULL << (ObjectPascalParser::MINUS - 138))
      | (1ULL << (ObjectPascalParser::STAR - 138)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

ObjectPascalParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::DesignatorContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::DOT() {
  return getTokens(ObjectPascalParser::DOT);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::DOT(size_t i) {
  return getToken(ObjectPascalParser::DOT, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::LEFT_BRACKET() {
  return getTokens(ObjectPascalParser::LEFT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::LEFT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::LEFT_BRACKET, i);
}

std::vector<ObjectPascalParser::ExprListContext *> ObjectPascalParser::DesignatorContext::exprList() {
  return getRuleContexts<ObjectPascalParser::ExprListContext>();
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::DesignatorContext::exprList(size_t i) {
  return getRuleContext<ObjectPascalParser::ExprListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::RIGHT_BRACKET() {
  return getTokens(ObjectPascalParser::RIGHT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::RIGHT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::DesignatorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDesignator;
}


std::any ObjectPascalParser::DesignatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDesignator(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 118, ObjectPascalParser::RuleDesignator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(768);
    qualId();
    setState(778);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & ((1ULL << (ObjectPascalParser::DOT - 122))
      | (1ULL << (ObjectPascalParser::LEFT_BRACKET - 122))
      | (1ULL << (ObjectPascalParser::CARET - 122)))) != 0)) {
      setState(776);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectPascalParser::DOT: {
          setState(769);
          match(ObjectPascalParser::DOT);
          setState(770);
          match(ObjectPascalParser::Identifier);
          break;
        }

        case ObjectPascalParser::LEFT_BRACKET: {
          setState(771);
          match(ObjectPascalParser::LEFT_BRACKET);
          setState(772);
          exprList();
          setState(773);
          match(ObjectPascalParser::RIGHT_BRACKET);
          break;
        }

        case ObjectPascalParser::CARET: {
          setState(775);
          match(ObjectPascalParser::CARET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(780);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetConstructorContext ------------------------------------------------------------------

ObjectPascalParser::SetConstructorContext::SetConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::SetElementContext *> ObjectPascalParser::SetConstructorContext::setElement() {
  return getRuleContexts<ObjectPascalParser::SetElementContext>();
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::SetConstructorContext::setElement(size_t i) {
  return getRuleContext<ObjectPascalParser::SetElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::SetConstructorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::SetConstructorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetConstructor;
}


std::any ObjectPascalParser::SetConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetConstructor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::setConstructor() {
  SetConstructorContext *_localctx = _tracker.createInstance<SetConstructorContext>(_ctx, getState());
  enterRule(_localctx, 120, ObjectPascalParser::RuleSetConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(781);
    match(ObjectPascalParser::LEFT_BRACKET);
    setState(782);
    setElement();
    setState(787);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(783);
      match(ObjectPascalParser::COMMA);
      setState(784);
      setElement();
      setState(789);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(790);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetElementContext ------------------------------------------------------------------

ObjectPascalParser::SetElementContext::SetElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::SetElementContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::SetElementContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetElementContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::SetElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetElement;
}


std::any ObjectPascalParser::SetElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::setElement() {
  SetElementContext *_localctx = _tracker.createInstance<SetElementContext>(_ctx, getState());
  enterRule(_localctx, 122, ObjectPascalParser::RuleSetElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(792);
    expression();
    setState(795);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(793);
      match(ObjectPascalParser::DOT_DOT);
      setState(794);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprListContext ------------------------------------------------------------------

ObjectPascalParser::ExprListContext::ExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ExprListContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ExprListContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExprListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExprListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExprListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExprList;
}


std::any ObjectPascalParser::ExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExprList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::exprList() {
  ExprListContext *_localctx = _tracker.createInstance<ExprListContext>(_ctx, getState());
  enterRule(_localctx, 124, ObjectPascalParser::RuleExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(797);
    expression();
    setState(802);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(798);
      match(ObjectPascalParser::COMMA);
      setState(799);
      expression();
      setState(804);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

ObjectPascalParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::StatementContext::simpleStatement() {
  return getRuleContext<ObjectPascalParser::SimpleStatementContext>(0);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::StatementContext::structStmt() {
  return getRuleContext<ObjectPascalParser::StructStmtContext>(0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::StatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StatementContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}


size_t ObjectPascalParser::StatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStatement;
}


std::any ObjectPascalParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 126, ObjectPascalParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(805);
      labelId();
      setState(806);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(812);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INHERITED:
      case ObjectPascalParser::GOTO:
      case ObjectPascalParser::Identifier: {
        setState(810);
        simpleStatement();
        break;
      }

      case ObjectPascalParser::CASE:
      case ObjectPascalParser::BEGIN:
      case ObjectPascalParser::IF:
      case ObjectPascalParser::REPEAT:
      case ObjectPascalParser::WHILE:
      case ObjectPascalParser::FOR:
      case ObjectPascalParser::WITH:
      case ObjectPascalParser::TRY:
      case ObjectPascalParser::RAISE: {
        setState(811);
        structStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtListContext ------------------------------------------------------------------

ObjectPascalParser::StmtListContext::StmtListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::StmtListContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::StmtListContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StmtListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::StmtListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::StmtListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStmtList;
}


std::any ObjectPascalParser::StmtListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStmtList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::stmtList() {
  StmtListContext *_localctx = _tracker.createInstance<StmtListContext>(_ctx, getState());
  enterRule(_localctx, 128, ObjectPascalParser::RuleStmtList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(814);
      statement();
      setState(815);
      match(ObjectPascalParser::SEMI);
      setState(819); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (ObjectPascalParser::CASE - 43))
      | (1ULL << (ObjectPascalParser::INHERITED - 43))
      | (1ULL << (ObjectPascalParser::GOTO - 43))
      | (1ULL << (ObjectPascalParser::BEGIN - 43))
      | (1ULL << (ObjectPascalParser::IF - 43))
      | (1ULL << (ObjectPascalParser::REPEAT - 43))
      | (1ULL << (ObjectPascalParser::WHILE - 43))
      | (1ULL << (ObjectPascalParser::FOR - 43))
      | (1ULL << (ObjectPascalParser::WITH - 43))
      | (1ULL << (ObjectPascalParser::TRY - 43))
      | (1ULL << (ObjectPascalParser::RAISE - 43)))) != 0) || _la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleStatementContext ------------------------------------------------------------------

ObjectPascalParser::SimpleStatementContext::SimpleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::SimpleStatementContext::assignmentStmt() {
  return getRuleContext<ObjectPascalParser::AssignmentStmtContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::INHERITED() {
  return getToken(ObjectPascalParser::INHERITED, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::GOTO() {
  return getToken(ObjectPascalParser::GOTO, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::SimpleStatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

ObjectPascalParser::ProcedureCallContext* ObjectPascalParser::SimpleStatementContext::procedureCall() {
  return getRuleContext<ObjectPascalParser::ProcedureCallContext>(0);
}


size_t ObjectPascalParser::SimpleStatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleStatement;
}


std::any ObjectPascalParser::SimpleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::simpleStatement() {
  SimpleStatementContext *_localctx = _tracker.createInstance<SimpleStatementContext>(_ctx, getState());
  enterRule(_localctx, 130, ObjectPascalParser::RuleSimpleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(826);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(821);
      assignmentStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(822);
      match(ObjectPascalParser::INHERITED);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(823);
      match(ObjectPascalParser::GOTO);
      setState(824);
      labelId();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(825);
      procedureCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructStmtContext ------------------------------------------------------------------

ObjectPascalParser::StructStmtContext::StructStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::StructStmtContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::StructStmtContext::conditionalStmt() {
  return getRuleContext<ObjectPascalParser::ConditionalStmtContext>(0);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::StructStmtContext::loopStmt() {
  return getRuleContext<ObjectPascalParser::LoopStmtContext>(0);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::StructStmtContext::withStmt() {
  return getRuleContext<ObjectPascalParser::WithStmtContext>(0);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::StructStmtContext::tryExceptStmt() {
  return getRuleContext<ObjectPascalParser::TryExceptStmtContext>(0);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::StructStmtContext::tryFinallyStmt() {
  return getRuleContext<ObjectPascalParser::TryFinallyStmtContext>(0);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::StructStmtContext::raiseStmt() {
  return getRuleContext<ObjectPascalParser::RaiseStmtContext>(0);
}


size_t ObjectPascalParser::StructStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStructStmt;
}


std::any ObjectPascalParser::StructStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStructStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::structStmt() {
  StructStmtContext *_localctx = _tracker.createInstance<StructStmtContext>(_ctx, getState());
  enterRule(_localctx, 132, ObjectPascalParser::RuleStructStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(835);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(828);
      compoundStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(829);
      conditionalStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(830);
      loopStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(831);
      withStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(832);
      tryExceptStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(833);
      tryFinallyStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(834);
      raiseStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStmtContext ------------------------------------------------------------------

ObjectPascalParser::CompoundStmtContext::CompoundStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::BEGIN() {
  return getToken(ObjectPascalParser::BEGIN, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CompoundStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::CompoundStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCompoundStmt;
}


std::any ObjectPascalParser::CompoundStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCompoundStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::compoundStmt() {
  CompoundStmtContext *_localctx = _tracker.createInstance<CompoundStmtContext>(_ctx, getState());
  enterRule(_localctx, 134, ObjectPascalParser::RuleCompoundStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    match(ObjectPascalParser::BEGIN);
    setState(838);
    stmtList();
    setState(840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(839);
      match(ObjectPascalParser::SEMI);
    }
    setState(842);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalStmtContext ------------------------------------------------------------------

ObjectPascalParser::ConditionalStmtContext::ConditionalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ConditionalStmtContext::ifStmt() {
  return getRuleContext<ObjectPascalParser::IfStmtContext>(0);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::ConditionalStmtContext::caseStmt() {
  return getRuleContext<ObjectPascalParser::CaseStmtContext>(0);
}


size_t ObjectPascalParser::ConditionalStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConditionalStmt;
}


std::any ObjectPascalParser::ConditionalStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConditionalStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::conditionalStmt() {
  ConditionalStmtContext *_localctx = _tracker.createInstance<ConditionalStmtContext>(_ctx, getState());
  enterRule(_localctx, 136, ObjectPascalParser::RuleConditionalStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(846);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::IF: {
        enterOuterAlt(_localctx, 1);
        setState(844);
        ifStmt();
        break;
      }

      case ObjectPascalParser::CASE: {
        enterOuterAlt(_localctx, 2);
        setState(845);
        caseStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureCallContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureCallContext::ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ProcedureCallContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureCallContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::ProcedureCallContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureCallContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ProcedureCallContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureCall;
}


std::any ObjectPascalParser::ProcedureCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureCall(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureCallContext* ObjectPascalParser::procedureCall() {
  ProcedureCallContext *_localctx = _tracker.createInstance<ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 138, ObjectPascalParser::RuleProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(848);
    qualId();
    setState(853);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(849);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(850);
      exprList();
      setState(851);
      match(ObjectPascalParser::RIGHT_PAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentStmtContext ------------------------------------------------------------------

ObjectPascalParser::AssignmentStmtContext::AssignmentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::AssignmentStmtContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::AssignmentStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::AssignmentStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}


size_t ObjectPascalParser::AssignmentStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAssignmentStmt;
}


std::any ObjectPascalParser::AssignmentStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::assignmentStmt() {
  AssignmentStmtContext *_localctx = _tracker.createInstance<AssignmentStmtContext>(_ctx, getState());
  enterRule(_localctx, 140, ObjectPascalParser::RuleAssignmentStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    designator();
    setState(856);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(857);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

ObjectPascalParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::IF() {
  return getToken(ObjectPascalParser::IF, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::IfStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::THEN() {
  return getToken(ObjectPascalParser::THEN, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::IfStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}


size_t ObjectPascalParser::IfStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIfStmt;
}


std::any ObjectPascalParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 142, ObjectPascalParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(859);
    match(ObjectPascalParser::IF);
    setState(860);
    expression();
    setState(861);
    match(ObjectPascalParser::THEN);
    setState(862);
    statement();
    setState(865);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(863);
      match(ObjectPascalParser::ELSE);
      setState(864);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStmtContext ------------------------------------------------------------------

ObjectPascalParser::CaseStmtContext::CaseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::CaseStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<ObjectPascalParser::CaseSelectorContext *> ObjectPascalParser::CaseStmtContext::caseSelector() {
  return getRuleContexts<ObjectPascalParser::CaseSelectorContext>();
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::CaseStmtContext::caseSelector(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseSelectorContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CaseStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::CaseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseStmt;
}


std::any ObjectPascalParser::CaseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::caseStmt() {
  CaseStmtContext *_localctx = _tracker.createInstance<CaseStmtContext>(_ctx, getState());
  enterRule(_localctx, 144, ObjectPascalParser::RuleCaseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(867);
    match(ObjectPascalParser::CASE);
    setState(868);
    expression();
    setState(869);
    match(ObjectPascalParser::OF);

    setState(870);
    caseSelector();
    setState(875);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(871);
        match(ObjectPascalParser::SEMI);
        setState(872);
        caseSelector(); 
      }
      setState(877);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    }
    setState(880);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ELSE) {
      setState(878);
      match(ObjectPascalParser::ELSE);
      setState(879);
      stmtList();
    }
    setState(883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(882);
      match(ObjectPascalParser::SEMI);
    }
    setState(885);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseSelectorContext ------------------------------------------------------------------

ObjectPascalParser::CaseSelectorContext::CaseSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::CaseLabelContext *> ObjectPascalParser::CaseSelectorContext::caseLabel() {
  return getRuleContexts<ObjectPascalParser::CaseLabelContext>();
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::CaseSelectorContext::caseLabel(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseLabelContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::CaseSelectorContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseSelectorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::CaseSelectorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseSelector;
}


std::any ObjectPascalParser::CaseSelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseSelector(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::caseSelector() {
  CaseSelectorContext *_localctx = _tracker.createInstance<CaseSelectorContext>(_ctx, getState());
  enterRule(_localctx, 146, ObjectPascalParser::RuleCaseSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    caseLabel();
    setState(892);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(888);
      match(ObjectPascalParser::COMMA);
      setState(889);
      caseLabel();
      setState(894);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(895);
    match(ObjectPascalParser::COLON);
    setState(896);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseLabelContext ------------------------------------------------------------------

ObjectPascalParser::CaseLabelContext::CaseLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::CaseLabelContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::CaseLabelContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseLabelContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::CaseLabelContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseLabel;
}


std::any ObjectPascalParser::CaseLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseLabel(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::caseLabel() {
  CaseLabelContext *_localctx = _tracker.createInstance<CaseLabelContext>(_ctx, getState());
  enterRule(_localctx, 148, ObjectPascalParser::RuleCaseLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    constExpr();
    setState(901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(899);
      match(ObjectPascalParser::DOT_DOT);
      setState(900);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

ObjectPascalParser::LoopStmtContext::LoopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::LoopStmtContext::repeatStmt() {
  return getRuleContext<ObjectPascalParser::RepeatStmtContext>(0);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::LoopStmtContext::whileStmt() {
  return getRuleContext<ObjectPascalParser::WhileStmtContext>(0);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::LoopStmtContext::forStmt() {
  return getRuleContext<ObjectPascalParser::ForStmtContext>(0);
}


size_t ObjectPascalParser::LoopStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLoopStmt;
}


std::any ObjectPascalParser::LoopStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLoopStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::loopStmt() {
  LoopStmtContext *_localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
  enterRule(_localctx, 150, ObjectPascalParser::RuleLoopStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(906);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REPEAT: {
        enterOuterAlt(_localctx, 1);
        setState(903);
        repeatStmt();
        break;
      }

      case ObjectPascalParser::WHILE: {
        enterOuterAlt(_localctx, 2);
        setState(904);
        whileStmt();
        break;
      }

      case ObjectPascalParser::FOR: {
        enterOuterAlt(_localctx, 3);
        setState(905);
        forStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatStmtContext ------------------------------------------------------------------

ObjectPascalParser::RepeatStmtContext::RepeatStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::REPEAT() {
  return getToken(ObjectPascalParser::REPEAT, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::RepeatStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::UNTIL() {
  return getToken(ObjectPascalParser::UNTIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::RepeatStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::RepeatStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRepeatStmt;
}


std::any ObjectPascalParser::RepeatStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRepeatStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::repeatStmt() {
  RepeatStmtContext *_localctx = _tracker.createInstance<RepeatStmtContext>(_ctx, getState());
  enterRule(_localctx, 152, ObjectPascalParser::RuleRepeatStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    match(ObjectPascalParser::REPEAT);
    setState(909);
    stmtList();
    setState(911);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(910);
      match(ObjectPascalParser::SEMI);
    }
    setState(913);
    match(ObjectPascalParser::UNTIL);
    setState(914);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

ObjectPascalParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::WHILE() {
  return getToken(ObjectPascalParser::WHILE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::WhileStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WhileStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WhileStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWhileStmt;
}


std::any ObjectPascalParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 154, ObjectPascalParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(916);
    match(ObjectPascalParser::WHILE);
    setState(917);
    expression();
    setState(918);
    match(ObjectPascalParser::DO);
    setState(919);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

ObjectPascalParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::FOR() {
  return getToken(ObjectPascalParser::FOR, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ForStmtContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ForStmtContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ForStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::TO() {
  return getToken(ObjectPascalParser::TO, 0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DOWNTO() {
  return getToken(ObjectPascalParser::DOWNTO, 0);
}


size_t ObjectPascalParser::ForStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleForStmt;
}


std::any ObjectPascalParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 156, ObjectPascalParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(921);
    match(ObjectPascalParser::FOR);
    setState(922);
    qualId();
    setState(923);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(924);
    expression();
    setState(925);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::TO

    || _la == ObjectPascalParser::DOWNTO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(926);
    expression();
    setState(927);
    match(ObjectPascalParser::DO);
    setState(928);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStmtContext ------------------------------------------------------------------

ObjectPascalParser::WithStmtContext::WithStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::WITH() {
  return getToken(ObjectPascalParser::WITH, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::WithStmtContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WithStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WithStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWithStmt;
}


std::any ObjectPascalParser::WithStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWithStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::withStmt() {
  WithStmtContext *_localctx = _tracker.createInstance<WithStmtContext>(_ctx, getState());
  enterRule(_localctx, 158, ObjectPascalParser::RuleWithStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(930);
    match(ObjectPascalParser::WITH);
    setState(931);
    qualIdList();
    setState(932);
    match(ObjectPascalParser::DO);
    setState(933);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryExceptStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryExceptStmtContext::TryExceptStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryExceptStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryExceptStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::EXCEPT() {
  return getToken(ObjectPascalParser::EXCEPT, 0);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::TryExceptStmtContext::exceptionBlock() {
  return getRuleContext<ObjectPascalParser::ExceptionBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TryExceptStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TryExceptStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryExceptStmt;
}


std::any ObjectPascalParser::TryExceptStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryExceptStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::tryExceptStmt() {
  TryExceptStmtContext *_localctx = _tracker.createInstance<TryExceptStmtContext>(_ctx, getState());
  enterRule(_localctx, 160, ObjectPascalParser::RuleTryExceptStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(935);
    match(ObjectPascalParser::TRY);
    setState(936);
    statement();
    setState(941);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(937);
      match(ObjectPascalParser::SEMI);
      setState(938);
      statement();
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(944);
    match(ObjectPascalParser::EXCEPT);
    setState(945);
    exceptionBlock();
    setState(946);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionBlockContext ------------------------------------------------------------------

ObjectPascalParser::ExceptionBlockContext::ExceptionBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::ON() {
  return getTokens(ObjectPascalParser::ON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ON(size_t i) {
  return getToken(ObjectPascalParser::ON, i);
}

std::vector<ObjectPascalParser::TypeIdContext *> ObjectPascalParser::ExceptionBlockContext::typeId() {
  return getRuleContexts<ObjectPascalParser::TypeIdContext>();
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ExceptionBlockContext::typeId(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::DO() {
  return getTokens(ObjectPascalParser::DO);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::DO(size_t i) {
  return getToken(ObjectPascalParser::DO, i);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::ExceptionBlockContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ExceptionBlockContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::COLON() {
  return getTokens(ObjectPascalParser::COLON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::COLON(size_t i) {
  return getToken(ObjectPascalParser::COLON, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ExceptionBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExceptionBlock;
}


std::any ObjectPascalParser::ExceptionBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExceptionBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::exceptionBlock() {
  ExceptionBlockContext *_localctx = _tracker.createInstance<ExceptionBlockContext>(_ctx, getState());
  enterRule(_localctx, 162, ObjectPascalParser::RuleExceptionBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(948);
    match(ObjectPascalParser::ON);
    setState(951);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      setState(949);
      match(ObjectPascalParser::Identifier);
      setState(950);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(953);
    typeId();
    setState(954);
    match(ObjectPascalParser::DO);
    setState(955);
    statement();
    setState(968);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(956);
      match(ObjectPascalParser::SEMI);
      setState(957);
      match(ObjectPascalParser::ON);
      setState(960);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
      case 1: {
        setState(958);
        match(ObjectPascalParser::Identifier);
        setState(959);
        match(ObjectPascalParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(962);
      typeId();
      setState(963);
      match(ObjectPascalParser::DO);
      setState(964);
      statement();
      setState(970);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(971);
    match(ObjectPascalParser::ELSE);
    setState(975);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (ObjectPascalParser::CASE - 43))
      | (1ULL << (ObjectPascalParser::INHERITED - 43))
      | (1ULL << (ObjectPascalParser::GOTO - 43))
      | (1ULL << (ObjectPascalParser::BEGIN - 43))
      | (1ULL << (ObjectPascalParser::IF - 43))
      | (1ULL << (ObjectPascalParser::REPEAT - 43))
      | (1ULL << (ObjectPascalParser::WHILE - 43))
      | (1ULL << (ObjectPascalParser::FOR - 43))
      | (1ULL << (ObjectPascalParser::WITH - 43))
      | (1ULL << (ObjectPascalParser::TRY - 43))
      | (1ULL << (ObjectPascalParser::RAISE - 43)))) != 0) || _la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral) {
      setState(972);
      statement();
      setState(977);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(978);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryFinallyStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryFinallyStmtContext::TryFinallyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryFinallyStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryFinallyStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::FINALLY() {
  return getToken(ObjectPascalParser::FINALLY, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::TryFinallyStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryFinallyStmt;
}


std::any ObjectPascalParser::TryFinallyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryFinallyStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::tryFinallyStmt() {
  TryFinallyStmtContext *_localctx = _tracker.createInstance<TryFinallyStmtContext>(_ctx, getState());
  enterRule(_localctx, 164, ObjectPascalParser::RuleTryFinallyStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(981);
    match(ObjectPascalParser::TRY);
    setState(982);
    statement();
    setState(983);
    match(ObjectPascalParser::FINALLY);
    setState(984);
    statement();
    setState(986);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(985);
      match(ObjectPascalParser::SEMI);
    }
    setState(988);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RaiseStmtContext ------------------------------------------------------------------

ObjectPascalParser::RaiseStmtContext::RaiseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::RAISE() {
  return getToken(ObjectPascalParser::RAISE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RaiseStmtContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::AT() {
  return getToken(ObjectPascalParser::AT, 0);
}


size_t ObjectPascalParser::RaiseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRaiseStmt;
}


std::any ObjectPascalParser::RaiseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRaiseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::raiseStmt() {
  RaiseStmtContext *_localctx = _tracker.createInstance<RaiseStmtContext>(_ctx, getState());
  enterRule(_localctx, 166, ObjectPascalParser::RuleRaiseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(990);
    match(ObjectPascalParser::RAISE);
    setState(992);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(991);
      match(ObjectPascalParser::Identifier);
      break;
    }

    default:
      break;
    }
    setState(996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::AT) {
      setState(994);
      match(ObjectPascalParser::AT);
      setState(995);
      match(ObjectPascalParser::Identifier);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclSectionContext::ProcedureDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::procedureDecl() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclContext>(0);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::functionDecl() {
  return getRuleContext<ObjectPascalParser::FunctionDeclContext>(0);
}

ObjectPascalParser::ConstructorDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::constructorDecl() {
  return getRuleContext<ObjectPascalParser::ConstructorDeclContext>(0);
}

ObjectPascalParser::DestructorDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::destructorDecl() {
  return getRuleContext<ObjectPascalParser::DestructorDeclContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDeclSection;
}


std::any ObjectPascalParser::ProcedureDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::procedureDeclSection() {
  ProcedureDeclSectionContext *_localctx = _tracker.createInstance<ProcedureDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 168, ObjectPascalParser::RuleProcedureDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1002);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(998);
        procedureDecl();
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(999);
        functionDecl();
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR: {
        enterOuterAlt(_localctx, 3);
        setState(1000);
        constructorDecl();
        break;
      }

      case ObjectPascalParser::DESTRUCTOR: {
        enterOuterAlt(_localctx, 4);
        setState(1001);
        destructorDecl();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclContext::ProcedureDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureDeclContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ProcedureDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ProcedureDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::ProcedureDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ProcedureDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ProcedureDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDecl;
}


std::any ObjectPascalParser::ProcedureDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::procedureDecl() {
  ProcedureDeclContext *_localctx = _tracker.createInstance<ProcedureDeclContext>(_ctx, getState());
  enterRule(_localctx, 170, ObjectPascalParser::RuleProcedureDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1004);
    procedureHeading();
    setState(1005);
    match(ObjectPascalParser::SEMI);
    setState(1007);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1006);
      directive();
    }
    setState(1010);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1009);
      portabilityDirective();
    }
    setState(1012);
    block();
    setState(1013);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclContext ------------------------------------------------------------------

ObjectPascalParser::FunctionDeclContext::FunctionDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::FunctionDeclContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FunctionDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FunctionDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::FunctionDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::FunctionDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FunctionDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FunctionDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionDecl;
}


std::any ObjectPascalParser::FunctionDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::functionDecl() {
  FunctionDeclContext *_localctx = _tracker.createInstance<FunctionDeclContext>(_ctx, getState());
  enterRule(_localctx, 172, ObjectPascalParser::RuleFunctionDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    functionHeading();
    setState(1016);
    match(ObjectPascalParser::SEMI);
    setState(1018);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1017);
      directive();
    }
    setState(1021);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1020);
      portabilityDirective();
    }
    setState(1023);
    block();
    setState(1024);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclContext ------------------------------------------------------------------

ObjectPascalParser::ConstructorDeclContext::ConstructorDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::ConstructorDeclContext::constructorHeading() {
  return getRuleContext<ObjectPascalParser::ConstructorHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstructorDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ConstructorDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::ConstructorDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ConstructorDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ConstructorDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::ConstructorDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstructorDecl;
}


std::any ObjectPascalParser::ConstructorDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstructorDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstructorDeclContext* ObjectPascalParser::constructorDecl() {
  ConstructorDeclContext *_localctx = _tracker.createInstance<ConstructorDeclContext>(_ctx, getState());
  enterRule(_localctx, 174, ObjectPascalParser::RuleConstructorDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1026);
    constructorHeading();
    setState(1027);
    match(ObjectPascalParser::SEMI);
    setState(1029);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1028);
      directive();
    }
    setState(1032);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1031);
      portabilityDirective();
    }
    setState(1034);
    block();
    setState(1035);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestructorDeclContext ------------------------------------------------------------------

ObjectPascalParser::DestructorDeclContext::DestructorDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::DestructorDeclContext::destructorHeading() {
  return getRuleContext<ObjectPascalParser::DestructorHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DestructorDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::DestructorDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::DestructorDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::DestructorDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::DestructorDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::DestructorDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDestructorDecl;
}


std::any ObjectPascalParser::DestructorDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDestructorDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DestructorDeclContext* ObjectPascalParser::destructorDecl() {
  DestructorDeclContext *_localctx = _tracker.createInstance<DestructorDeclContext>(_ctx, getState());
  enterRule(_localctx, 176, ObjectPascalParser::RuleDestructorDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    destructorHeading();
    setState(1038);
    match(ObjectPascalParser::SEMI);
    setState(1040);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1039);
      directive();
    }
    setState(1043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1042);
      portabilityDirective();
    }
    setState(1045);
    block();
    setState(1046);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionHeadingContext ------------------------------------------------------------------

ObjectPascalParser::FunctionHeadingContext::FunctionHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::FUNCTION() {
  return getToken(ObjectPascalParser::FUNCTION, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::FunctionHeadingContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::FunctionHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::FunctionHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionHeading;
}


std::any ObjectPascalParser::FunctionHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::functionHeading() {
  FunctionHeadingContext *_localctx = _tracker.createInstance<FunctionHeadingContext>(_ctx, getState());
  enterRule(_localctx, 178, ObjectPascalParser::RuleFunctionHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(ObjectPascalParser::FUNCTION);
    setState(1049);
    match(ObjectPascalParser::Identifier);
    setState(1051);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1050);
      formalParameters();
    }
    setState(1053);
    match(ObjectPascalParser::COLON);
    setState(1056);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::REAL48:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::Identifier:
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::IntegerLiteral:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(1054);
        simpleType();
        break;
      }

      case ObjectPascalParser::STRING: {
        setState(1055);
        match(ObjectPascalParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureHeadingContext::ProcedureHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::PROCEDURE() {
  return getToken(ObjectPascalParser::PROCEDURE, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ProcedureHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ProcedureHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureHeading;
}


std::any ObjectPascalParser::ProcedureHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::procedureHeading() {
  ProcedureHeadingContext *_localctx = _tracker.createInstance<ProcedureHeadingContext>(_ctx, getState());
  enterRule(_localctx, 180, ObjectPascalParser::RuleProcedureHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1058);
    match(ObjectPascalParser::PROCEDURE);
    setState(1059);
    match(ObjectPascalParser::Identifier);
    setState(1061);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1060);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

ObjectPascalParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::FormalParmContext *> ObjectPascalParser::FormalParametersContext::formalParm() {
  return getRuleContexts<ObjectPascalParser::FormalParmContext>();
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::FormalParametersContext::formalParm(size_t i) {
  return getRuleContext<ObjectPascalParser::FormalParmContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FormalParametersContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::FormalParametersContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParameters;
}


std::any ObjectPascalParser::FormalParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameters(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 182, ObjectPascalParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1063);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1065);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::VAR - 14))
      | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0) || _la == ObjectPascalParser::Identifier) {
      setState(1064);
      formalParm();
    }
    setState(1071);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(1067);
      match(ObjectPascalParser::COMMA);
      setState(1068);
      formalParm();
      setState(1073);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1074);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParmContext ------------------------------------------------------------------

ObjectPascalParser::FormalParmContext::FormalParmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::FormalParmContext::parameter() {
  return getRuleContext<ObjectPascalParser::ParameterContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::VAR() {
  return getToken(ObjectPascalParser::VAR, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::OUT() {
  return getToken(ObjectPascalParser::OUT, 0);
}


size_t ObjectPascalParser::FormalParmContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParm;
}


std::any ObjectPascalParser::FormalParmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::formalParm() {
  FormalParmContext *_localctx = _tracker.createInstance<FormalParmContext>(_ctx, getState());
  enterRule(_localctx, 184, ObjectPascalParser::RuleFormalParm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1077);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::VAR - 14))
      | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0)) {
      setState(1076);
      _la = _input->LA(1);
      if (!(((((_la - 14) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
        | (1ULL << (ObjectPascalParser::VAR - 14))
        | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1079);
    parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

ObjectPascalParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ParameterContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::ParameterContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ARRAY() {
  return getToken(ObjectPascalParser::ARRAY, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ParameterContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ParameterContext::getRuleIndex() const {
  return ObjectPascalParser::RuleParameter;
}


std::any ObjectPascalParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 186, ObjectPascalParser::RuleParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1101);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1081);
      identList();
      setState(1092);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::COLON) {
        setState(1082);
        match(ObjectPascalParser::COLON);
        setState(1090);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::REAL:
          case ObjectPascalParser::SINGLE:
          case ObjectPascalParser::DOUBLE:
          case ObjectPascalParser::EXTENDED:
          case ObjectPascalParser::CURRENCY:
          case ObjectPascalParser::COMP:
          case ObjectPascalParser::SHORTINT:
          case ObjectPascalParser::SMALLINT:
          case ObjectPascalParser::INTEGER:
          case ObjectPascalParser::BYTE:
          case ObjectPascalParser::LONGINT:
          case ObjectPascalParser::WORD:
          case ObjectPascalParser::BOOLEAN:
          case ObjectPascalParser::CHAR:
          case ObjectPascalParser::WIDECHAR:
          case ObjectPascalParser::PCHAR:
          case ObjectPascalParser::ARRAY:
          case ObjectPascalParser::REAL48:
          case ObjectPascalParser::LEFT_PAREN:
          case ObjectPascalParser::CARDINAL:
          case ObjectPascalParser::INT64:
          case ObjectPascalParser::LONGWORD:
          case ObjectPascalParser::Identifier:
          case ObjectPascalParser::Integer:
          case ObjectPascalParser::IntegerLiteral:
          case ObjectPascalParser::Float:
          case ObjectPascalParser::StringLiteral: {
            setState(1085);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == ObjectPascalParser::ARRAY) {
              setState(1083);
              match(ObjectPascalParser::ARRAY);
              setState(1084);
              match(ObjectPascalParser::OF);
            }
            setState(1087);
            simpleType();
            break;
          }

          case ObjectPascalParser::STRING: {
            setState(1088);
            match(ObjectPascalParser::STRING);
            break;
          }

          case ObjectPascalParser::FILE: {
            setState(1089);
            match(ObjectPascalParser::FILE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1094);
      match(ObjectPascalParser::Identifier);
      setState(1095);
      match(ObjectPascalParser::COLON);
      setState(1096);
      simpleType();
      setState(1099);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::ASSIGN) {
        setState(1097);
        match(ObjectPascalParser::ASSIGN);
        setState(1098);
        constExpr();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveContext ------------------------------------------------------------------

ObjectPascalParser::DirectiveContext::DirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::CDECL() {
  return getToken(ObjectPascalParser::CDECL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REGISTER() {
  return getToken(ObjectPascalParser::REGISTER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::DYNAMIC() {
  return getToken(ObjectPascalParser::DYNAMIC, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VIRTUAL() {
  return getToken(ObjectPascalParser::VIRTUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::DirectiveContext::externalDirective() {
  return getRuleContext<ObjectPascalParser::ExternalDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::NEAR() {
  return getToken(ObjectPascalParser::NEAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FAR() {
  return getToken(ObjectPascalParser::FAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FORWARD() {
  return getToken(ObjectPascalParser::FORWARD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::INLINE() {
  return getToken(ObjectPascalParser::INLINE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ASSEMBLER() {
  return getToken(ObjectPascalParser::ASSEMBLER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::MESSAGE() {
  return getToken(ObjectPascalParser::MESSAGE, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::DirectiveContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERRIDE() {
  return getToken(ObjectPascalParser::OVERRIDE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERLOAD() {
  return getToken(ObjectPascalParser::OVERLOAD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::PASCAL() {
  return getToken(ObjectPascalParser::PASCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REINTRODUCE() {
  return getToken(ObjectPascalParser::REINTRODUCE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::SAFECALL() {
  return getToken(ObjectPascalParser::SAFECALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::STDCALL() {
  return getToken(ObjectPascalParser::STDCALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VARARGS() {
  return getToken(ObjectPascalParser::VARARGS, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::LOCAL() {
  return getToken(ObjectPascalParser::LOCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ABSTRACT() {
  return getToken(ObjectPascalParser::ABSTRACT, 0);
}


size_t ObjectPascalParser::DirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDirective;
}


std::any ObjectPascalParser::DirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::directive() {
  DirectiveContext *_localctx = _tracker.createInstance<DirectiveContext>(_ctx, getState());
  enterRule(_localctx, 188, ObjectPascalParser::RuleDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1125);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CDECL: {
        enterOuterAlt(_localctx, 1);
        setState(1103);
        match(ObjectPascalParser::CDECL);
        break;
      }

      case ObjectPascalParser::REGISTER: {
        enterOuterAlt(_localctx, 2);
        setState(1104);
        match(ObjectPascalParser::REGISTER);
        break;
      }

      case ObjectPascalParser::DYNAMIC: {
        enterOuterAlt(_localctx, 3);
        setState(1105);
        match(ObjectPascalParser::DYNAMIC);
        break;
      }

      case ObjectPascalParser::VIRTUAL: {
        enterOuterAlt(_localctx, 4);
        setState(1106);
        match(ObjectPascalParser::VIRTUAL);
        break;
      }

      case ObjectPascalParser::EXPORT: {
        enterOuterAlt(_localctx, 5);
        setState(1107);
        match(ObjectPascalParser::EXPORT);
        break;
      }

      case ObjectPascalParser::EXTERNAL: {
        enterOuterAlt(_localctx, 6);
        setState(1108);
        externalDirective();
        break;
      }

      case ObjectPascalParser::NEAR: {
        enterOuterAlt(_localctx, 7);
        setState(1109);
        match(ObjectPascalParser::NEAR);
        break;
      }

      case ObjectPascalParser::FAR: {
        enterOuterAlt(_localctx, 8);
        setState(1110);
        match(ObjectPascalParser::FAR);
        break;
      }

      case ObjectPascalParser::FORWARD: {
        enterOuterAlt(_localctx, 9);
        setState(1111);
        match(ObjectPascalParser::FORWARD);
        break;
      }

      case ObjectPascalParser::INLINE: {
        enterOuterAlt(_localctx, 10);
        setState(1112);
        match(ObjectPascalParser::INLINE);
        break;
      }

      case ObjectPascalParser::ASSEMBLER: {
        enterOuterAlt(_localctx, 11);
        setState(1113);
        match(ObjectPascalParser::ASSEMBLER);
        break;
      }

      case ObjectPascalParser::MESSAGE: {
        enterOuterAlt(_localctx, 12);
        setState(1114);
        match(ObjectPascalParser::MESSAGE);
        setState(1115);
        constExpr();
        break;
      }

      case ObjectPascalParser::OVERRIDE: {
        enterOuterAlt(_localctx, 13);
        setState(1116);
        match(ObjectPascalParser::OVERRIDE);
        break;
      }

      case ObjectPascalParser::OVERLOAD: {
        enterOuterAlt(_localctx, 14);
        setState(1117);
        match(ObjectPascalParser::OVERLOAD);
        break;
      }

      case ObjectPascalParser::PASCAL: {
        enterOuterAlt(_localctx, 15);
        setState(1118);
        match(ObjectPascalParser::PASCAL);
        break;
      }

      case ObjectPascalParser::REINTRODUCE: {
        enterOuterAlt(_localctx, 16);
        setState(1119);
        match(ObjectPascalParser::REINTRODUCE);
        break;
      }

      case ObjectPascalParser::SAFECALL: {
        enterOuterAlt(_localctx, 17);
        setState(1120);
        match(ObjectPascalParser::SAFECALL);
        break;
      }

      case ObjectPascalParser::STDCALL: {
        enterOuterAlt(_localctx, 18);
        setState(1121);
        match(ObjectPascalParser::STDCALL);
        break;
      }

      case ObjectPascalParser::VARARGS: {
        enterOuterAlt(_localctx, 19);
        setState(1122);
        match(ObjectPascalParser::VARARGS);
        break;
      }

      case ObjectPascalParser::LOCAL: {
        enterOuterAlt(_localctx, 20);
        setState(1123);
        match(ObjectPascalParser::LOCAL);
        break;
      }

      case ObjectPascalParser::ABSTRACT: {
        enterOuterAlt(_localctx, 21);
        setState(1124);
        match(ObjectPascalParser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::ExternalDirectiveContext::ExternalDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::EXTERNAL() {
  return getToken(ObjectPascalParser::EXTERNAL, 0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ExternalDirectiveContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExternalDirectiveContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}


size_t ObjectPascalParser::ExternalDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExternalDirective;
}


std::any ObjectPascalParser::ExternalDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExternalDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::externalDirective() {
  ExternalDirectiveContext *_localctx = _tracker.createInstance<ExternalDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 190, ObjectPascalParser::RuleExternalDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1127);
    match(ObjectPascalParser::EXTERNAL);
    setState(1138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::StringLiteral) {
      setState(1128);
      string();
      setState(1136);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::NAME) {
        setState(1129);
        match(ObjectPascalParser::NAME);
        setState(1133);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ObjectPascalParser::Identifier) {
          setState(1130);
          match(ObjectPascalParser::Identifier);
          setState(1135);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectTypeContext ------------------------------------------------------------------

ObjectPascalParser::ObjectTypeContext::ObjectTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::ObjectTypeContext::objHeritage() {
  return getRuleContext<ObjectPascalParser::ObjHeritageContext>(0);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ObjectTypeContext::objFieldList() {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(0);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ObjectTypeContext::methodList() {
  return getRuleContext<ObjectPascalParser::MethodListContext>(0);
}


size_t ObjectPascalParser::ObjectTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjectType;
}


std::any ObjectPascalParser::ObjectTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjectType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::objectType() {
  ObjectTypeContext *_localctx = _tracker.createInstance<ObjectTypeContext>(_ctx, getState());
  enterRule(_localctx, 192, ObjectPascalParser::RuleObjectType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1140);
    match(ObjectPascalParser::OBJECT);
    setState(1142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1141);
      objHeritage();
    }
    setState(1145);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Identifier) {
      setState(1144);
      objFieldList();
    }
    setState(1148);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 16) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 16)) & ((1ULL << (ObjectPascalParser::CLASS - 16))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::FUNCTION - 16))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 16)))) != 0)) {
      setState(1147);
      methodList();
    }
    setState(1150);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ObjHeritageContext::ObjHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ObjHeritageContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ObjHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjHeritage;
}


std::any ObjectPascalParser::ObjHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::objHeritage() {
  ObjHeritageContext *_localctx = _tracker.createInstance<ObjHeritageContext>(_ctx, getState());
  enterRule(_localctx, 194, ObjectPascalParser::RuleObjHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1152);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1153);
    qualId();
    setState(1154);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodListContext ------------------------------------------------------------------

ObjectPascalParser::MethodListContext::MethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

std::vector<ObjectPascalParser::MethodHeadingContext *> ObjectPascalParser::MethodListContext::methodHeading() {
  return getRuleContexts<ObjectPascalParser::MethodHeadingContext>();
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::MethodListContext::methodHeading(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodHeadingContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::VIRTUAL() {
  return getTokens(ObjectPascalParser::VIRTUAL);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::VIRTUAL(size_t i) {
  return getToken(ObjectPascalParser::VIRTUAL, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::ABSTRACT() {
  return getTokens(ObjectPascalParser::ABSTRACT);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::ABSTRACT(size_t i) {
  return getToken(ObjectPascalParser::ABSTRACT, i);
}


size_t ObjectPascalParser::MethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodList;
}


std::any ObjectPascalParser::MethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::methodList() {
  MethodListContext *_localctx = _tracker.createInstance<MethodListContext>(_ctx, getState());
  enterRule(_localctx, 196, ObjectPascalParser::RuleMethodList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1167); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1156);
              methodHeading();
              setState(1163);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
              case 1: {
                setState(1157);
                match(ObjectPascalParser::SEMI);
                setState(1158);
                match(ObjectPascalParser::VIRTUAL);
                setState(1161);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
                case 1: {
                  setState(1159);
                  match(ObjectPascalParser::SEMI);
                  setState(1160);
                  match(ObjectPascalParser::ABSTRACT);
                  break;
                }

                default:
                  break;
                }
                break;
              }

              default:
                break;
              }
              setState(1165);
              match(ObjectPascalParser::SEMI);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1169); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeadingContext ------------------------------------------------------------------

ObjectPascalParser::MethodHeadingContext::MethodHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::MethodHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::MethodHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::MethodHeadingContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::MethodHeadingContext::constructorHeading() {
  return getRuleContext<ObjectPascalParser::ConstructorHeadingContext>(0);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::MethodHeadingContext::destructorHeading() {
  return getRuleContext<ObjectPascalParser::DestructorHeadingContext>(0);
}


size_t ObjectPascalParser::MethodHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodHeading;
}


std::any ObjectPascalParser::MethodHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::methodHeading() {
  MethodHeadingContext *_localctx = _tracker.createInstance<MethodHeadingContext>(_ctx, getState());
  enterRule(_localctx, 198, ObjectPascalParser::RuleMethodHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1180);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CLASS:
      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(1172);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::CLASS) {
          setState(1171);
          match(ObjectPascalParser::CLASS);
        }
        setState(1176);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::PROCEDURE: {
            setState(1174);
            procedureHeading();
            break;
          }

          case ObjectPascalParser::FUNCTION: {
            setState(1175);
            functionHeading();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR: {
        enterOuterAlt(_localctx, 2);
        setState(1178);
        constructorHeading();
        break;
      }

      case ObjectPascalParser::DESTRUCTOR: {
        enterOuterAlt(_localctx, 3);
        setState(1179);
        destructorHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ConstructorHeadingContext::ConstructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::CONSTRUCTOR() {
  return getToken(ObjectPascalParser::CONSTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ConstructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ConstructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstructorHeading;
}


std::any ObjectPascalParser::ConstructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::constructorHeading() {
  ConstructorHeadingContext *_localctx = _tracker.createInstance<ConstructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 200, ObjectPascalParser::RuleConstructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1182);
    match(ObjectPascalParser::CONSTRUCTOR);
    setState(1183);
    match(ObjectPascalParser::Identifier);
    setState(1185);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1184);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::DestructorHeadingContext::DestructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::DESTRUCTOR() {
  return getToken(ObjectPascalParser::DESTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::DestructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::DestructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDestructorHeading;
}


std::any ObjectPascalParser::DestructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDestructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::destructorHeading() {
  DestructorHeadingContext *_localctx = _tracker.createInstance<DestructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 202, ObjectPascalParser::RuleDestructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1187);
    match(ObjectPascalParser::DESTRUCTOR);
    setState(1188);
    match(ObjectPascalParser::Identifier);
    setState(1190);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1189);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ObjFieldListContext::ObjFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ObjFieldListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ObjFieldListContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}


size_t ObjectPascalParser::ObjFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjFieldList;
}


std::any ObjectPascalParser::ObjFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::objFieldList() {
  ObjFieldListContext *_localctx = _tracker.createInstance<ObjFieldListContext>(_ctx, getState());
  enterRule(_localctx, 204, ObjectPascalParser::RuleObjFieldList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1192);
    identList();
    setState(1193);
    match(ObjectPascalParser::COLON);
    setState(1194);
    type();
    setState(1196);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitSectionContext ------------------------------------------------------------------

ObjectPascalParser::InitSectionContext::InitSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::INITIALIZATION() {
  return getToken(ObjectPascalParser::INITIALIZATION, 0);
}

std::vector<ObjectPascalParser::StmtListContext *> ObjectPascalParser::InitSectionContext::stmtList() {
  return getRuleContexts<ObjectPascalParser::StmtListContext>();
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::InitSectionContext::stmtList(size_t i) {
  return getRuleContext<ObjectPascalParser::StmtListContext>(i);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::FINALIZATION() {
  return getToken(ObjectPascalParser::FINALIZATION, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::BEGIN() {
  return getToken(ObjectPascalParser::BEGIN, 0);
}


size_t ObjectPascalParser::InitSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInitSection;
}


std::any ObjectPascalParser::InitSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInitSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::initSection() {
  InitSectionContext *_localctx = _tracker.createInstance<InitSectionContext>(_ctx, getState());
  enterRule(_localctx, 206, ObjectPascalParser::RuleInitSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1211);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INITIALIZATION: {
        enterOuterAlt(_localctx, 1);
        setState(1198);
        match(ObjectPascalParser::INITIALIZATION);
        setState(1199);
        stmtList();
        setState(1202);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::FINALIZATION) {
          setState(1200);
          match(ObjectPascalParser::FINALIZATION);
          setState(1201);
          stmtList();
        }
        setState(1204);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::BEGIN: {
        enterOuterAlt(_localctx, 2);
        setState(1206);
        match(ObjectPascalParser::BEGIN);
        setState(1207);
        stmtList();
        setState(1208);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::END: {
        enterOuterAlt(_localctx, 3);
        setState(1210);
        match(ObjectPascalParser::END);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::ClassTypeContext::classHeritage() {
  return getRuleContext<ObjectPascalParser::ClassHeritageContext>(0);
}

std::vector<ObjectPascalParser::ClassFieldListContext *> ObjectPascalParser::ClassTypeContext::classFieldList() {
  return getRuleContexts<ObjectPascalParser::ClassFieldListContext>();
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::ClassTypeContext::classFieldList(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassFieldListContext>(i);
}

std::vector<ObjectPascalParser::ClassMethodListContext *> ObjectPascalParser::ClassTypeContext::classMethodList() {
  return getRuleContexts<ObjectPascalParser::ClassMethodListContext>();
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::ClassTypeContext::classMethodList(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(i);
}

std::vector<ObjectPascalParser::ClassPropertyListContext *> ObjectPascalParser::ClassTypeContext::classPropertyList() {
  return getRuleContexts<ObjectPascalParser::ClassPropertyListContext>();
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::ClassTypeContext::classPropertyList(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(i);
}


size_t ObjectPascalParser::ClassTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassType;
}


std::any ObjectPascalParser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 208, ObjectPascalParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1213);
    match(ObjectPascalParser::CLASS);
    setState(1215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1214);
      classHeritage();
    }
    setState(1222);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 16) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 16)) & ((1ULL << (ObjectPascalParser::CLASS - 16))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::PUBLIC - 16))
      | (1ULL << (ObjectPascalParser::PROTECTED - 16))
      | (1ULL << (ObjectPascalParser::PRIVATE - 16))
      | (1ULL << (ObjectPascalParser::PUBLISHED - 16))
      | (1ULL << (ObjectPascalParser::PROPERTY - 16))
      | (1ULL << (ObjectPascalParser::FUNCTION - 16))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 16)))) != 0) || _la == ObjectPascalParser::Identifier) {
      setState(1220);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
      case 1: {
        setState(1217);
        classFieldList();
        break;
      }

      case 2: {
        setState(1218);
        classMethodList();
        break;
      }

      case 3: {
        setState(1219);
        classPropertyList();
        break;
      }

      default:
        break;
      }
      setState(1224);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1225);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ClassHeritageContext::ClassHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ClassHeritageContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ClassHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassHeritage;
}


std::any ObjectPascalParser::ClassHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::classHeritage() {
  ClassHeritageContext *_localctx = _tracker.createInstance<ClassHeritageContext>(_ctx, getState());
  enterRule(_localctx, 210, ObjectPascalParser::RuleClassHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1227);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1228);
    identList();
    setState(1229);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVisibilityContext ------------------------------------------------------------------

ObjectPascalParser::ClassVisibilityContext::ClassVisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLIC() {
  return getToken(ObjectPascalParser::PUBLIC, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PROTECTED() {
  return getToken(ObjectPascalParser::PROTECTED, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PRIVATE() {
  return getToken(ObjectPascalParser::PRIVATE, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLISHED() {
  return getToken(ObjectPascalParser::PUBLISHED, 0);
}


size_t ObjectPascalParser::ClassVisibilityContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassVisibility;
}


std::any ObjectPascalParser::ClassVisibilityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassVisibility(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::classVisibility() {
  ClassVisibilityContext *_localctx = _tracker.createInstance<ClassVisibilityContext>(_ctx, getState());
  enterRule(_localctx, 212, ObjectPascalParser::RuleClassVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1231);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ClassFieldListContext::ClassFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassFieldListContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

std::vector<ObjectPascalParser::ObjFieldListContext *> ObjectPascalParser::ClassFieldListContext::objFieldList() {
  return getRuleContexts<ObjectPascalParser::ObjFieldListContext>();
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ClassFieldListContext::objFieldList(size_t i) {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(i);
}


size_t ObjectPascalParser::ClassFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassFieldList;
}


std::any ObjectPascalParser::ClassFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::classFieldList() {
  ClassFieldListContext *_localctx = _tracker.createInstance<ClassFieldListContext>(_ctx, getState());
  enterRule(_localctx, 214, ObjectPascalParser::RuleClassFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1234);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0)) {
      setState(1233);
      classVisibility();
    }
    setState(1237); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1236);
              objFieldList();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1239); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMethodListContext ------------------------------------------------------------------

ObjectPascalParser::ClassMethodListContext::ClassMethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassMethodListContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

std::vector<ObjectPascalParser::MethodListContext *> ObjectPascalParser::ClassMethodListContext::methodList() {
  return getRuleContexts<ObjectPascalParser::MethodListContext>();
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ClassMethodListContext::methodList(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodListContext>(i);
}


size_t ObjectPascalParser::ClassMethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassMethodList;
}


std::any ObjectPascalParser::ClassMethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::classMethodList() {
  ClassMethodListContext *_localctx = _tracker.createInstance<ClassMethodListContext>(_ctx, getState());
  enterRule(_localctx, 216, ObjectPascalParser::RuleClassMethodList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1242);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0)) {
      setState(1241);
      classVisibility();
    }
    setState(1245); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1244);
              methodList();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1247); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassPropertyListContext ------------------------------------------------------------------

ObjectPascalParser::ClassPropertyListContext::ClassPropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassPropertyListContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

std::vector<ObjectPascalParser::PropertyListContext *> ObjectPascalParser::ClassPropertyListContext::propertyList() {
  return getRuleContexts<ObjectPascalParser::PropertyListContext>();
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::ClassPropertyListContext::propertyList(size_t i) {
  return getRuleContext<ObjectPascalParser::PropertyListContext>(i);
}


size_t ObjectPascalParser::ClassPropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassPropertyList;
}


std::any ObjectPascalParser::ClassPropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::classPropertyList() {
  ClassPropertyListContext *_localctx = _tracker.createInstance<ClassPropertyListContext>(_ctx, getState());
  enterRule(_localctx, 218, ObjectPascalParser::RuleClassPropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1250);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0)) {
      setState(1249);
      classVisibility();
    }
    setState(1253); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1252);
              propertyList();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1255); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyListContext::PropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::PROPERTY() {
  return getToken(ObjectPascalParser::PROPERTY, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::PropertyListContext::propertyInterface() {
  return getRuleContext<ObjectPascalParser::PropertyInterfaceContext>(0);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::PropertyListContext::propertySpecifiers() {
  return getRuleContext<ObjectPascalParser::PropertySpecifiersContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PropertyListContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyList;
}


std::any ObjectPascalParser::PropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::propertyList() {
  PropertyListContext *_localctx = _tracker.createInstance<PropertyListContext>(_ctx, getState());
  enterRule(_localctx, 220, ObjectPascalParser::RulePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    match(ObjectPascalParser::PROPERTY);
    setState(1258);
    match(ObjectPascalParser::Identifier);
    setState(1260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET

    || _la == ObjectPascalParser::COLON) {
      setState(1259);
      propertyInterface();
    }
    setState(1263);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::INDEX)
      | (1ULL << ObjectPascalParser::READ)
      | (1ULL << ObjectPascalParser::WRITE)
      | (1ULL << ObjectPascalParser::STORED)
      | (1ULL << ObjectPascalParser::DEFAULT)
      | (1ULL << ObjectPascalParser::NODEFAULT)
      | (1ULL << ObjectPascalParser::IMPLEMENTS))) != 0)) {
      setState(1262);
      propertySpecifiers();
    }
    setState(1266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1265);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyInterfaceContext ------------------------------------------------------------------

ObjectPascalParser::PropertyInterfaceContext::PropertyInterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::PropertyInterfaceContext::propertyParameterList() {
  return getRuleContext<ObjectPascalParser::PropertyParameterListContext>(0);
}


size_t ObjectPascalParser::PropertyInterfaceContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyInterface;
}


std::any ObjectPascalParser::PropertyInterfaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyInterface(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::propertyInterface() {
  PropertyInterfaceContext *_localctx = _tracker.createInstance<PropertyInterfaceContext>(_ctx, getState());
  enterRule(_localctx, 222, ObjectPascalParser::RulePropertyInterface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(1268);
      propertyParameterList();
    }
    setState(1271);
    match(ObjectPascalParser::COLON);
    setState(1272);
    match(ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyParameterListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyParameterListContext::PropertyParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::PropertyParameterListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertyParameterListContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::PropertyParameterListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::PropertyParameterListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyParameterList;
}


std::any ObjectPascalParser::PropertyParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyParameterList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::propertyParameterList() {
  PropertyParameterListContext *_localctx = _tracker.createInstance<PropertyParameterListContext>(_ctx, getState());
  enterRule(_localctx, 224, ObjectPascalParser::RulePropertyParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    match(ObjectPascalParser::LEFT_BRACKET);

    setState(1275);
    identList();
    setState(1276);
    match(ObjectPascalParser::COLON);
    setState(1277);
    typeId();
    setState(1282);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(1279);
      match(ObjectPascalParser::SEMI);
      setState(1284);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1285);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySpecifiersContext ------------------------------------------------------------------

ObjectPascalParser::PropertySpecifiersContext::PropertySpecifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::PropertySpecifiersContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::READ() {
  return getToken(ObjectPascalParser::READ, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::WRITE() {
  return getToken(ObjectPascalParser::WRITE, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::STORED() {
  return getToken(ObjectPascalParser::STORED, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::NODEFAULT() {
  return getToken(ObjectPascalParser::NODEFAULT, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::DEFAULT() {
  return getToken(ObjectPascalParser::DEFAULT, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::IMPLEMENTS() {
  return getToken(ObjectPascalParser::IMPLEMENTS, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertySpecifiersContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::PropertySpecifiersContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertySpecifiers;
}


std::any ObjectPascalParser::PropertySpecifiersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertySpecifiers(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::propertySpecifiers() {
  PropertySpecifiersContext *_localctx = _tracker.createInstance<PropertySpecifiersContext>(_ctx, getState());
  enterRule(_localctx, 226, ObjectPascalParser::RulePropertySpecifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1305);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INDEX: {
        enterOuterAlt(_localctx, 1);
        setState(1287);
        match(ObjectPascalParser::INDEX);
        setState(1288);
        constExpr();
        break;
      }

      case ObjectPascalParser::READ: {
        enterOuterAlt(_localctx, 2);
        setState(1289);
        match(ObjectPascalParser::READ);
        setState(1290);
        match(ObjectPascalParser::Identifier);
        break;
      }

      case ObjectPascalParser::WRITE: {
        enterOuterAlt(_localctx, 3);
        setState(1291);
        match(ObjectPascalParser::WRITE);
        setState(1292);
        match(ObjectPascalParser::Identifier);
        break;
      }

      case ObjectPascalParser::STORED: {
        enterOuterAlt(_localctx, 4);
        setState(1293);
        match(ObjectPascalParser::STORED);
        setState(1296);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::Identifier: {
            setState(1294);
            match(ObjectPascalParser::Identifier);
            break;
          }

          case ObjectPascalParser::Integer:
          case ObjectPascalParser::IntegerLiteral:
          case ObjectPascalParser::Float:
          case ObjectPascalParser::StringLiteral: {
            setState(1295);
            constExpr();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::DEFAULT:
      case ObjectPascalParser::NODEFAULT: {
        enterOuterAlt(_localctx, 5);
        setState(1301);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::DEFAULT: {
            setState(1298);
            match(ObjectPascalParser::DEFAULT);
            setState(1299);
            constExpr();
            break;
          }

          case ObjectPascalParser::NODEFAULT: {
            setState(1300);
            match(ObjectPascalParser::NODEFAULT);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::IMPLEMENTS: {
        enterOuterAlt(_localctx, 6);
        setState(1303);
        match(ObjectPascalParser::IMPLEMENTS);
        setState(1304);
        typeId();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::InterfaceTypeContext::interfaceHeritage() {
  return getRuleContext<ObjectPascalParser::InterfaceHeritageContext>(0);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::InterfaceTypeContext::classMethodList() {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(0);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::InterfaceTypeContext::classPropertyList() {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(0);
}


size_t ObjectPascalParser::InterfaceTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceType;
}


std::any ObjectPascalParser::InterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 228, ObjectPascalParser::RuleInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1307);
    match(ObjectPascalParser::INTERFACE);
    setState(1309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1308);
      interfaceHeritage();
    }
    setState(1312);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
    case 1: {
      setState(1311);
      classMethodList();
      break;
    }

    default:
      break;
    }
    setState(1315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED)
      | (1ULL << ObjectPascalParser::PROPERTY))) != 0)) {
      setState(1314);
      classPropertyList();
    }
    setState(1317);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceHeritageContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceHeritageContext::InterfaceHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::InterfaceHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceHeritage;
}


std::any ObjectPascalParser::InterfaceHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::interfaceHeritage() {
  InterfaceHeritageContext *_localctx = _tracker.createInstance<InterfaceHeritageContext>(_ctx, getState());
  enterRule(_localctx, 230, ObjectPascalParser::RuleInterfaceHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1320);
    match(ObjectPascalParser::Identifier);
    setState(1321);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresClauseContext ------------------------------------------------------------------

ObjectPascalParser::RequiresClauseContext::RequiresClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::REQUIRES() {
  return getToken(ObjectPascalParser::REQUIRES, 0);
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::RequiresClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::RequiresClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::RequiresClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRequiresClause;
}


std::any ObjectPascalParser::RequiresClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRequiresClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::requiresClause() {
  RequiresClauseContext *_localctx = _tracker.createInstance<RequiresClauseContext>(_ctx, getState());
  enterRule(_localctx, 232, ObjectPascalParser::RuleRequiresClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1323);
    match(ObjectPascalParser::REQUIRES);
    setState(1325); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1324);
      identList();
      setState(1327); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
    setState(1329);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContainsClauseContext ------------------------------------------------------------------

ObjectPascalParser::ContainsClauseContext::ContainsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::CONTAINS() {
  return getToken(ObjectPascalParser::CONTAINS, 0);
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::ContainsClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ContainsClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::ContainsClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleContainsClause;
}


std::any ObjectPascalParser::ContainsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitContainsClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::containsClause() {
  ContainsClauseContext *_localctx = _tracker.createInstance<ContainsClauseContext>(_ctx, getState());
  enterRule(_localctx, 234, ObjectPascalParser::RuleContainsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1331);
    match(ObjectPascalParser::CONTAINS);
    setState(1333); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1332);
      identList();
      setState(1335); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
    setState(1337);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentListContext ------------------------------------------------------------------

ObjectPascalParser::IdentListContext::IdentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::IdentListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIdentList;
}


std::any ObjectPascalParser::IdentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIdentList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::identList() {
  IdentListContext *_localctx = _tracker.createInstance<IdentListContext>(_ctx, getState());
  enterRule(_localctx, 236, ObjectPascalParser::RuleIdentList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1339);
    match(ObjectPascalParser::Identifier);
    setState(1344);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1340);
        match(ObjectPascalParser::COMMA);
        setState(1341);
        match(ObjectPascalParser::Identifier); 
      }
      setState(1346);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdListContext ------------------------------------------------------------------

ObjectPascalParser::QualIdListContext::QualIdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::QualIdContext *> ObjectPascalParser::QualIdListContext::qualId() {
  return getRuleContexts<ObjectPascalParser::QualIdContext>();
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::QualIdListContext::qualId(size_t i) {
  return getRuleContext<ObjectPascalParser::QualIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::QualIdListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::QualIdListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualIdList;
}


std::any ObjectPascalParser::QualIdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualIdList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::qualIdList() {
  QualIdListContext *_localctx = _tracker.createInstance<QualIdListContext>(_ctx, getState());
  enterRule(_localctx, 238, ObjectPascalParser::RuleQualIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1347);
    qualId();
    setState(1350); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1348);
      match(ObjectPascalParser::COMMA);
      setState(1349);
      qualId();
      setState(1352); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdContext ------------------------------------------------------------------

ObjectPascalParser::QualIdContext::QualIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::QualIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::QualIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualId;
}


std::any ObjectPascalParser::QualIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::qualId() {
  QualIdContext *_localctx = _tracker.createInstance<QualIdContext>(_ctx, getState());
  enterRule(_localctx, 240, ObjectPascalParser::RuleQualId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1354);
    unitId();
    setState(1362);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      setState(1355);
      match(ObjectPascalParser::DOT);
      setState(1356);
      match(ObjectPascalParser::Identifier);
      setState(1358); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1357);
                match(ObjectPascalParser::CARET);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1360); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdContext ------------------------------------------------------------------

ObjectPascalParser::TypeIdContext::TypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeIdContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::TypeIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::TypeIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeId;
}


std::any ObjectPascalParser::TypeIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::typeId() {
  TypeIdContext *_localctx = _tracker.createInstance<TypeIdContext>(_ctx, getState());
  enterRule(_localctx, 242, ObjectPascalParser::RuleTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1367);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      setState(1364);
      unitId();
      setState(1365);
      match(ObjectPascalParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1369);
    match(ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedTypeContext ------------------------------------------------------------------

ObjectPascalParser::PredefinedTypeContext::PredefinedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}


size_t ObjectPascalParser::PredefinedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePredefinedType;
}


std::any ObjectPascalParser::PredefinedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PredefinedTypeContext* ObjectPascalParser::predefinedType() {
  PredefinedTypeContext *_localctx = _tracker.createInstance<PredefinedTypeContext>(_ctx, getState());
  enterRule(_localctx, 244, ObjectPascalParser::RulePredefinedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1371);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharExprContext ------------------------------------------------------------------

ObjectPascalParser::CharExprContext::CharExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::StringLiteral() {
  return getToken(ObjectPascalParser::StringLiteral, 0);
}


size_t ObjectPascalParser::CharExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCharExpr;
}


std::any ObjectPascalParser::CharExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCharExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::charExpr() {
  CharExprContext *_localctx = _tracker.createInstance<CharExprContext>(_ctx, getState());
  enterRule(_localctx, 246, ObjectPascalParser::RuleCharExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1373);
    match(ObjectPascalParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubrangeExpContext ------------------------------------------------------------------

ObjectPascalParser::SubrangeExpContext::SubrangeExpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SubrangeExpContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::SubrangeExpContext::IntegerLiteral() {
  return getToken(ObjectPascalParser::IntegerLiteral, 0);
}


size_t ObjectPascalParser::SubrangeExpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSubrangeExp;
}


std::any ObjectPascalParser::SubrangeExpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSubrangeExp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SubrangeExpContext* ObjectPascalParser::subrangeExp() {
  SubrangeExpContext *_localctx = _tracker.createInstance<SubrangeExpContext>(_ctx, getState());
  enterRule(_localctx, 248, ObjectPascalParser::RuleSubrangeExp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstExprContext ------------------------------------------------------------------

ObjectPascalParser::ConstExprContext::ConstExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::NumberContext* ObjectPascalParser::ConstExprContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ConstExprContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::ConstExprContext::charExpr() {
  return getRuleContext<ObjectPascalParser::CharExprContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstExprContext::IntegerLiteral() {
  return getTokens(ObjectPascalParser::IntegerLiteral);
}

tree::TerminalNode* ObjectPascalParser::ConstExprContext::IntegerLiteral(size_t i) {
  return getToken(ObjectPascalParser::IntegerLiteral, i);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::ConstExprContext::additiveOp() {
  return getRuleContext<ObjectPascalParser::AdditiveOpContext>(0);
}


size_t ObjectPascalParser::ConstExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstExpr;
}


std::any ObjectPascalParser::ConstExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::constExpr() {
  ConstExprContext *_localctx = _tracker.createInstance<ConstExprContext>(_ctx, getState());
  enterRule(_localctx, 250, ObjectPascalParser::RuleConstExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1384);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1377);
      number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1378);
      string();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1379);
      charExpr();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1380);
      match(ObjectPascalParser::IntegerLiteral);
      setState(1381);
      additiveOp();
      setState(1382);
      match(ObjectPascalParser::IntegerLiteral);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitIdContext ------------------------------------------------------------------

ObjectPascalParser::UnitIdContext::UnitIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::UnitIdContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::UnitIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnitId;
}


std::any ObjectPascalParser::UnitIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnitId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::unitId() {
  UnitIdContext *_localctx = _tracker.createInstance<UnitIdContext>(_ctx, getState());
  enterRule(_localctx, 252, ObjectPascalParser::RuleUnitId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1390);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1386);
      match(ObjectPascalParser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1387);
      match(ObjectPascalParser::Identifier);
      setState(1388);
      match(ObjectPascalParser::DOT);
      setState(1389);
      match(ObjectPascalParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelIdContext ------------------------------------------------------------------

ObjectPascalParser::LabelIdContext::LabelIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelIdContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::LabelIdContext::IntegerLiteral() {
  return getToken(ObjectPascalParser::IntegerLiteral, 0);
}


size_t ObjectPascalParser::LabelIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelId;
}


std::any ObjectPascalParser::LabelIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::labelId() {
  LabelIdContext *_localctx = _tracker.createInstance<LabelIdContext>(_ctx, getState());
  enterRule(_localctx, 254, ObjectPascalParser::RuleLabelId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1392);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

ObjectPascalParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringContext::StringLiteral() {
  return getToken(ObjectPascalParser::StringLiteral, 0);
}


size_t ObjectPascalParser::StringContext::getRuleIndex() const {
  return ObjectPascalParser::RuleString;
}


std::any ObjectPascalParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringContext* ObjectPascalParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 256, ObjectPascalParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1394);
    match(ObjectPascalParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

ObjectPascalParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::NumberContext::Integer() {
  return getToken(ObjectPascalParser::Integer, 0);
}

tree::TerminalNode* ObjectPascalParser::NumberContext::Float() {
  return getToken(ObjectPascalParser::Float, 0);
}


size_t ObjectPascalParser::NumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleNumber;
}


std::any ObjectPascalParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 258, ObjectPascalParser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1396);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::Integer

    || _la == ObjectPascalParser::Float)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignedIntegerContext ------------------------------------------------------------------

ObjectPascalParser::SignedIntegerContext::SignedIntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::IntegerLiteral() {
  return getToken(ObjectPascalParser::IntegerLiteral, 0);
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SignedIntegerContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSignedInteger;
}


std::any ObjectPascalParser::SignedIntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSignedInteger(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SignedIntegerContext* ObjectPascalParser::signedInteger() {
  SignedIntegerContext *_localctx = _tracker.createInstance<SignedIntegerContext>(_ctx, getState());
  enterRule(_localctx, 260, ObjectPascalParser::RuleSignedInteger);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1398);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::PLUS

    || _la == ObjectPascalParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1399);
    match(ObjectPascalParser::IntegerLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void ObjectPascalParser::initialize() {
  std::call_once(objectpascalparserParserOnceFlag, objectpascalparserParserInitialize);
}
