
// Generated from ObjectPascalParser.g4 by ANTLR 4.10.1


#include "ObjectPascalParserVisitor.h"

#include "ObjectPascalParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ObjectPascalParserStaticData final {
  ObjectPascalParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ObjectPascalParserStaticData(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData(ObjectPascalParserStaticData&&) = delete;
  ObjectPascalParserStaticData& operator=(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData& operator=(ObjectPascalParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag objectpascalparserParserOnceFlag;
ObjectPascalParserStaticData *objectpascalparserParserStaticData = nullptr;

void objectpascalparserParserInitialize() {
  assert(objectpascalparserParserStaticData == nullptr);
  auto staticData = std::make_unique<ObjectPascalParserStaticData>(
    std::vector<std::string>{
      "goal", "program", "unit", "package", "library", "programBlock", "usesClause", 
      "portabilityDirective", "interfaceSection", "interfaceDecl", "exportedHeading", 
      "implementationSection", "block", "declSection", "labelDeclSection", 
      "constSection", "constantDecl", "typeSection", "typeDecl", "typedConstant", 
      "arrayConstant", "recordConstant", "recordFieldConstant", "type", 
      "restrictedType", "classRefType", "simpleType", "realType", "ordinalType", 
      "ordIdent", "variantType", "subrangeType", "enumeratedType", "enumeratedTypeElement", 
      "stringType", "strucType", "arrayType", "recType", "fieldList", "fieldDecl", 
      "variantSection", "recVariant", "setType", "fileType", "pointerType", 
      "procedureType", "varSection", "varDecl", "expression", "simpleGrouped", 
      "simpleExpression", "term", "factor", "relOp", "addOp", "mulOp", "additiveOp", 
      "designator", "setConstructor", "setElement", "exprList", "statement", 
      "stmtList", "simpleStatement", "structStmt", "compoundStmt", "conditionalStmt", 
      "assignmentStmt", "ifStmt", "caseStmt", "caseSelector", "caseLabel", 
      "loopStmt", "repeatStmt", "whileStmt", "forStmt", "withStmt", "tryExceptStmt", 
      "exceptionBlock", "tryFinallyStmt", "raiseStmt", "procedureDeclSection", 
      "procedureDecl", "functionDecl", "functionHeading", "procedureHeading", 
      "formalParameters", "formalParm", "parameter", "directive", "externalDirective", 
      "objectType", "objHeritage", "methodList", "methodHeading", "constructorHeading", 
      "destructorHeading", "objFieldList", "initSection", "classType", "classHeritage", 
      "classVisibility", "classFieldList", "classMethodList", "classPropertyList", 
      "propertyList", "propertyInterface", "propertyParameterList", "propertySpecifiers", 
      "interfaceType", "interfaceHeritage", "requiresClause", "containsClause", 
      "identList", "qualIdList", "qualId", "typeId", "predefinedType", "charExpr", 
      "constExpr", "unitId", "labelId", "string", "number", "radixNumber", 
      "hexNumber", "octalNumber", "integer", "signedInteger"
    },
    std::vector<std::string>{
      "", "'program'", "'package'", "'end'", "'requires'", "'contains'", 
      "'library'", "'unit'", "'interface'", "'implementation'", "'intitialization'", 
      "'uses'", "'in'", "'label'", "'const'", "'type'", "'class'", "'of'", 
      "'real'", "'single'", "'double'", "'extended'", "'currency'", "'comp'", 
      "'shortint'", "'smallint'", "'integer'", "'byte'", "'longint'", "'word'", 
      "'boolean'", "'char'", "'widechar'", "'longchar'", "'pchar'", "'variant'", 
      "'olevariant'", "'string'", "'ansistring'", "'widestring'", "'packed'", 
      "'array'", "'Array'", "'record'", "'case'", "'set'", "'file'", "'object'", 
      "'virtual'", "'constructor'", "'destructor'", "'finalization'", "'public'", 
      "'protected'", "'Protected'", "'private'", "'published'", "'property'", 
      "'Property'", "'index'", "'read'", "'write'", "'stored'", "'default'", 
      "'nodefault'", "'implements'", "'var'", "'Var'", "'absolute'", "'absctuct'", 
      "'function'", "'Function'", "'procedure'", "'Procedure'", "'out'", 
      "'inherited'", "'goto'", "'begin'", "'Begin'", "'then'", "'else'", 
      "'if'", "'If'", "'repeat'", "'until'", "'while'", "'to'", "'downto'", 
      "'for'", "'For'", "'do'", "'Do'", "'DO'", "'with'", "'try'", "'finally'", 
      "'except'", "'Except'", "'on'", "'raise'", "'at'", "'is'", "'or'", 
      "'xor'", "'div'", "'mod'", "'and'", "'shl'", "'shr'", "'DIV'", "'AND'", 
      "'nil'", "'not'", "'Not'", "'NOT'", "'true'", "'True'", "'false'", 
      "'False'", "'UID'", "'NAME'", "'as'", "'As'", "'cdecl'", "'register'", 
      "'dynamic'", "'export'", "'external'", "'far'", "'forward'", "'message'", 
      "'override'", "'Override'", "'overload'", "'pascal'", "'reintroduce'", 
      "'safecall'", "'stdcall'", "'varargs'", "'local'", "'real48'", "';'", 
      "'.'", "'('", "')'", "'['", "']'", "','", "'='", "':'", "'..'", "'^'", 
      "':='", "'>'", "'<'", "'>='", "'<='", "'<>'", "'+'", "'-'", "'*'", 
      "'/'", "'@'", "'#'", "'</'", "'near'", "'inline'", "'assembler'", 
      "'platform'", "'deprecated'", "'cardinal'", "'int64'", "'longword'", 
      "'unicodestring'", "'\"'", "'E'"
    },
    std::vector<std::string>{
      "", "PROGRAM", "PACKAGE", "END", "REQUIRES", "CONTAINS", "LIBRARY", 
      "UNIT", "INTERFACE", "IMPLEMENTATION", "INITIALIZATION", "USES", "IN", 
      "LABEL", "CONST", "TYPE_", "CLASS", "OF", "REAL", "SINGLE", "DOUBLE", 
      "EXTENDED", "CURRENCY", "COMP", "SHORTINT", "SMALLINT", "INTEGER", 
      "BYTE", "LONGINT", "WORD", "BOOLEAN", "CHAR", "WIDECHAR", "LONGCHAR", 
      "PCHAR", "VARIANT", "OLEVARIANT", "STRING", "ANSISTRING", "WIDESTRING", 
      "PACKED", "ARRAY_1", "ARRAY_2", "RECORD", "CASE", "SET", "FILE", "OBJECT", 
      "VIRTUAL", "CONSTRUCTOR", "DESTRUCTOR", "FINALIZATION", "PUBLIC", 
      "PROTECTED_1", "PROTECTED_2", "PRIVATE", "PUBLISHED", "PROPERTY_1", 
      "PROPERTY_2", "INDEX", "READ", "WRITE", "STORED", "DEFAULT", "NODEFAULT", 
      "IMPLEMENTS", "VAR_1", "VAR_2", "ABSOLUTE", "ABSTRACT", "FUNCTION_1", 
      "FUNCTION_2", "PROCEDURE_1", "PROCEDURE_2", "OUT", "INHERITED", "GOTO", 
      "BEGIN_1", "BEGIN_2", "THEN", "ELSE", "IF_1", "IF_2", "REPEAT", "UNTIL", 
      "WHILE", "TO", "DOWNTO", "FOR_1", "FOR_2", "DO_1", "DO_2", "DO_3", 
      "WITH", "TRY", "FINALLY", "EXCEPT_1", "EXCEPT_2", "ON", "RAISE", "AT", 
      "IS", "OR", "XOR", "DIV_LITTLE", "MOD", "AND_LITTLE", "SHL", "SHR", 
      "DIV_BIG", "AND_BIG", "NIL", "NOT_1", "NOT_2", "NOT_3", "TRUE_1", 
      "TRUE_2", "FALSE_1", "FALSE_2", "UID", "NAME", "AS_1", "AS_2", "CDECL", 
      "REGISTER", "DYNAMIC", "EXPORT", "EXTERNAL", "FAR", "FORWARD", "MESSAGE", 
      "OVERRIDE_1", "OVERRIDE_2", "OVERLOAD", "PASCAL", "REINTRODUCE", "SAFECALL", 
      "STDCALL", "VARARGS", "LOCAL", "REAL48", "SEMI", "DOT", "LEFT_PAREN", 
      "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "ASSIGN", 
      "COLON", "DOT_DOT", "CARET", "COLON_ASSIGN", "GRATER", "LESS", "GRATER_EQUAL", 
      "LESS_EQUAL", "NOT_EQUAL", "PLUS", "MINUS", "STAR", "DIV_", "DOG", 
      "SHARP", "LESS_DIV", "NEAR", "INLINE", "ASSEMBLER", "PLATFORM", "DEPRECATED", 
      "CARDINAL", "INT64", "LONGWORD", "UNICODESTRING", "QUOTE", "E", "Ident", 
      "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", 
      "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", 
      "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment", "IntegerLiteral", "CharacterLiteral", 
      "FloatingLiteral", "StringLiteral", "BooleanLiteral", "UserDefinedLiteral", 
      "MultiLineMacro", "ARRAY", "VAR", "NOT", "DIV", "AND", "AS", "IF", 
      "DO", "FOR", "EXCEPT", "FUNCTION", "PROCEDURE", "OVERRIDE", "BEGIN", 
      "PROTECTED", "UPPERCASE", "LOWERCASE", "HEXADECIMALDIGIT", "OCTALDIGIT", 
      "DIGIT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,216,1394,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,1,0,1,0,1,0,1,0,3,0,263,8,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,271,8,1,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,280,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
  	3,1,3,1,3,3,3,292,8,3,1,3,3,3,295,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,5,3,5,307,8,5,1,5,5,5,310,8,5,10,5,12,5,313,9,5,1,5,1,5,1,6,1,6,
  	1,6,1,6,1,7,1,7,1,8,1,8,3,8,325,8,8,1,8,5,8,328,8,8,10,8,12,8,331,9,8,
  	1,9,1,9,1,9,1,9,3,9,337,8,9,1,10,1,10,1,10,3,10,342,8,10,1,10,1,10,1,
  	10,3,10,347,8,10,3,10,349,8,10,1,11,1,11,3,11,353,8,11,1,11,5,11,356,
  	8,11,10,11,12,11,359,9,11,1,12,3,12,362,8,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,3,13,371,8,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,380,8,
  	15,10,15,12,15,383,9,15,1,16,1,16,1,16,1,16,3,16,389,8,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,3,16,397,8,16,3,16,399,8,16,1,17,1,17,1,17,1,17,4,17,
  	405,8,17,11,17,12,17,406,1,18,1,18,1,18,3,18,412,8,18,1,18,1,18,3,18,
  	416,8,18,1,18,1,18,1,18,3,18,421,8,18,1,18,1,18,3,18,425,8,18,3,18,427,
  	8,18,1,19,1,19,1,19,3,19,432,8,19,1,20,1,20,1,20,1,20,5,20,438,8,20,10,
  	20,12,20,441,9,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,449,8,21,10,21,12,
  	21,452,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,3,23,468,8,23,1,24,1,24,1,24,3,24,473,8,24,1,25,1,25,1,25,
  	1,25,1,26,1,26,3,26,481,8,26,1,27,1,27,1,28,1,28,1,28,3,28,488,8,28,1,
  	29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,502,8,
  	32,10,32,12,32,505,9,32,1,32,1,32,1,33,1,33,1,33,3,33,512,8,33,1,34,1,
  	34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,523,8,34,1,35,3,35,526,8,35,
  	1,35,1,35,1,35,1,35,1,35,3,35,533,8,35,3,35,535,8,35,1,36,1,36,1,36,1,
  	36,1,36,5,36,542,8,36,10,36,12,36,545,9,36,1,36,1,36,3,36,549,8,36,1,
  	36,1,36,1,36,3,36,554,8,36,1,37,1,37,3,37,558,8,37,1,37,1,37,3,37,562,
  	8,37,1,38,1,38,1,38,4,38,567,8,38,11,38,12,38,568,1,38,3,38,572,8,38,
  	1,38,3,38,575,8,38,1,39,1,39,1,39,1,39,3,39,581,8,39,1,40,1,40,1,40,3,
  	40,586,8,40,1,40,1,40,1,40,1,40,1,40,5,40,593,8,40,10,40,12,40,596,9,
  	40,1,41,1,41,1,41,5,41,601,8,41,10,41,12,41,604,9,41,1,41,1,41,1,41,3,
  	41,609,8,41,1,41,1,41,1,42,1,42,1,42,1,42,3,42,617,8,42,1,43,1,43,1,43,
  	1,43,3,43,623,8,43,1,44,1,44,1,44,3,44,628,8,44,1,45,1,45,3,45,632,8,
  	45,1,45,1,45,3,45,636,8,45,1,46,1,46,1,46,1,46,5,46,642,8,46,10,46,12,
  	46,645,9,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,653,8,47,1,47,1,47,3,47,
  	657,8,47,1,47,3,47,660,8,47,1,48,1,48,1,48,1,48,5,48,666,8,48,10,48,12,
  	48,669,9,48,1,49,1,49,1,49,1,49,1,49,3,49,676,8,49,1,50,3,50,679,8,50,
  	1,50,1,50,1,50,1,50,5,50,685,8,50,10,50,12,50,688,9,50,1,51,1,51,1,51,
  	1,51,5,51,694,8,51,10,51,12,51,697,9,51,1,52,1,52,1,52,1,52,1,52,3,52,
  	704,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,52,1,52,1,52,3,52,723,8,52,1,53,1,53,1,54,1,54,1,55,1,55,
  	1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,741,8,57,10,57,
  	12,57,744,9,57,1,58,1,58,1,58,1,58,5,58,750,8,58,10,58,12,58,753,9,58,
  	1,58,1,58,1,59,1,59,1,59,3,59,760,8,59,1,60,1,60,1,60,5,60,765,8,60,10,
  	60,12,60,768,9,60,1,61,1,61,1,61,3,61,773,8,61,1,61,1,61,3,61,777,8,61,
  	1,62,1,62,1,62,5,62,782,8,62,10,62,12,62,785,9,62,1,63,1,63,1,63,1,63,
  	3,63,791,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,800,8,64,1,65,1,
  	65,1,65,3,65,805,8,65,1,65,1,65,1,66,1,66,3,66,811,8,66,1,67,1,67,1,67,
  	1,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,823,8,68,1,69,1,69,1,69,1,69,
  	1,69,1,69,5,69,831,8,69,10,69,12,69,834,9,69,1,69,1,69,3,69,838,8,69,
  	1,69,3,69,841,8,69,1,69,1,69,1,70,1,70,1,70,5,70,848,8,70,10,70,12,70,
  	851,9,70,1,70,1,70,1,70,1,71,1,71,1,71,3,71,859,8,71,1,72,1,72,1,72,3,
  	72,864,8,72,1,73,1,73,1,73,3,73,869,8,73,1,73,1,73,1,73,1,74,1,74,1,74,
  	1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,
  	1,76,1,76,1,77,1,77,1,77,1,77,5,77,897,8,77,10,77,12,77,900,9,77,1,77,
  	1,77,1,77,1,77,1,78,1,78,1,78,3,78,909,8,78,1,78,1,78,1,78,1,78,1,78,
  	1,78,1,78,3,78,918,8,78,1,78,1,78,1,78,1,78,5,78,924,8,78,10,78,12,78,
  	927,9,78,1,78,1,78,5,78,931,8,78,10,78,12,78,934,9,78,1,78,3,78,937,8,
  	78,1,79,1,79,1,79,1,79,1,79,3,79,944,8,79,1,79,1,79,1,80,1,80,3,80,950,
  	8,80,1,80,1,80,3,80,954,8,80,1,81,1,81,3,81,958,8,81,1,82,1,82,1,82,3,
  	82,963,8,82,1,82,3,82,966,8,82,1,82,1,82,1,82,1,83,1,83,1,83,3,83,974,
  	8,83,1,83,3,83,977,8,83,1,83,1,83,1,83,1,84,1,84,1,84,3,84,985,8,84,1,
  	84,1,84,1,84,3,84,990,8,84,1,85,1,85,1,85,3,85,995,8,85,1,86,1,86,1,86,
  	1,86,5,86,1001,8,86,10,86,12,86,1004,9,86,1,86,1,86,1,87,3,87,1009,8,
  	87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,1017,8,88,1,88,1,88,1,88,3,88,1022,
  	8,88,3,88,1024,8,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1032,8,88,1,89,
  	1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
  	1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1056,8,89,1,90,1,90,1,90,1,90,
  	5,90,1062,8,90,10,90,12,90,1065,9,90,3,90,1067,8,90,3,90,1069,8,90,1,
  	91,1,91,3,91,1073,8,91,1,91,3,91,1076,8,91,1,91,3,91,1079,8,91,1,91,1,
  	91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1092,8,93,3,93,1094,
  	8,93,1,93,1,93,5,93,1098,8,93,10,93,12,93,1101,9,93,1,94,3,94,1104,8,
  	94,1,94,1,94,3,94,1108,8,94,1,94,1,94,3,94,1112,8,94,1,95,1,95,1,95,3,
  	95,1117,8,95,1,96,1,96,1,96,3,96,1122,8,96,1,97,1,97,1,97,1,97,1,97,1,
  	97,1,98,1,98,1,98,1,98,3,98,1134,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
  	98,3,98,1143,8,98,1,99,1,99,3,99,1147,8,99,1,99,3,99,1150,8,99,1,99,3,
  	99,1153,8,99,1,99,3,99,1156,8,99,1,99,3,99,1159,8,99,1,99,1,99,1,100,
  	1,100,1,100,1,100,1,101,3,101,1168,8,101,1,102,1,102,1,102,1,102,5,102,
  	1174,8,102,10,102,12,102,1177,9,102,1,103,1,103,1,103,1,103,5,103,1183,
  	8,103,10,103,12,103,1186,9,103,1,104,1,104,1,104,1,104,5,104,1192,8,104,
  	10,104,12,104,1195,9,104,1,105,1,105,1,105,3,105,1200,8,105,1,105,3,105,
  	1203,8,105,1,105,3,105,1206,8,105,1,106,3,106,1209,8,106,1,106,1,106,
  	1,106,1,107,1,107,1,107,1,107,1,107,1,107,5,107,1220,8,107,10,107,12,
  	107,1223,9,107,1,107,1,107,1,108,1,108,3,108,1229,8,108,1,108,1,108,3,
  	108,1233,8,108,1,108,1,108,3,108,1237,8,108,1,108,1,108,1,108,3,108,1242,
  	8,108,3,108,1244,8,108,1,108,1,108,1,108,3,108,1249,8,108,1,108,1,108,
  	3,108,1253,8,108,1,109,1,109,3,109,1257,8,109,1,109,3,109,1260,8,109,
  	1,109,3,109,1263,8,109,1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,
  	4,111,1273,8,111,11,111,12,111,1274,1,111,1,111,1,112,1,112,4,112,1281,
  	8,112,11,112,12,112,1282,1,112,1,112,1,113,1,113,1,113,4,113,1290,8,113,
  	11,113,12,113,1291,1,114,1,114,1,114,4,114,1297,8,114,11,114,12,114,1298,
  	1,115,1,115,1,115,3,115,1304,8,115,1,115,1,115,1,115,4,115,1309,8,115,
  	11,115,12,115,1310,3,115,1313,8,115,1,116,1,116,1,116,3,116,1318,8,116,
  	1,116,1,116,1,117,1,117,1,118,1,118,1,118,1,118,1,118,3,118,1329,8,118,
  	3,118,1331,8,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,1340,
  	8,119,1,120,1,120,1,120,1,120,3,120,1346,8,120,1,121,1,121,3,121,1350,
  	8,121,1,122,1,122,1,123,1,123,1,123,1,123,1,123,3,123,1359,8,123,3,123,
  	1361,8,123,1,123,3,123,1364,8,123,1,124,1,124,3,124,1368,8,124,1,125,
  	5,125,1371,8,125,10,125,12,125,1374,9,125,1,126,5,126,1377,8,126,10,126,
  	12,126,1380,9,126,1,127,5,127,1383,8,127,10,127,12,127,1386,9,127,1,127,
  	3,127,1389,8,127,1,128,1,128,1,128,1,128,0,0,129,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
  	144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
  	180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
  	216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
  	252,254,256,0,14,2,0,6,6,168,169,2,0,18,23,140,140,3,0,24,32,34,34,170,
  	172,1,0,35,36,1,0,158,159,4,0,12,12,101,101,153,157,202,202,2,0,102,103,
  	158,159,4,0,105,105,107,108,160,161,200,201,1,0,158,160,1,0,86,87,3,0,
  	14,14,74,74,198,198,3,0,52,52,55,56,211,211,3,0,18,18,26,27,30,31,1,0,
  	212,213,1500,0,262,1,0,0,0,2,264,1,0,0,0,4,276,1,0,0,0,6,287,1,0,0,0,
  	8,299,1,0,0,0,10,306,1,0,0,0,12,316,1,0,0,0,14,320,1,0,0,0,16,322,1,0,
  	0,0,18,336,1,0,0,0,20,348,1,0,0,0,22,350,1,0,0,0,24,361,1,0,0,0,26,370,
  	1,0,0,0,28,372,1,0,0,0,30,375,1,0,0,0,32,398,1,0,0,0,34,400,1,0,0,0,36,
  	426,1,0,0,0,38,431,1,0,0,0,40,433,1,0,0,0,42,444,1,0,0,0,44,455,1,0,0,
  	0,46,467,1,0,0,0,48,472,1,0,0,0,50,474,1,0,0,0,52,480,1,0,0,0,54,482,
  	1,0,0,0,56,487,1,0,0,0,58,489,1,0,0,0,60,491,1,0,0,0,62,493,1,0,0,0,64,
  	497,1,0,0,0,66,508,1,0,0,0,68,522,1,0,0,0,70,525,1,0,0,0,72,536,1,0,0,
  	0,74,555,1,0,0,0,76,566,1,0,0,0,78,576,1,0,0,0,80,582,1,0,0,0,82,597,
  	1,0,0,0,84,612,1,0,0,0,86,618,1,0,0,0,88,624,1,0,0,0,90,631,1,0,0,0,92,
  	637,1,0,0,0,94,646,1,0,0,0,96,661,1,0,0,0,98,675,1,0,0,0,100,678,1,0,
  	0,0,102,689,1,0,0,0,104,722,1,0,0,0,106,724,1,0,0,0,108,726,1,0,0,0,110,
  	728,1,0,0,0,112,730,1,0,0,0,114,732,1,0,0,0,116,745,1,0,0,0,118,756,1,
  	0,0,0,120,761,1,0,0,0,122,772,1,0,0,0,124,778,1,0,0,0,126,790,1,0,0,0,
  	128,799,1,0,0,0,130,801,1,0,0,0,132,810,1,0,0,0,134,812,1,0,0,0,136,816,
  	1,0,0,0,138,824,1,0,0,0,140,844,1,0,0,0,142,855,1,0,0,0,144,863,1,0,0,
  	0,146,865,1,0,0,0,148,873,1,0,0,0,150,878,1,0,0,0,152,887,1,0,0,0,154,
  	892,1,0,0,0,156,905,1,0,0,0,158,938,1,0,0,0,160,947,1,0,0,0,162,957,1,
  	0,0,0,164,959,1,0,0,0,166,970,1,0,0,0,168,981,1,0,0,0,170,991,1,0,0,0,
  	172,996,1,0,0,0,174,1008,1,0,0,0,176,1031,1,0,0,0,178,1055,1,0,0,0,180,
  	1057,1,0,0,0,182,1070,1,0,0,0,184,1082,1,0,0,0,186,1099,1,0,0,0,188,1111,
  	1,0,0,0,190,1113,1,0,0,0,192,1118,1,0,0,0,194,1123,1,0,0,0,196,1142,1,
  	0,0,0,198,1144,1,0,0,0,200,1162,1,0,0,0,202,1167,1,0,0,0,204,1175,1,0,
  	0,0,206,1184,1,0,0,0,208,1193,1,0,0,0,210,1196,1,0,0,0,212,1208,1,0,0,
  	0,214,1213,1,0,0,0,216,1228,1,0,0,0,218,1254,1,0,0,0,220,1266,1,0,0,0,
  	222,1270,1,0,0,0,224,1278,1,0,0,0,226,1286,1,0,0,0,228,1293,1,0,0,0,230,
  	1303,1,0,0,0,232,1317,1,0,0,0,234,1321,1,0,0,0,236,1330,1,0,0,0,238,1339,
  	1,0,0,0,240,1345,1,0,0,0,242,1349,1,0,0,0,244,1351,1,0,0,0,246,1363,1,
  	0,0,0,248,1367,1,0,0,0,250,1372,1,0,0,0,252,1378,1,0,0,0,254,1388,1,0,
  	0,0,256,1390,1,0,0,0,258,263,3,2,1,0,259,263,3,6,3,0,260,263,3,8,4,0,
  	261,263,3,4,2,0,262,258,1,0,0,0,262,259,1,0,0,0,262,260,1,0,0,0,262,261,
  	1,0,0,0,263,1,1,0,0,0,264,265,5,1,0,0,265,270,5,176,0,0,266,267,5,143,
  	0,0,267,268,3,226,113,0,268,269,5,144,0,0,269,271,1,0,0,0,270,266,1,0,
  	0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,141,0,0,273,274,3,10,5,
  	0,274,275,5,142,0,0,275,3,1,0,0,0,276,277,5,7,0,0,277,279,3,230,115,0,
  	278,280,3,14,7,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,
  	282,5,141,0,0,282,283,3,16,8,0,283,284,3,22,11,0,284,285,3,196,98,0,285,
  	286,5,142,0,0,286,5,1,0,0,0,287,288,5,2,0,0,288,289,5,176,0,0,289,291,
  	5,141,0,0,290,292,3,222,111,0,291,290,1,0,0,0,291,292,1,0,0,0,292,294,
  	1,0,0,0,293,295,3,224,112,0,294,293,1,0,0,0,294,295,1,0,0,0,295,296,1,
  	0,0,0,296,297,5,3,0,0,297,298,5,142,0,0,298,7,1,0,0,0,299,300,5,6,0,0,
  	300,301,5,176,0,0,301,302,5,141,0,0,302,303,3,10,5,0,303,304,5,142,0,
  	0,304,9,1,0,0,0,305,307,3,12,6,0,306,305,1,0,0,0,306,307,1,0,0,0,307,
  	311,1,0,0,0,308,310,3,26,13,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,
  	1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,3,130,
  	65,0,315,11,1,0,0,0,316,317,5,11,0,0,317,318,3,228,114,0,318,319,5,141,
  	0,0,319,13,1,0,0,0,320,321,7,0,0,0,321,15,1,0,0,0,322,324,5,8,0,0,323,
  	325,3,12,6,0,324,323,1,0,0,0,324,325,1,0,0,0,325,329,1,0,0,0,326,328,
  	3,18,9,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,330,1,0,
  	0,0,330,17,1,0,0,0,331,329,1,0,0,0,332,337,3,30,15,0,333,337,3,34,17,
  	0,334,337,3,92,46,0,335,337,3,20,10,0,336,332,1,0,0,0,336,333,1,0,0,0,
  	336,334,1,0,0,0,336,335,1,0,0,0,337,19,1,0,0,0,338,339,3,170,85,0,339,
  	341,5,141,0,0,340,342,3,178,89,0,341,340,1,0,0,0,341,342,1,0,0,0,342,
  	349,1,0,0,0,343,344,3,168,84,0,344,346,5,141,0,0,345,347,3,178,89,0,346,
  	345,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,338,1,0,0,0,348,343,1,
  	0,0,0,349,21,1,0,0,0,350,352,5,9,0,0,351,353,3,12,6,0,352,351,1,0,0,0,
  	352,353,1,0,0,0,353,357,1,0,0,0,354,356,3,26,13,0,355,354,1,0,0,0,356,
  	359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,23,1,0,0,0,359,357,1,
  	0,0,0,360,362,3,26,13,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,
  	0,363,364,3,130,65,0,364,25,1,0,0,0,365,371,3,28,14,0,366,371,3,30,15,
  	0,367,371,3,34,17,0,368,371,3,92,46,0,369,371,3,162,81,0,370,365,1,0,
  	0,0,370,366,1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,370,369,1,0,0,0,371,
  	27,1,0,0,0,372,373,5,13,0,0,373,374,3,242,121,0,374,29,1,0,0,0,375,381,
  	5,14,0,0,376,377,3,32,16,0,377,378,5,141,0,0,378,380,1,0,0,0,379,376,
  	1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,31,1,0,0,
  	0,383,381,1,0,0,0,384,385,5,176,0,0,385,386,5,148,0,0,386,388,3,238,119,
  	0,387,389,3,14,7,0,388,387,1,0,0,0,388,389,1,0,0,0,389,399,1,0,0,0,390,
  	391,5,176,0,0,391,392,5,149,0,0,392,393,3,232,116,0,393,394,5,148,0,0,
  	394,396,3,38,19,0,395,397,3,14,7,0,396,395,1,0,0,0,396,397,1,0,0,0,397,
  	399,1,0,0,0,398,384,1,0,0,0,398,390,1,0,0,0,399,33,1,0,0,0,400,404,5,
  	15,0,0,401,402,3,36,18,0,402,403,5,141,0,0,403,405,1,0,0,0,404,401,1,
  	0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,35,1,0,0,0,
  	408,409,5,176,0,0,409,411,5,148,0,0,410,412,5,15,0,0,411,410,1,0,0,0,
  	411,412,1,0,0,0,412,413,1,0,0,0,413,415,3,46,23,0,414,416,3,14,7,0,415,
  	414,1,0,0,0,415,416,1,0,0,0,416,427,1,0,0,0,417,418,5,176,0,0,418,420,
  	5,148,0,0,419,421,5,15,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,
  	0,0,0,422,424,3,48,24,0,423,425,3,14,7,0,424,423,1,0,0,0,424,425,1,0,
  	0,0,425,427,1,0,0,0,426,408,1,0,0,0,426,417,1,0,0,0,427,37,1,0,0,0,428,
  	432,3,238,119,0,429,432,3,40,20,0,430,432,3,42,21,0,431,428,1,0,0,0,431,
  	429,1,0,0,0,431,430,1,0,0,0,432,39,1,0,0,0,433,434,5,143,0,0,434,439,
  	3,38,19,0,435,436,5,147,0,0,436,438,3,38,19,0,437,435,1,0,0,0,438,441,
  	1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,
  	0,442,443,5,144,0,0,443,41,1,0,0,0,444,450,5,143,0,0,445,446,3,44,22,
  	0,446,447,5,141,0,0,447,449,1,0,0,0,448,445,1,0,0,0,449,452,1,0,0,0,450,
  	448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,454,5,
  	144,0,0,454,43,1,0,0,0,455,456,5,176,0,0,456,457,5,149,0,0,457,458,3,
  	38,19,0,458,45,1,0,0,0,459,468,3,232,116,0,460,468,3,52,26,0,461,468,
  	3,70,35,0,462,468,3,88,44,0,463,468,3,68,34,0,464,468,3,90,45,0,465,468,
  	3,60,30,0,466,468,3,50,25,0,467,459,1,0,0,0,467,460,1,0,0,0,467,461,1,
  	0,0,0,467,462,1,0,0,0,467,463,1,0,0,0,467,464,1,0,0,0,467,465,1,0,0,0,
  	467,466,1,0,0,0,468,47,1,0,0,0,469,473,3,182,91,0,470,473,3,198,99,0,
  	471,473,3,218,109,0,472,469,1,0,0,0,472,470,1,0,0,0,472,471,1,0,0,0,473,
  	49,1,0,0,0,474,475,5,16,0,0,475,476,5,17,0,0,476,477,3,232,116,0,477,
  	51,1,0,0,0,478,481,3,56,28,0,479,481,3,54,27,0,480,478,1,0,0,0,480,479,
  	1,0,0,0,481,53,1,0,0,0,482,483,7,1,0,0,483,55,1,0,0,0,484,488,3,62,31,
  	0,485,488,3,64,32,0,486,488,3,58,29,0,487,484,1,0,0,0,487,485,1,0,0,0,
  	487,486,1,0,0,0,488,57,1,0,0,0,489,490,7,2,0,0,490,59,1,0,0,0,491,492,
  	7,3,0,0,492,61,1,0,0,0,493,494,3,238,119,0,494,495,5,150,0,0,495,496,
  	3,238,119,0,496,63,1,0,0,0,497,498,5,143,0,0,498,503,3,66,33,0,499,500,
  	5,147,0,0,500,502,3,66,33,0,501,499,1,0,0,0,502,505,1,0,0,0,503,501,1,
  	0,0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,503,1,0,0,0,506,507,5,144,0,
  	0,507,65,1,0,0,0,508,511,5,176,0,0,509,510,5,148,0,0,510,512,3,238,119,
  	0,511,509,1,0,0,0,511,512,1,0,0,0,512,67,1,0,0,0,513,523,5,37,0,0,514,
  	523,5,38,0,0,515,523,5,39,0,0,516,523,5,173,0,0,517,518,5,37,0,0,518,
  	519,5,145,0,0,519,520,3,238,119,0,520,521,5,146,0,0,521,523,1,0,0,0,522,
  	513,1,0,0,0,522,514,1,0,0,0,522,515,1,0,0,0,522,516,1,0,0,0,522,517,1,
  	0,0,0,523,69,1,0,0,0,524,526,5,40,0,0,525,524,1,0,0,0,525,526,1,0,0,0,
  	526,534,1,0,0,0,527,535,3,72,36,0,528,535,3,84,42,0,529,535,3,86,43,0,
  	530,532,3,74,37,0,531,533,5,40,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,
  	535,1,0,0,0,534,527,1,0,0,0,534,528,1,0,0,0,534,529,1,0,0,0,534,530,1,
  	0,0,0,535,71,1,0,0,0,536,548,5,197,0,0,537,538,5,145,0,0,538,543,3,56,
  	28,0,539,540,5,147,0,0,540,542,3,56,28,0,541,539,1,0,0,0,542,545,1,0,
  	0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,
  	547,5,146,0,0,547,549,1,0,0,0,548,537,1,0,0,0,548,549,1,0,0,0,549,550,
  	1,0,0,0,550,551,5,17,0,0,551,553,3,46,23,0,552,554,3,14,7,0,553,552,1,
  	0,0,0,553,554,1,0,0,0,554,73,1,0,0,0,555,557,5,43,0,0,556,558,3,76,38,
  	0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,561,5,3,0,0,560,
  	562,3,14,7,0,561,560,1,0,0,0,561,562,1,0,0,0,562,75,1,0,0,0,563,564,3,
  	78,39,0,564,565,5,141,0,0,565,567,1,0,0,0,566,563,1,0,0,0,567,568,1,0,
  	0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,570,572,3,80,40,0,
  	571,570,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,575,5,141,0,0,574,
  	573,1,0,0,0,574,575,1,0,0,0,575,77,1,0,0,0,576,577,3,226,113,0,577,578,
  	5,149,0,0,578,580,3,46,23,0,579,581,3,14,7,0,580,579,1,0,0,0,580,581,
  	1,0,0,0,581,79,1,0,0,0,582,585,5,44,0,0,583,584,5,176,0,0,584,586,5,149,
  	0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,3,232,116,
  	0,588,589,5,17,0,0,589,594,3,82,41,0,590,591,5,141,0,0,591,593,3,82,41,
  	0,592,590,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,
  	81,1,0,0,0,596,594,1,0,0,0,597,602,3,238,119,0,598,599,5,147,0,0,599,
  	601,3,238,119,0,600,598,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,
  	1,0,0,0,603,605,1,0,0,0,604,602,1,0,0,0,605,606,5,149,0,0,606,608,5,143,
  	0,0,607,609,3,76,38,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,
  	610,611,5,144,0,0,611,83,1,0,0,0,612,613,5,45,0,0,613,614,5,17,0,0,614,
  	616,3,56,28,0,615,617,3,14,7,0,616,615,1,0,0,0,616,617,1,0,0,0,617,85,
  	1,0,0,0,618,619,5,46,0,0,619,620,5,17,0,0,620,622,3,232,116,0,621,623,
  	3,14,7,0,622,621,1,0,0,0,622,623,1,0,0,0,623,87,1,0,0,0,624,625,5,151,
  	0,0,625,627,3,232,116,0,626,628,3,14,7,0,627,626,1,0,0,0,627,628,1,0,
  	0,0,628,89,1,0,0,0,629,632,3,170,85,0,630,632,3,168,84,0,631,629,1,0,
  	0,0,631,630,1,0,0,0,632,635,1,0,0,0,633,634,5,17,0,0,634,636,5,47,0,0,
  	635,633,1,0,0,0,635,636,1,0,0,0,636,91,1,0,0,0,637,638,5,198,0,0,638,
  	643,3,94,47,0,639,640,5,141,0,0,640,642,3,94,47,0,641,639,1,0,0,0,642,
  	645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,93,1,0,0,0,645,643,1,
  	0,0,0,646,647,3,226,113,0,647,648,5,149,0,0,648,656,3,46,23,0,649,652,
  	5,68,0,0,650,653,5,176,0,0,651,653,3,238,119,0,652,650,1,0,0,0,652,651,
  	1,0,0,0,653,657,1,0,0,0,654,655,5,148,0,0,655,657,3,238,119,0,656,649,
  	1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,660,3,14,
  	7,0,659,658,1,0,0,0,659,660,1,0,0,0,660,95,1,0,0,0,661,667,3,98,49,0,
  	662,663,3,106,53,0,663,664,3,98,49,0,664,666,1,0,0,0,665,662,1,0,0,0,
  	666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,97,1,0,0,0,669,667,
  	1,0,0,0,670,676,3,100,50,0,671,672,5,143,0,0,672,673,3,100,50,0,673,674,
  	5,144,0,0,674,676,1,0,0,0,675,670,1,0,0,0,675,671,1,0,0,0,676,99,1,0,
  	0,0,677,679,7,4,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,
  	686,3,102,51,0,681,682,3,108,54,0,682,683,3,102,51,0,683,685,1,0,0,0,
  	684,681,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,101,
  	1,0,0,0,688,686,1,0,0,0,689,695,3,104,52,0,690,691,3,110,55,0,691,692,
  	3,104,52,0,692,694,1,0,0,0,693,690,1,0,0,0,694,697,1,0,0,0,695,693,1,
  	0,0,0,695,696,1,0,0,0,696,103,1,0,0,0,697,695,1,0,0,0,698,703,3,114,57,
  	0,699,700,5,143,0,0,700,701,3,120,60,0,701,702,5,144,0,0,702,704,1,0,
  	0,0,703,699,1,0,0,0,703,704,1,0,0,0,704,723,1,0,0,0,705,706,5,162,0,0,
  	706,723,3,114,57,0,707,723,3,246,123,0,708,723,3,244,122,0,709,723,5,
  	111,0,0,710,711,5,143,0,0,711,712,3,96,48,0,712,713,5,144,0,0,713,723,
  	1,0,0,0,714,715,5,199,0,0,715,723,3,104,52,0,716,723,3,116,58,0,717,718,
  	3,232,116,0,718,719,5,143,0,0,719,720,3,96,48,0,720,721,5,144,0,0,721,
  	723,1,0,0,0,722,698,1,0,0,0,722,705,1,0,0,0,722,707,1,0,0,0,722,708,1,
  	0,0,0,722,709,1,0,0,0,722,710,1,0,0,0,722,714,1,0,0,0,722,716,1,0,0,0,
  	722,717,1,0,0,0,723,105,1,0,0,0,724,725,7,5,0,0,725,107,1,0,0,0,726,727,
  	7,6,0,0,727,109,1,0,0,0,728,729,7,7,0,0,729,111,1,0,0,0,730,731,7,8,0,
  	0,731,113,1,0,0,0,732,742,3,230,115,0,733,734,5,142,0,0,734,741,5,176,
  	0,0,735,736,5,145,0,0,736,737,3,120,60,0,737,738,5,146,0,0,738,741,1,
  	0,0,0,739,741,5,151,0,0,740,733,1,0,0,0,740,735,1,0,0,0,740,739,1,0,0,
  	0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,115,1,0,0,0,744,
  	742,1,0,0,0,745,746,5,145,0,0,746,751,3,118,59,0,747,748,5,147,0,0,748,
  	750,3,118,59,0,749,747,1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,
  	1,0,0,0,752,754,1,0,0,0,753,751,1,0,0,0,754,755,5,146,0,0,755,117,1,0,
  	0,0,756,759,3,96,48,0,757,758,5,150,0,0,758,760,3,96,48,0,759,757,1,0,
  	0,0,759,760,1,0,0,0,760,119,1,0,0,0,761,766,3,96,48,0,762,763,5,147,0,
  	0,763,765,3,96,48,0,764,762,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,
  	767,1,0,0,0,767,121,1,0,0,0,768,766,1,0,0,0,769,770,3,242,121,0,770,771,
  	5,149,0,0,771,773,1,0,0,0,772,769,1,0,0,0,772,773,1,0,0,0,773,776,1,0,
  	0,0,774,777,3,126,63,0,775,777,3,128,64,0,776,774,1,0,0,0,776,775,1,0,
  	0,0,777,123,1,0,0,0,778,783,3,122,61,0,779,780,5,141,0,0,780,782,3,122,
  	61,0,781,779,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,
  	784,125,1,0,0,0,785,783,1,0,0,0,786,791,3,134,67,0,787,791,5,75,0,0,788,
  	789,5,76,0,0,789,791,3,242,121,0,790,786,1,0,0,0,790,787,1,0,0,0,790,
  	788,1,0,0,0,791,127,1,0,0,0,792,800,3,130,65,0,793,800,3,132,66,0,794,
  	800,3,144,72,0,795,800,3,152,76,0,796,800,3,154,77,0,797,800,3,158,79,
  	0,798,800,3,160,80,0,799,792,1,0,0,0,799,793,1,0,0,0,799,794,1,0,0,0,
  	799,795,1,0,0,0,799,796,1,0,0,0,799,797,1,0,0,0,799,798,1,0,0,0,800,129,
  	1,0,0,0,801,802,5,210,0,0,802,804,3,124,62,0,803,805,5,141,0,0,804,803,
  	1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,807,5,3,0,0,807,131,1,0,0,
  	0,808,811,3,136,68,0,809,811,3,138,69,0,810,808,1,0,0,0,810,809,1,0,0,
  	0,811,133,1,0,0,0,812,813,3,114,57,0,813,814,5,152,0,0,814,815,3,96,48,
  	0,815,135,1,0,0,0,816,817,5,203,0,0,817,818,3,96,48,0,818,819,5,79,0,
  	0,819,822,3,122,61,0,820,821,5,80,0,0,821,823,3,122,61,0,822,820,1,0,
  	0,0,822,823,1,0,0,0,823,137,1,0,0,0,824,825,5,44,0,0,825,826,3,96,48,
  	0,826,827,5,17,0,0,827,832,3,140,70,0,828,829,5,141,0,0,829,831,3,140,
  	70,0,830,828,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,
  	833,837,1,0,0,0,834,832,1,0,0,0,835,836,5,80,0,0,836,838,3,124,62,0,837,
  	835,1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,841,5,141,0,0,840,839,
  	1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,843,5,3,0,0,843,139,1,0,0,
  	0,844,849,3,142,71,0,845,846,5,147,0,0,846,848,3,142,71,0,847,845,1,0,
  	0,0,848,851,1,0,0,0,849,847,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,
  	849,1,0,0,0,852,853,5,149,0,0,853,854,3,122,61,0,854,141,1,0,0,0,855,
  	858,3,238,119,0,856,857,5,150,0,0,857,859,3,238,119,0,858,856,1,0,0,0,
  	858,859,1,0,0,0,859,143,1,0,0,0,860,864,3,146,73,0,861,864,3,148,74,0,
  	862,864,3,150,75,0,863,860,1,0,0,0,863,861,1,0,0,0,863,862,1,0,0,0,864,
  	145,1,0,0,0,865,866,5,83,0,0,866,868,3,124,62,0,867,869,5,141,0,0,868,
  	867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,871,5,84,0,0,871,872,
  	3,96,48,0,872,147,1,0,0,0,873,874,5,85,0,0,874,875,3,96,48,0,875,876,
  	5,204,0,0,876,877,3,122,61,0,877,149,1,0,0,0,878,879,5,205,0,0,879,880,
  	3,230,115,0,880,881,5,152,0,0,881,882,3,96,48,0,882,883,7,9,0,0,883,884,
  	3,96,48,0,884,885,5,204,0,0,885,886,3,122,61,0,886,151,1,0,0,0,887,888,
  	5,93,0,0,888,889,3,228,114,0,889,890,5,204,0,0,890,891,3,122,61,0,891,
  	153,1,0,0,0,892,893,5,94,0,0,893,898,3,122,61,0,894,895,5,141,0,0,895,
  	897,3,122,61,0,896,894,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,899,
  	1,0,0,0,899,901,1,0,0,0,900,898,1,0,0,0,901,902,5,206,0,0,902,903,3,156,
  	78,0,903,904,5,3,0,0,904,155,1,0,0,0,905,908,5,98,0,0,906,907,5,176,0,
  	0,907,909,5,149,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,
  	911,3,232,116,0,911,912,5,204,0,0,912,925,3,122,61,0,913,914,5,141,0,
  	0,914,917,5,98,0,0,915,916,5,176,0,0,916,918,5,149,0,0,917,915,1,0,0,
  	0,917,918,1,0,0,0,918,919,1,0,0,0,919,920,3,232,116,0,920,921,5,204,0,
  	0,921,922,3,122,61,0,922,924,1,0,0,0,923,913,1,0,0,0,924,927,1,0,0,0,
  	925,923,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,925,1,0,0,0,928,932,
  	5,80,0,0,929,931,3,122,61,0,930,929,1,0,0,0,931,934,1,0,0,0,932,930,1,
  	0,0,0,932,933,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,935,937,5,141,0,
  	0,936,935,1,0,0,0,936,937,1,0,0,0,937,157,1,0,0,0,938,939,5,94,0,0,939,
  	940,3,122,61,0,940,941,5,95,0,0,941,943,3,122,61,0,942,944,5,141,0,0,
  	943,942,1,0,0,0,943,944,1,0,0,0,944,945,1,0,0,0,945,946,5,3,0,0,946,159,
  	1,0,0,0,947,949,5,99,0,0,948,950,5,176,0,0,949,948,1,0,0,0,949,950,1,
  	0,0,0,950,953,1,0,0,0,951,952,5,100,0,0,952,954,5,176,0,0,953,951,1,0,
  	0,0,953,954,1,0,0,0,954,161,1,0,0,0,955,958,3,164,82,0,956,958,3,166,
  	83,0,957,955,1,0,0,0,957,956,1,0,0,0,958,163,1,0,0,0,959,960,3,170,85,
  	0,960,962,5,141,0,0,961,963,3,178,89,0,962,961,1,0,0,0,962,963,1,0,0,
  	0,963,965,1,0,0,0,964,966,3,14,7,0,965,964,1,0,0,0,965,966,1,0,0,0,966,
  	967,1,0,0,0,967,968,3,24,12,0,968,969,5,141,0,0,969,165,1,0,0,0,970,971,
  	3,168,84,0,971,973,5,141,0,0,972,974,3,178,89,0,973,972,1,0,0,0,973,974,
  	1,0,0,0,974,976,1,0,0,0,975,977,3,14,7,0,976,975,1,0,0,0,976,977,1,0,
  	0,0,977,978,1,0,0,0,978,979,3,24,12,0,979,980,5,141,0,0,980,167,1,0,0,
  	0,981,982,5,207,0,0,982,984,5,176,0,0,983,985,3,172,86,0,984,983,1,0,
  	0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,989,5,149,0,0,987,990,3,52,26,
  	0,988,990,5,37,0,0,989,987,1,0,0,0,989,988,1,0,0,0,990,169,1,0,0,0,991,
  	992,5,208,0,0,992,994,5,176,0,0,993,995,3,172,86,0,994,993,1,0,0,0,994,
  	995,1,0,0,0,995,171,1,0,0,0,996,1002,5,143,0,0,997,998,3,174,87,0,998,
  	999,5,141,0,0,999,1001,1,0,0,0,1000,997,1,0,0,0,1001,1004,1,0,0,0,1002,
  	1000,1,0,0,0,1002,1003,1,0,0,0,1003,1005,1,0,0,0,1004,1002,1,0,0,0,1005,
  	1006,5,144,0,0,1006,173,1,0,0,0,1007,1009,7,10,0,0,1008,1007,1,0,0,0,
  	1008,1009,1,0,0,0,1009,1010,1,0,0,0,1010,1011,3,176,88,0,1011,175,1,0,
  	0,0,1012,1023,3,226,113,0,1013,1021,5,149,0,0,1014,1015,5,197,0,0,1015,
  	1017,5,17,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,
  	1022,3,52,26,0,1019,1022,5,37,0,0,1020,1022,5,46,0,0,1021,1016,1,0,0,
  	0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,1024,1,0,0,0,1023,1013,1,0,
  	0,0,1023,1024,1,0,0,0,1024,1032,1,0,0,0,1025,1026,5,176,0,0,1026,1027,
  	5,149,0,0,1027,1028,3,52,26,0,1028,1029,5,148,0,0,1029,1030,3,238,119,
  	0,1030,1032,1,0,0,0,1031,1012,1,0,0,0,1031,1025,1,0,0,0,1032,177,1,0,
  	0,0,1033,1056,5,123,0,0,1034,1056,5,124,0,0,1035,1056,5,125,0,0,1036,
  	1056,5,48,0,0,1037,1056,5,126,0,0,1038,1056,3,180,90,0,1039,1056,5,165,
  	0,0,1040,1056,5,128,0,0,1041,1056,5,129,0,0,1042,1056,5,166,0,0,1043,
  	1056,5,167,0,0,1044,1045,5,130,0,0,1045,1056,3,238,119,0,1046,1056,5,
  	209,0,0,1047,1056,5,133,0,0,1048,1056,5,134,0,0,1049,1056,5,135,0,0,1050,
  	1056,5,136,0,0,1051,1056,5,137,0,0,1052,1056,5,138,0,0,1053,1056,5,139,
  	0,0,1054,1056,5,69,0,0,1055,1033,1,0,0,0,1055,1034,1,0,0,0,1055,1035,
  	1,0,0,0,1055,1036,1,0,0,0,1055,1037,1,0,0,0,1055,1038,1,0,0,0,1055,1039,
  	1,0,0,0,1055,1040,1,0,0,0,1055,1041,1,0,0,0,1055,1042,1,0,0,0,1055,1043,
  	1,0,0,0,1055,1044,1,0,0,0,1055,1046,1,0,0,0,1055,1047,1,0,0,0,1055,1048,
  	1,0,0,0,1055,1049,1,0,0,0,1055,1050,1,0,0,0,1055,1051,1,0,0,0,1055,1052,
  	1,0,0,0,1055,1053,1,0,0,0,1055,1054,1,0,0,0,1056,179,1,0,0,0,1057,1068,
  	5,127,0,0,1058,1066,3,244,122,0,1059,1063,5,120,0,0,1060,1062,5,176,0,
  	0,1061,1060,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,
  	0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,1066,1059,1,0,0,0,1066,1067,1,
  	0,0,0,1067,1069,1,0,0,0,1068,1058,1,0,0,0,1068,1069,1,0,0,0,1069,181,
  	1,0,0,0,1070,1072,5,47,0,0,1071,1073,3,184,92,0,1072,1071,1,0,0,0,1072,
  	1073,1,0,0,0,1073,1075,1,0,0,0,1074,1076,3,194,97,0,1075,1074,1,0,0,0,
  	1075,1076,1,0,0,0,1076,1078,1,0,0,0,1077,1079,3,186,93,0,1078,1077,1,
  	0,0,0,1078,1079,1,0,0,0,1079,1080,1,0,0,0,1080,1081,5,3,0,0,1081,183,
  	1,0,0,0,1082,1083,5,143,0,0,1083,1084,3,230,115,0,1084,1085,5,144,0,0,
  	1085,185,1,0,0,0,1086,1093,3,188,94,0,1087,1088,5,141,0,0,1088,1091,5,
  	48,0,0,1089,1090,5,141,0,0,1090,1092,5,69,0,0,1091,1089,1,0,0,0,1091,
  	1092,1,0,0,0,1092,1094,1,0,0,0,1093,1087,1,0,0,0,1093,1094,1,0,0,0,1094,
  	1095,1,0,0,0,1095,1096,5,141,0,0,1096,1098,1,0,0,0,1097,1086,1,0,0,0,
  	1098,1101,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,187,1,0,0,
  	0,1101,1099,1,0,0,0,1102,1104,5,16,0,0,1103,1102,1,0,0,0,1103,1104,1,
  	0,0,0,1104,1107,1,0,0,0,1105,1108,3,170,85,0,1106,1108,3,168,84,0,1107,
  	1105,1,0,0,0,1107,1106,1,0,0,0,1108,1112,1,0,0,0,1109,1112,3,190,95,0,
  	1110,1112,3,192,96,0,1111,1103,1,0,0,0,1111,1109,1,0,0,0,1111,1110,1,
  	0,0,0,1112,189,1,0,0,0,1113,1114,5,49,0,0,1114,1116,5,176,0,0,1115,1117,
  	3,172,86,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,191,1,0,0,0,1118,
  	1119,5,50,0,0,1119,1121,5,176,0,0,1120,1122,3,172,86,0,1121,1120,1,0,
  	0,0,1121,1122,1,0,0,0,1122,193,1,0,0,0,1123,1124,3,226,113,0,1124,1125,
  	5,149,0,0,1125,1126,3,46,23,0,1126,1127,1,0,0,0,1127,1128,5,141,0,0,1128,
  	195,1,0,0,0,1129,1130,5,10,0,0,1130,1133,3,124,62,0,1131,1132,5,51,0,
  	0,1132,1134,3,124,62,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1135,
  	1,0,0,0,1135,1136,5,3,0,0,1136,1143,1,0,0,0,1137,1138,5,210,0,0,1138,
  	1139,3,124,62,0,1139,1140,5,3,0,0,1140,1143,1,0,0,0,1141,1143,5,3,0,0,
  	1142,1129,1,0,0,0,1142,1137,1,0,0,0,1142,1141,1,0,0,0,1143,197,1,0,0,
  	0,1144,1146,5,16,0,0,1145,1147,3,200,100,0,1146,1145,1,0,0,0,1146,1147,
  	1,0,0,0,1147,1149,1,0,0,0,1148,1150,3,202,101,0,1149,1148,1,0,0,0,1149,
  	1150,1,0,0,0,1150,1152,1,0,0,0,1151,1153,3,204,102,0,1152,1151,1,0,0,
  	0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,1156,3,206,103,0,1155,1154,
  	1,0,0,0,1155,1156,1,0,0,0,1156,1158,1,0,0,0,1157,1159,3,208,104,0,1158,
  	1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1161,5,3,0,0,1161,
  	199,1,0,0,0,1162,1163,5,143,0,0,1163,1164,3,226,113,0,1164,1165,5,144,
  	0,0,1165,201,1,0,0,0,1166,1168,7,11,0,0,1167,1166,1,0,0,0,1167,1168,1,
  	0,0,0,1168,203,1,0,0,0,1169,1170,3,202,101,0,1170,1171,3,194,97,0,1171,
  	1172,5,141,0,0,1172,1174,1,0,0,0,1173,1169,1,0,0,0,1174,1177,1,0,0,0,
  	1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,205,1,0,0,0,1177,1175,1,0,0,
  	0,1178,1179,3,202,101,0,1179,1180,3,186,93,0,1180,1181,5,141,0,0,1181,
  	1183,1,0,0,0,1182,1178,1,0,0,0,1183,1186,1,0,0,0,1184,1182,1,0,0,0,1184,
  	1185,1,0,0,0,1185,207,1,0,0,0,1186,1184,1,0,0,0,1187,1188,3,202,101,0,
  	1188,1189,3,210,105,0,1189,1190,5,141,0,0,1190,1192,1,0,0,0,1191,1187,
  	1,0,0,0,1192,1195,1,0,0,0,1193,1191,1,0,0,0,1193,1194,1,0,0,0,1194,209,
  	1,0,0,0,1195,1193,1,0,0,0,1196,1197,5,57,0,0,1197,1199,5,176,0,0,1198,
  	1200,3,212,106,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,
  	0,1201,1203,3,216,108,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1205,
  	1,0,0,0,1204,1206,3,14,7,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,211,
  	1,0,0,0,1207,1209,3,214,107,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,
  	1210,1,0,0,0,1210,1211,5,149,0,0,1211,1212,5,176,0,0,1212,213,1,0,0,0,
  	1213,1214,5,145,0,0,1214,1215,3,226,113,0,1215,1216,5,149,0,0,1216,1217,
  	3,232,116,0,1217,1221,1,0,0,0,1218,1220,5,141,0,0,1219,1218,1,0,0,0,1220,
  	1223,1,0,0,0,1221,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,0,1223,
  	1221,1,0,0,0,1224,1225,5,146,0,0,1225,215,1,0,0,0,1226,1227,5,59,0,0,
  	1227,1229,3,238,119,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,1229,1232,1,
  	0,0,0,1230,1231,5,60,0,0,1231,1233,5,176,0,0,1232,1230,1,0,0,0,1232,1233,
  	1,0,0,0,1233,1236,1,0,0,0,1234,1235,5,61,0,0,1235,1237,5,176,0,0,1236,
  	1234,1,0,0,0,1236,1237,1,0,0,0,1237,1243,1,0,0,0,1238,1241,5,62,0,0,1239,
  	1242,5,176,0,0,1240,1242,3,238,119,0,1241,1239,1,0,0,0,1241,1240,1,0,
  	0,0,1242,1244,1,0,0,0,1243,1238,1,0,0,0,1243,1244,1,0,0,0,1244,1248,1,
  	0,0,0,1245,1246,5,63,0,0,1246,1249,3,238,119,0,1247,1249,5,64,0,0,1248,
  	1245,1,0,0,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1252,1,0,0,0,1250,
  	1251,5,65,0,0,1251,1253,3,232,116,0,1252,1250,1,0,0,0,1252,1253,1,0,0,
  	0,1253,217,1,0,0,0,1254,1256,5,8,0,0,1255,1257,3,220,110,0,1256,1255,
  	1,0,0,0,1256,1257,1,0,0,0,1257,1259,1,0,0,0,1258,1260,3,206,103,0,1259,
  	1258,1,0,0,0,1259,1260,1,0,0,0,1260,1262,1,0,0,0,1261,1263,3,208,104,
  	0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,5,3,
  	0,0,1265,219,1,0,0,0,1266,1267,5,143,0,0,1267,1268,5,176,0,0,1268,1269,
  	5,144,0,0,1269,221,1,0,0,0,1270,1272,5,4,0,0,1271,1273,3,226,113,0,1272,
  	1271,1,0,0,0,1273,1274,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,
  	1276,1,0,0,0,1276,1277,5,141,0,0,1277,223,1,0,0,0,1278,1280,5,5,0,0,1279,
  	1281,3,226,113,0,1280,1279,1,0,0,0,1281,1282,1,0,0,0,1282,1280,1,0,0,
  	0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1285,5,141,0,0,1285,225,1,
  	0,0,0,1286,1289,5,176,0,0,1287,1288,5,147,0,0,1288,1290,5,176,0,0,1289,
  	1287,1,0,0,0,1290,1291,1,0,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,
  	227,1,0,0,0,1293,1296,3,230,115,0,1294,1295,5,147,0,0,1295,1297,3,230,
  	115,0,1296,1294,1,0,0,0,1297,1298,1,0,0,0,1298,1296,1,0,0,0,1298,1299,
  	1,0,0,0,1299,229,1,0,0,0,1300,1301,3,240,120,0,1301,1302,5,142,0,0,1302,
  	1304,1,0,0,0,1303,1300,1,0,0,0,1303,1304,1,0,0,0,1304,1312,1,0,0,0,1305,
  	1306,5,142,0,0,1306,1308,5,176,0,0,1307,1309,5,151,0,0,1308,1307,1,0,
  	0,0,1309,1310,1,0,0,0,1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,1313,1,
  	0,0,0,1312,1305,1,0,0,0,1312,1313,1,0,0,0,1313,231,1,0,0,0,1314,1315,
  	3,240,120,0,1315,1316,5,142,0,0,1316,1318,1,0,0,0,1317,1314,1,0,0,0,1317,
  	1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,3,234,117,0,1320,233,1,0,0,0,
  	1321,1322,7,12,0,0,1322,235,1,0,0,0,1323,1324,5,151,0,0,1324,1331,7,13,
  	0,0,1325,1328,5,163,0,0,1326,1329,3,254,127,0,1327,1329,3,248,124,0,1328,
  	1326,1,0,0,0,1328,1327,1,0,0,0,1329,1331,1,0,0,0,1330,1323,1,0,0,0,1330,
  	1325,1,0,0,0,1331,237,1,0,0,0,1332,1340,3,246,123,0,1333,1340,3,244,122,
  	0,1334,1340,3,236,118,0,1335,1336,3,254,127,0,1336,1337,3,112,56,0,1337,
  	1338,3,254,127,0,1338,1340,1,0,0,0,1339,1332,1,0,0,0,1339,1333,1,0,0,
  	0,1339,1334,1,0,0,0,1339,1335,1,0,0,0,1340,239,1,0,0,0,1341,1346,5,176,
  	0,0,1342,1343,5,176,0,0,1343,1344,5,142,0,0,1344,1346,5,176,0,0,1345,
  	1341,1,0,0,0,1345,1342,1,0,0,0,1346,241,1,0,0,0,1347,1350,5,176,0,0,1348,
  	1350,3,254,127,0,1349,1347,1,0,0,0,1349,1348,1,0,0,0,1350,243,1,0,0,0,
  	1351,1352,5,193,0,0,1352,245,1,0,0,0,1353,1360,3,256,128,0,1354,1355,
  	5,142,0,0,1355,1358,3,254,127,0,1356,1357,5,175,0,0,1357,1359,3,256,128,
  	0,1358,1356,1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,1354,1,0,
  	0,0,1360,1361,1,0,0,0,1361,1364,1,0,0,0,1362,1364,3,248,124,0,1363,1353,
  	1,0,0,0,1363,1362,1,0,0,0,1364,247,1,0,0,0,1365,1368,3,250,125,0,1366,
  	1368,3,252,126,0,1367,1365,1,0,0,0,1367,1366,1,0,0,0,1368,249,1,0,0,0,
  	1369,1371,5,214,0,0,1370,1369,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,
  	0,0,1372,1373,1,0,0,0,1373,251,1,0,0,0,1374,1372,1,0,0,0,1375,1377,5,
  	215,0,0,1376,1375,1,0,0,0,1377,1380,1,0,0,0,1378,1376,1,0,0,0,1378,1379,
  	1,0,0,0,1379,253,1,0,0,0,1380,1378,1,0,0,0,1381,1383,5,216,0,0,1382,1381,
  	1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,1389,
  	1,0,0,0,1386,1384,1,0,0,0,1387,1389,3,248,124,0,1388,1384,1,0,0,0,1388,
  	1387,1,0,0,0,1389,255,1,0,0,0,1390,1391,7,4,0,0,1391,1392,3,254,127,0,
  	1392,257,1,0,0,0,174,262,270,279,291,294,306,311,324,329,336,341,346,
  	348,352,357,361,370,381,388,396,398,406,411,415,420,424,426,431,439,450,
  	467,472,480,487,503,511,522,525,532,534,543,548,553,557,561,568,571,574,
  	580,585,594,602,608,616,622,627,631,635,643,652,656,659,667,675,678,686,
  	695,703,722,740,742,751,759,766,772,776,783,790,799,804,810,822,832,837,
  	840,849,858,863,868,898,908,917,925,932,936,943,949,953,957,962,965,973,
  	976,984,989,994,1002,1008,1016,1021,1023,1031,1055,1063,1066,1068,1072,
  	1075,1078,1091,1093,1099,1103,1107,1111,1116,1121,1133,1142,1146,1149,
  	1152,1155,1158,1167,1175,1184,1193,1199,1202,1205,1208,1221,1228,1232,
  	1236,1241,1243,1248,1252,1256,1259,1262,1274,1282,1291,1298,1303,1310,
  	1312,1317,1328,1330,1339,1345,1349,1358,1360,1363,1367,1372,1378,1384,
  	1388
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  objectpascalparserParserStaticData = staticData.release();
}

}

ObjectPascalParser::ObjectPascalParser(TokenStream *input) : ObjectPascalParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ObjectPascalParser::ObjectPascalParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ObjectPascalParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *objectpascalparserParserStaticData->atn, objectpascalparserParserStaticData->decisionToDFA, objectpascalparserParserStaticData->sharedContextCache, options);
}

ObjectPascalParser::~ObjectPascalParser() {
  delete _interpreter;
}

const atn::ATN& ObjectPascalParser::getATN() const {
  return *objectpascalparserParserStaticData->atn;
}

std::string ObjectPascalParser::getGrammarFileName() const {
  return "ObjectPascalParser.g4";
}

const std::vector<std::string>& ObjectPascalParser::getRuleNames() const {
  return objectpascalparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& ObjectPascalParser::getVocabulary() const {
  return objectpascalparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ObjectPascalParser::getSerializedATN() const {
  return objectpascalparserParserStaticData->serializedATN;
}


//----------------- GoalContext ------------------------------------------------------------------

ObjectPascalParser::GoalContext::GoalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::GoalContext::program() {
  return getRuleContext<ObjectPascalParser::ProgramContext>(0);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::GoalContext::package() {
  return getRuleContext<ObjectPascalParser::PackageContext>(0);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::GoalContext::library() {
  return getRuleContext<ObjectPascalParser::LibraryContext>(0);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::GoalContext::unit() {
  return getRuleContext<ObjectPascalParser::UnitContext>(0);
}


size_t ObjectPascalParser::GoalContext::getRuleIndex() const {
  return ObjectPascalParser::RuleGoal;
}


std::any ObjectPascalParser::GoalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitGoal(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::GoalContext* ObjectPascalParser::goal() {
  GoalContext *_localctx = _tracker.createInstance<GoalContext>(_ctx, getState());
  enterRule(_localctx, 0, ObjectPascalParser::RuleGoal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(262);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROGRAM: {
        enterOuterAlt(_localctx, 1);
        setState(258);
        program();
        break;
      }

      case ObjectPascalParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(259);
        package();
        break;
      }

      case ObjectPascalParser::LIBRARY: {
        enterOuterAlt(_localctx, 3);
        setState(260);
        library();
        break;
      }

      case ObjectPascalParser::UNIT: {
        enterOuterAlt(_localctx, 4);
        setState(261);
        unit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

ObjectPascalParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::PROGRAM() {
  return getToken(ObjectPascalParser::PROGRAM, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::ProgramContext::programBlock() {
  return getRuleContext<ObjectPascalParser::ProgramBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ProgramContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ProgramContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgram;
}


std::any ObjectPascalParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, ObjectPascalParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(264);
    match(ObjectPascalParser::PROGRAM);
    setState(265);
    match(ObjectPascalParser::Ident);
    setState(270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(266);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(267);
      identList();
      setState(268);
      match(ObjectPascalParser::RIGHT_PAREN);
    }
    setState(272);
    match(ObjectPascalParser::SEMI);
    setState(273);
    programBlock();
    setState(274);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitContext ------------------------------------------------------------------

ObjectPascalParser::UnitContext::UnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UnitContext::UNIT() {
  return getToken(ObjectPascalParser::UNIT, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::UnitContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::UnitContext::interfaceSection() {
  return getRuleContext<ObjectPascalParser::InterfaceSectionContext>(0);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::UnitContext::implementationSection() {
  return getRuleContext<ObjectPascalParser::ImplementationSectionContext>(0);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::UnitContext::initSection() {
  return getRuleContext<ObjectPascalParser::InitSectionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::UnitContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::UnitContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnit;
}


std::any ObjectPascalParser::UnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnit(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::unit() {
  UnitContext *_localctx = _tracker.createInstance<UnitContext>(_ctx, getState());
  enterRule(_localctx, 4, ObjectPascalParser::RuleUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(276);
    match(ObjectPascalParser::UNIT);
    setState(277);
    qualId();
    setState(279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(278);
      portabilityDirective();
    }
    setState(281);
    match(ObjectPascalParser::SEMI);
    setState(282);
    interfaceSection();
    setState(283);
    implementationSection();
    setState(284);
    initSection();
    setState(285);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

ObjectPascalParser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PackageContext::PACKAGE() {
  return getToken(ObjectPascalParser::PACKAGE, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::PackageContext::requiresClause() {
  return getRuleContext<ObjectPascalParser::RequiresClauseContext>(0);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::PackageContext::containsClause() {
  return getRuleContext<ObjectPascalParser::ContainsClauseContext>(0);
}


size_t ObjectPascalParser::PackageContext::getRuleIndex() const {
  return ObjectPascalParser::RulePackage;
}


std::any ObjectPascalParser::PackageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPackage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 6, ObjectPascalParser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(287);
    match(ObjectPascalParser::PACKAGE);
    setState(288);
    match(ObjectPascalParser::Ident);
    setState(289);
    match(ObjectPascalParser::SEMI);
    setState(291);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::REQUIRES) {
      setState(290);
      requiresClause();
    }
    setState(294);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CONTAINS) {
      setState(293);
      containsClause();
    }
    setState(296);
    match(ObjectPascalParser::END);
    setState(297);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryContext ------------------------------------------------------------------

ObjectPascalParser::LibraryContext::LibraryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::LibraryContext::programBlock() {
  return getRuleContext<ObjectPascalParser::ProgramBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::LibraryContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLibrary;
}


std::any ObjectPascalParser::LibraryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLibrary(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::library() {
  LibraryContext *_localctx = _tracker.createInstance<LibraryContext>(_ctx, getState());
  enterRule(_localctx, 8, ObjectPascalParser::RuleLibrary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(299);
    match(ObjectPascalParser::LIBRARY);
    setState(300);
    match(ObjectPascalParser::Ident);
    setState(301);
    match(ObjectPascalParser::SEMI);
    setState(302);
    programBlock();
    setState(303);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramBlockContext ------------------------------------------------------------------

ObjectPascalParser::ProgramBlockContext::ProgramBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::ProgramBlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ProgramBlockContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ProgramBlockContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ProgramBlockContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ProgramBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgramBlock;
}


std::any ObjectPascalParser::ProgramBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgramBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::programBlock() {
  ProgramBlockContext *_localctx = _tracker.createInstance<ProgramBlockContext>(_ctx, getState());
  enterRule(_localctx, 10, ObjectPascalParser::RuleProgramBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(305);
      usesClause();
    }
    setState(311);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::LABEL)
      | (1ULL << ObjectPascalParser::CONST)
      | (1ULL << ObjectPascalParser::TYPE_))) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & ((1ULL << (ObjectPascalParser::VAR - 198))
      | (1ULL << (ObjectPascalParser::FUNCTION - 198))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 198)))) != 0)) {
      setState(308);
      declSection();
      setState(313);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(314);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsesClauseContext ------------------------------------------------------------------

ObjectPascalParser::UsesClauseContext::UsesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::USES() {
  return getToken(ObjectPascalParser::USES, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::UsesClauseContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::UsesClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUsesClause;
}


std::any ObjectPascalParser::UsesClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUsesClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::usesClause() {
  UsesClauseContext *_localctx = _tracker.createInstance<UsesClauseContext>(_ctx, getState());
  enterRule(_localctx, 12, ObjectPascalParser::RuleUsesClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(316);
    match(ObjectPascalParser::USES);
    setState(317);
    qualIdList();
    setState(318);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PortabilityDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::PortabilityDirectiveContext::PortabilityDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::PLATFORM() {
  return getToken(ObjectPascalParser::PLATFORM, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::DEPRECATED() {
  return getToken(ObjectPascalParser::DEPRECATED, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}


size_t ObjectPascalParser::PortabilityDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RulePortabilityDirective;
}


std::any ObjectPascalParser::PortabilityDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPortabilityDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::portabilityDirective() {
  PortabilityDirectiveContext *_localctx = _tracker.createInstance<PortabilityDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 14, ObjectPascalParser::RulePortabilityDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(320);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceSectionContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceSectionContext::InterfaceSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceSectionContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::InterfaceSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::InterfaceDeclContext *> ObjectPascalParser::InterfaceSectionContext::interfaceDecl() {
  return getRuleContexts<ObjectPascalParser::InterfaceDeclContext>();
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::InterfaceSectionContext::interfaceDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::InterfaceDeclContext>(i);
}


size_t ObjectPascalParser::InterfaceSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceSection;
}


std::any ObjectPascalParser::InterfaceSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::interfaceSection() {
  InterfaceSectionContext *_localctx = _tracker.createInstance<InterfaceSectionContext>(_ctx, getState());
  enterRule(_localctx, 16, ObjectPascalParser::RuleInterfaceSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(322);
    match(ObjectPascalParser::INTERFACE);
    setState(324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(323);
      usesClause();
    }
    setState(329);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::CONST

    || _la == ObjectPascalParser::TYPE_ || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & ((1ULL << (ObjectPascalParser::VAR - 198))
      | (1ULL << (ObjectPascalParser::FUNCTION - 198))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 198)))) != 0)) {
      setState(326);
      interfaceDecl();
      setState(331);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceDeclContext::InterfaceDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::InterfaceDeclContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::InterfaceDeclContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::InterfaceDeclContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::InterfaceDeclContext::exportedHeading() {
  return getRuleContext<ObjectPascalParser::ExportedHeadingContext>(0);
}


size_t ObjectPascalParser::InterfaceDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceDecl;
}


std::any ObjectPascalParser::InterfaceDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::interfaceDecl() {
  InterfaceDeclContext *_localctx = _tracker.createInstance<InterfaceDeclContext>(_ctx, getState());
  enterRule(_localctx, 18, ObjectPascalParser::RuleInterfaceDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(336);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 1);
        setState(332);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 2);
        setState(333);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR: {
        enterOuterAlt(_localctx, 3);
        setState(334);
        varSection();
        break;
      }

      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 4);
        setState(335);
        exportedHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportedHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ExportedHeadingContext::ExportedHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ExportedHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExportedHeadingContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ExportedHeadingContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ExportedHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}


size_t ObjectPascalParser::ExportedHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportedHeading;
}


std::any ObjectPascalParser::ExportedHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportedHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::exportedHeading() {
  ExportedHeadingContext *_localctx = _tracker.createInstance<ExportedHeadingContext>(_ctx, getState());
  enterRule(_localctx, 20, ObjectPascalParser::RuleExportedHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(348);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(338);
        procedureHeading();
        setState(339);
        match(ObjectPascalParser::SEMI);
        setState(341);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::VIRTUAL

        || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
          | (1ULL << (ObjectPascalParser::REGISTER - 123))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
          | (1ULL << (ObjectPascalParser::EXPORT - 123))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
          | (1ULL << (ObjectPascalParser::FAR - 123))
          | (1ULL << (ObjectPascalParser::FORWARD - 123))
          | (1ULL << (ObjectPascalParser::MESSAGE - 123))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
          | (1ULL << (ObjectPascalParser::PASCAL - 123))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
          | (1ULL << (ObjectPascalParser::SAFECALL - 123))
          | (1ULL << (ObjectPascalParser::STDCALL - 123))
          | (1ULL << (ObjectPascalParser::VARARGS - 123))
          | (1ULL << (ObjectPascalParser::LOCAL - 123))
          | (1ULL << (ObjectPascalParser::NEAR - 123))
          | (1ULL << (ObjectPascalParser::INLINE - 123))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
          setState(340);
          directive();
        }
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(343);
        functionHeading();
        setState(344);
        match(ObjectPascalParser::SEMI);
        setState(346);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::VIRTUAL

        || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
          | (1ULL << (ObjectPascalParser::REGISTER - 123))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
          | (1ULL << (ObjectPascalParser::EXPORT - 123))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
          | (1ULL << (ObjectPascalParser::FAR - 123))
          | (1ULL << (ObjectPascalParser::FORWARD - 123))
          | (1ULL << (ObjectPascalParser::MESSAGE - 123))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
          | (1ULL << (ObjectPascalParser::PASCAL - 123))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
          | (1ULL << (ObjectPascalParser::SAFECALL - 123))
          | (1ULL << (ObjectPascalParser::STDCALL - 123))
          | (1ULL << (ObjectPascalParser::VARARGS - 123))
          | (1ULL << (ObjectPascalParser::LOCAL - 123))
          | (1ULL << (ObjectPascalParser::NEAR - 123))
          | (1ULL << (ObjectPascalParser::INLINE - 123))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
          setState(345);
          directive();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementationSectionContext ------------------------------------------------------------------

ObjectPascalParser::ImplementationSectionContext::ImplementationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ImplementationSectionContext::IMPLEMENTATION() {
  return getToken(ObjectPascalParser::IMPLEMENTATION, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ImplementationSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ImplementationSectionContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ImplementationSectionContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ImplementationSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleImplementationSection;
}


std::any ObjectPascalParser::ImplementationSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitImplementationSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::implementationSection() {
  ImplementationSectionContext *_localctx = _tracker.createInstance<ImplementationSectionContext>(_ctx, getState());
  enterRule(_localctx, 22, ObjectPascalParser::RuleImplementationSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(350);
    match(ObjectPascalParser::IMPLEMENTATION);
    setState(352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(351);
      usesClause();
    }
    setState(357);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::LABEL)
      | (1ULL << ObjectPascalParser::CONST)
      | (1ULL << ObjectPascalParser::TYPE_))) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & ((1ULL << (ObjectPascalParser::VAR - 198))
      | (1ULL << (ObjectPascalParser::FUNCTION - 198))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 198)))) != 0)) {
      setState(354);
      declSection();
      setState(359);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

ObjectPascalParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::BlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::BlockContext::declSection() {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(0);
}


size_t ObjectPascalParser::BlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleBlock;
}


std::any ObjectPascalParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 24, ObjectPascalParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::LABEL)
      | (1ULL << ObjectPascalParser::CONST)
      | (1ULL << ObjectPascalParser::TYPE_))) != 0) || ((((_la - 198) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 198)) & ((1ULL << (ObjectPascalParser::VAR - 198))
      | (1ULL << (ObjectPascalParser::FUNCTION - 198))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 198)))) != 0)) {
      setState(360);
      declSection();
    }
    setState(363);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::DeclSectionContext::DeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::DeclSectionContext::labelDeclSection() {
  return getRuleContext<ObjectPascalParser::LabelDeclSectionContext>(0);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::DeclSectionContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::DeclSectionContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::DeclSectionContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::DeclSectionContext::procedureDeclSection() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclSectionContext>(0);
}


size_t ObjectPascalParser::DeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDeclSection;
}


std::any ObjectPascalParser::DeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::declSection() {
  DeclSectionContext *_localctx = _tracker.createInstance<DeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 26, ObjectPascalParser::RuleDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(370);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(365);
        labelDeclSection();
        break;
      }

      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 2);
        setState(366);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 3);
        setState(367);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR: {
        enterOuterAlt(_localctx, 4);
        setState(368);
        varSection();
        break;
      }

      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 5);
        setState(369);
        procedureDeclSection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::LabelDeclSectionContext::LabelDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelDeclSectionContext::LABEL() {
  return getToken(ObjectPascalParser::LABEL, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::LabelDeclSectionContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}


size_t ObjectPascalParser::LabelDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelDeclSection;
}


std::any ObjectPascalParser::LabelDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::labelDeclSection() {
  LabelDeclSectionContext *_localctx = _tracker.createInstance<LabelDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 28, ObjectPascalParser::RuleLabelDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(372);
    match(ObjectPascalParser::LABEL);
    setState(373);
    labelId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstSectionContext ------------------------------------------------------------------

ObjectPascalParser::ConstSectionContext::ConstSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

std::vector<ObjectPascalParser::ConstantDeclContext *> ObjectPascalParser::ConstSectionContext::constantDecl() {
  return getRuleContexts<ObjectPascalParser::ConstantDeclContext>();
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::ConstSectionContext::constantDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstantDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ConstSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstSection;
}


std::any ObjectPascalParser::ConstSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::constSection() {
  ConstSectionContext *_localctx = _tracker.createInstance<ConstSectionContext>(_ctx, getState());
  enterRule(_localctx, 30, ObjectPascalParser::RuleConstSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(375);
    match(ObjectPascalParser::CONST);
    setState(381);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Ident) {
      setState(376);
      constantDecl();
      setState(377);
      match(ObjectPascalParser::SEMI);
      setState(383);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclContext ------------------------------------------------------------------

ObjectPascalParser::ConstantDeclContext::ConstantDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ConstantDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ConstantDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ConstantDeclContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ConstantDeclContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::ConstantDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstantDecl;
}


std::any ObjectPascalParser::ConstantDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstantDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::constantDecl() {
  ConstantDeclContext *_localctx = _tracker.createInstance<ConstantDeclContext>(_ctx, getState());
  enterRule(_localctx, 32, ObjectPascalParser::RuleConstantDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(398);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(384);
      match(ObjectPascalParser::Ident);
      setState(385);
      match(ObjectPascalParser::ASSIGN);
      setState(386);
      constExpr();
      setState(388);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(387);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(390);
      match(ObjectPascalParser::Ident);
      setState(391);
      match(ObjectPascalParser::COLON);
      setState(392);
      typeId();
      setState(393);
      match(ObjectPascalParser::ASSIGN);
      setState(394);
      typedConstant();
      setState(396);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(395);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSectionContext ------------------------------------------------------------------

ObjectPascalParser::TypeSectionContext::TypeSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

std::vector<ObjectPascalParser::TypeDeclContext *> ObjectPascalParser::TypeSectionContext::typeDecl() {
  return getRuleContexts<ObjectPascalParser::TypeDeclContext>();
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::TypeSectionContext::typeDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TypeSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TypeSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeSection;
}


std::any ObjectPascalParser::TypeSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::typeSection() {
  TypeSectionContext *_localctx = _tracker.createInstance<TypeSectionContext>(_ctx, getState());
  enterRule(_localctx, 34, ObjectPascalParser::RuleTypeSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(400);
    match(ObjectPascalParser::TYPE_);
    setState(404); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(401);
      typeDecl();
      setState(402);
      match(ObjectPascalParser::SEMI);
      setState(406); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclContext ------------------------------------------------------------------

ObjectPascalParser::TypeDeclContext::TypeDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::TypeDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::TypeDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::TypeDeclContext::restrictedType() {
  return getRuleContext<ObjectPascalParser::RestrictedTypeContext>(0);
}


size_t ObjectPascalParser::TypeDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeDecl;
}


std::any ObjectPascalParser::TypeDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::typeDecl() {
  TypeDeclContext *_localctx = _tracker.createInstance<TypeDeclContext>(_ctx, getState());
  enterRule(_localctx, 36, ObjectPascalParser::RuleTypeDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(426);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(408);
      match(ObjectPascalParser::Ident);
      setState(409);
      match(ObjectPascalParser::ASSIGN);
      setState(411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(410);
        match(ObjectPascalParser::TYPE_);
      }
      setState(413);
      type();
      setState(415);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(414);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(417);
      match(ObjectPascalParser::Ident);
      setState(418);
      match(ObjectPascalParser::ASSIGN);
      setState(420);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(419);
        match(ObjectPascalParser::TYPE_);
      }
      setState(422);
      restrictedType();
      setState(424);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(423);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedConstantContext ------------------------------------------------------------------

ObjectPascalParser::TypedConstantContext::TypedConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::TypedConstantContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::TypedConstantContext::arrayConstant() {
  return getRuleContext<ObjectPascalParser::ArrayConstantContext>(0);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::TypedConstantContext::recordConstant() {
  return getRuleContext<ObjectPascalParser::RecordConstantContext>(0);
}


size_t ObjectPascalParser::TypedConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypedConstant;
}


std::any ObjectPascalParser::TypedConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypedConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::typedConstant() {
  TypedConstantContext *_localctx = _tracker.createInstance<TypedConstantContext>(_ctx, getState());
  enterRule(_localctx, 38, ObjectPascalParser::RuleTypedConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(428);
      constExpr();
      break;
    }

    case 2: {
      setState(429);
      arrayConstant();
      break;
    }

    case 3: {
      setState(430);
      recordConstant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstantContext ------------------------------------------------------------------

ObjectPascalParser::ArrayConstantContext::ArrayConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::TypedConstantContext *> ObjectPascalParser::ArrayConstantContext::typedConstant() {
  return getRuleContexts<ObjectPascalParser::TypedConstantContext>();
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ArrayConstantContext::typedConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayConstantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayConstant;
}


std::any ObjectPascalParser::ArrayConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::arrayConstant() {
  ArrayConstantContext *_localctx = _tracker.createInstance<ArrayConstantContext>(_ctx, getState());
  enterRule(_localctx, 40, ObjectPascalParser::RuleArrayConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(433);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(434);
    typedConstant();
    setState(439);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(435);
      match(ObjectPascalParser::COMMA);
      setState(436);
      typedConstant();
      setState(441);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(442);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordConstantContext::RecordConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::RecordFieldConstantContext *> ObjectPascalParser::RecordConstantContext::recordFieldConstant() {
  return getRuleContexts<ObjectPascalParser::RecordFieldConstantContext>();
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::RecordConstantContext::recordFieldConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecordFieldConstantContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecordConstantContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::RecordConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordConstant;
}


std::any ObjectPascalParser::RecordConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::recordConstant() {
  RecordConstantContext *_localctx = _tracker.createInstance<RecordConstantContext>(_ctx, getState());
  enterRule(_localctx, 42, ObjectPascalParser::RuleRecordConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(444);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(450);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Ident) {
      setState(445);
      recordFieldConstant();
      setState(446);
      match(ObjectPascalParser::SEMI);
      setState(452);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(453);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordFieldConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordFieldConstantContext::RecordFieldConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::RecordFieldConstantContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::RecordFieldConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordFieldConstant;
}


std::any ObjectPascalParser::RecordFieldConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordFieldConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::recordFieldConstant() {
  RecordFieldConstantContext *_localctx = _tracker.createInstance<RecordFieldConstantContext>(_ctx, getState());
  enterRule(_localctx, 44, ObjectPascalParser::RuleRecordFieldConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(455);
    match(ObjectPascalParser::Ident);
    setState(456);
    match(ObjectPascalParser::COLON);
    setState(457);
    typedConstant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

ObjectPascalParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::TypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::TypeContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::TypeContext::strucType() {
  return getRuleContext<ObjectPascalParser::StrucTypeContext>(0);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::TypeContext::pointerType() {
  return getRuleContext<ObjectPascalParser::PointerTypeContext>(0);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::TypeContext::stringType() {
  return getRuleContext<ObjectPascalParser::StringTypeContext>(0);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::TypeContext::procedureType() {
  return getRuleContext<ObjectPascalParser::ProcedureTypeContext>(0);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::TypeContext::variantType() {
  return getRuleContext<ObjectPascalParser::VariantTypeContext>(0);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::TypeContext::classRefType() {
  return getRuleContext<ObjectPascalParser::ClassRefTypeContext>(0);
}


size_t ObjectPascalParser::TypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleType;
}


std::any ObjectPascalParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 46, ObjectPascalParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(467);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(459);
      typeId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(460);
      simpleType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(461);
      strucType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(462);
      pointerType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(463);
      stringType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(464);
      procedureType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(465);
      variantType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(466);
      classRefType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestrictedTypeContext ------------------------------------------------------------------

ObjectPascalParser::RestrictedTypeContext::RestrictedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::RestrictedTypeContext::objectType() {
  return getRuleContext<ObjectPascalParser::ObjectTypeContext>(0);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::RestrictedTypeContext::classType() {
  return getRuleContext<ObjectPascalParser::ClassTypeContext>(0);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::RestrictedTypeContext::interfaceType() {
  return getRuleContext<ObjectPascalParser::InterfaceTypeContext>(0);
}


size_t ObjectPascalParser::RestrictedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRestrictedType;
}


std::any ObjectPascalParser::RestrictedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRestrictedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::restrictedType() {
  RestrictedTypeContext *_localctx = _tracker.createInstance<RestrictedTypeContext>(_ctx, getState());
  enterRule(_localctx, 48, ObjectPascalParser::RuleRestrictedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(472);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::OBJECT: {
        enterOuterAlt(_localctx, 1);
        setState(469);
        objectType();
        break;
      }

      case ObjectPascalParser::CLASS: {
        enterOuterAlt(_localctx, 2);
        setState(470);
        classType();
        break;
      }

      case ObjectPascalParser::INTERFACE: {
        enterOuterAlt(_localctx, 3);
        setState(471);
        interfaceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassRefTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassRefTypeContext::ClassRefTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ClassRefTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::ClassRefTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassRefType;
}


std::any ObjectPascalParser::ClassRefTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassRefType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::classRefType() {
  ClassRefTypeContext *_localctx = _tracker.createInstance<ClassRefTypeContext>(_ctx, getState());
  enterRule(_localctx, 50, ObjectPascalParser::RuleClassRefType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(474);
    match(ObjectPascalParser::CLASS);
    setState(475);
    match(ObjectPascalParser::OF);
    setState(476);
    typeId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

ObjectPascalParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SimpleTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::SimpleTypeContext::realType() {
  return getRuleContext<ObjectPascalParser::RealTypeContext>(0);
}


size_t ObjectPascalParser::SimpleTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleType;
}


std::any ObjectPascalParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 52, ObjectPascalParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::DOT_DOT:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::PLUS:
      case ObjectPascalParser::MINUS:
      case ObjectPascalParser::STAR:
      case ObjectPascalParser::SHARP:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::StringLiteral:
      case ObjectPascalParser::HEXADECIMALDIGIT:
      case ObjectPascalParser::OCTALDIGIT:
      case ObjectPascalParser::DIGIT: {
        setState(478);
        ordinalType();
        break;
      }

      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::REAL48: {
        setState(479);
        realType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RealTypeContext ------------------------------------------------------------------

ObjectPascalParser::RealTypeContext::RealTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL48() {
  return getToken(ObjectPascalParser::REAL48, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::SINGLE() {
  return getToken(ObjectPascalParser::SINGLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::DOUBLE() {
  return getToken(ObjectPascalParser::DOUBLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::EXTENDED() {
  return getToken(ObjectPascalParser::EXTENDED, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::CURRENCY() {
  return getToken(ObjectPascalParser::CURRENCY, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::COMP() {
  return getToken(ObjectPascalParser::COMP, 0);
}


size_t ObjectPascalParser::RealTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRealType;
}


std::any ObjectPascalParser::RealTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRealType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::realType() {
  RealTypeContext *_localctx = _tracker.createInstance<RealTypeContext>(_ctx, getState());
  enterRule(_localctx, 54, ObjectPascalParser::RuleRealType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::SINGLE)
      | (1ULL << ObjectPascalParser::DOUBLE)
      | (1ULL << ObjectPascalParser::EXTENDED)
      | (1ULL << ObjectPascalParser::CURRENCY)
      | (1ULL << ObjectPascalParser::COMP))) != 0) || _la == ObjectPascalParser::REAL48)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinalTypeContext ------------------------------------------------------------------

ObjectPascalParser::OrdinalTypeContext::OrdinalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::OrdinalTypeContext::subrangeType() {
  return getRuleContext<ObjectPascalParser::SubrangeTypeContext>(0);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::OrdinalTypeContext::enumeratedType() {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeContext>(0);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::OrdinalTypeContext::ordIdent() {
  return getRuleContext<ObjectPascalParser::OrdIdentContext>(0);
}


size_t ObjectPascalParser::OrdinalTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdinalType;
}


std::any ObjectPascalParser::OrdinalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdinalType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ordinalType() {
  OrdinalTypeContext *_localctx = _tracker.createInstance<OrdinalTypeContext>(_ctx, getState());
  enterRule(_localctx, 56, ObjectPascalParser::RuleOrdinalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::DOT_DOT:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::PLUS:
      case ObjectPascalParser::MINUS:
      case ObjectPascalParser::STAR:
      case ObjectPascalParser::SHARP:
      case ObjectPascalParser::StringLiteral:
      case ObjectPascalParser::HEXADECIMALDIGIT:
      case ObjectPascalParser::OCTALDIGIT:
      case ObjectPascalParser::DIGIT: {
        setState(484);
        subrangeType();
        break;
      }

      case ObjectPascalParser::LEFT_PAREN: {
        setState(485);
        enumeratedType();
        break;
      }

      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD: {
        setState(486);
        ordIdent();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdIdentContext ------------------------------------------------------------------

ObjectPascalParser::OrdIdentContext::OrdIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SHORTINT() {
  return getToken(ObjectPascalParser::SHORTINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SMALLINT() {
  return getToken(ObjectPascalParser::SMALLINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CARDINAL() {
  return getToken(ObjectPascalParser::CARDINAL, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGINT() {
  return getToken(ObjectPascalParser::LONGINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INT64() {
  return getToken(ObjectPascalParser::INT64, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WORD() {
  return getToken(ObjectPascalParser::WORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WIDECHAR() {
  return getToken(ObjectPascalParser::WIDECHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGWORD() {
  return getToken(ObjectPascalParser::LONGWORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::PCHAR() {
  return getToken(ObjectPascalParser::PCHAR, 0);
}


size_t ObjectPascalParser::OrdIdentContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdIdent;
}


std::any ObjectPascalParser::OrdIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdIdent(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::ordIdent() {
  OrdIdentContext *_localctx = _tracker.createInstance<OrdIdentContext>(_ctx, getState());
  enterRule(_localctx, 58, ObjectPascalParser::RuleOrdIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(489);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::SHORTINT)
      | (1ULL << ObjectPascalParser::SMALLINT)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::LONGINT)
      | (1ULL << ObjectPascalParser::WORD)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR)
      | (1ULL << ObjectPascalParser::WIDECHAR)
      | (1ULL << ObjectPascalParser::PCHAR))) != 0) || ((((_la - 170) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 170)) & ((1ULL << (ObjectPascalParser::CARDINAL - 170))
      | (1ULL << (ObjectPascalParser::INT64 - 170))
      | (1ULL << (ObjectPascalParser::LONGWORD - 170)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantTypeContext ------------------------------------------------------------------

ObjectPascalParser::VariantTypeContext::VariantTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::VARIANT() {
  return getToken(ObjectPascalParser::VARIANT, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::OLEVARIANT() {
  return getToken(ObjectPascalParser::OLEVARIANT, 0);
}


size_t ObjectPascalParser::VariantTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantType;
}


std::any ObjectPascalParser::VariantTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::variantType() {
  VariantTypeContext *_localctx = _tracker.createInstance<VariantTypeContext>(_ctx, getState());
  enterRule(_localctx, 60, ObjectPascalParser::RuleVariantType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(491);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::VARIANT

    || _la == ObjectPascalParser::OLEVARIANT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubrangeTypeContext ------------------------------------------------------------------

ObjectPascalParser::SubrangeTypeContext::SubrangeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::SubrangeTypeContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::SubrangeTypeContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SubrangeTypeContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::SubrangeTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSubrangeType;
}


std::any ObjectPascalParser::SubrangeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSubrangeType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::subrangeType() {
  SubrangeTypeContext *_localctx = _tracker.createInstance<SubrangeTypeContext>(_ctx, getState());
  enterRule(_localctx, 62, ObjectPascalParser::RuleSubrangeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(493);
    constExpr();
    setState(494);
    match(ObjectPascalParser::DOT_DOT);
    setState(495);
    constExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeContext::EnumeratedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::EnumeratedTypeElementContext *> ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement() {
  return getRuleContexts<ObjectPascalParser::EnumeratedTypeElementContext>();
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement(size_t i) {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::EnumeratedTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::EnumeratedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedType;
}


std::any ObjectPascalParser::EnumeratedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::enumeratedType() {
  EnumeratedTypeContext *_localctx = _tracker.createInstance<EnumeratedTypeContext>(_ctx, getState());
  enterRule(_localctx, 64, ObjectPascalParser::RuleEnumeratedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(498);
    enumeratedTypeElement();
    setState(503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(499);
      match(ObjectPascalParser::COMMA);
      setState(500);
      enumeratedTypeElement();
      setState(505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(506);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeElementContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeElementContext::EnumeratedTypeElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::EnumeratedTypeElementContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::EnumeratedTypeElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedTypeElement;
}


std::any ObjectPascalParser::EnumeratedTypeElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedTypeElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::enumeratedTypeElement() {
  EnumeratedTypeElementContext *_localctx = _tracker.createInstance<EnumeratedTypeElementContext>(_ctx, getState());
  enterRule(_localctx, 66, ObjectPascalParser::RuleEnumeratedTypeElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    match(ObjectPascalParser::Ident);
    setState(511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ASSIGN) {
      setState(509);
      match(ObjectPascalParser::ASSIGN);
      setState(510);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringTypeContext ------------------------------------------------------------------

ObjectPascalParser::StringTypeContext::StringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::ANSISTRING() {
  return getToken(ObjectPascalParser::ANSISTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::WIDESTRING() {
  return getToken(ObjectPascalParser::WIDESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::UNICODESTRING() {
  return getToken(ObjectPascalParser::UNICODESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::StringTypeContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}


size_t ObjectPascalParser::StringTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStringType;
}


std::any ObjectPascalParser::StringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStringType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::stringType() {
  StringTypeContext *_localctx = _tracker.createInstance<StringTypeContext>(_ctx, getState());
  enterRule(_localctx, 68, ObjectPascalParser::RuleStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(522);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(513);
      match(ObjectPascalParser::STRING);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(514);
      match(ObjectPascalParser::ANSISTRING);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(515);
      match(ObjectPascalParser::WIDESTRING);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(516);
      match(ObjectPascalParser::UNICODESTRING);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(517);
      match(ObjectPascalParser::STRING);
      setState(518);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(519);
      constExpr();
      setState(520);
      match(ObjectPascalParser::RIGHT_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrucTypeContext ------------------------------------------------------------------

ObjectPascalParser::StrucTypeContext::StrucTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::StrucTypeContext::arrayType() {
  return getRuleContext<ObjectPascalParser::ArrayTypeContext>(0);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::StrucTypeContext::setType() {
  return getRuleContext<ObjectPascalParser::SetTypeContext>(0);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::StrucTypeContext::fileType() {
  return getRuleContext<ObjectPascalParser::FileTypeContext>(0);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::StrucTypeContext::recType() {
  return getRuleContext<ObjectPascalParser::RecTypeContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StrucTypeContext::PACKED() {
  return getTokens(ObjectPascalParser::PACKED);
}

tree::TerminalNode* ObjectPascalParser::StrucTypeContext::PACKED(size_t i) {
  return getToken(ObjectPascalParser::PACKED, i);
}


size_t ObjectPascalParser::StrucTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStrucType;
}


std::any ObjectPascalParser::StrucTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStrucType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::strucType() {
  StrucTypeContext *_localctx = _tracker.createInstance<StrucTypeContext>(_ctx, getState());
  enterRule(_localctx, 70, ObjectPascalParser::RuleStrucType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(525);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::PACKED) {
      setState(524);
      match(ObjectPascalParser::PACKED);
    }
    setState(534);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ARRAY: {
        setState(527);
        arrayType();
        break;
      }

      case ObjectPascalParser::SET: {
        setState(528);
        setType();
        break;
      }

      case ObjectPascalParser::FILE: {
        setState(529);
        fileType();
        break;
      }

      case ObjectPascalParser::RECORD: {
        setState(530);
        recType();
        setState(532);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::PACKED) {
          setState(531);
          match(ObjectPascalParser::PACKED);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

ObjectPascalParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::ARRAY() {
  return getToken(ObjectPascalParser::ARRAY, 0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ArrayTypeContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::OrdinalTypeContext *> ObjectPascalParser::ArrayTypeContext::ordinalType() {
  return getRuleContexts<ObjectPascalParser::OrdinalTypeContext>();
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ArrayTypeContext::ordinalType(size_t i) {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ArrayTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayType;
}


std::any ObjectPascalParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 72, ObjectPascalParser::RuleArrayType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(536);
    match(ObjectPascalParser::ARRAY);
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(537);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(538);
      ordinalType();
      setState(543);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectPascalParser::COMMA) {
        setState(539);
        match(ObjectPascalParser::COMMA);
        setState(540);
        ordinalType();
        setState(545);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(546);
      match(ObjectPascalParser::RIGHT_BRACKET);
    }
    setState(550);
    match(ObjectPascalParser::OF);
    setState(551);
    type();
    setState(553);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(552);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecTypeContext ------------------------------------------------------------------

ObjectPascalParser::RecTypeContext::RecTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::RECORD() {
  return getToken(ObjectPascalParser::RECORD, 0);
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecTypeContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::RecTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::RecTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecType;
}


std::any ObjectPascalParser::RecTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::recType() {
  RecTypeContext *_localctx = _tracker.createInstance<RecTypeContext>(_ctx, getState());
  enterRule(_localctx, 74, ObjectPascalParser::RuleRecType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    match(ObjectPascalParser::RECORD);
    setState(557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(556);
      fieldList();
    }
    setState(559);
    match(ObjectPascalParser::END);
    setState(561);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(560);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldListContext ------------------------------------------------------------------

ObjectPascalParser::FieldListContext::FieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FieldDeclContext *> ObjectPascalParser::FieldListContext::fieldDecl() {
  return getRuleContexts<ObjectPascalParser::FieldDeclContext>();
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::FieldListContext::fieldDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::FieldDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FieldListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FieldListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::FieldListContext::variantSection() {
  return getRuleContext<ObjectPascalParser::VariantSectionContext>(0);
}


size_t ObjectPascalParser::FieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldList;
}


std::any ObjectPascalParser::FieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::fieldList() {
  FieldListContext *_localctx = _tracker.createInstance<FieldListContext>(_ctx, getState());
  enterRule(_localctx, 76, ObjectPascalParser::RuleFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(566); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(563);
      fieldDecl();
      setState(564);
      match(ObjectPascalParser::SEMI);
      setState(568); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
    setState(571);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CASE) {
      setState(570);
      variantSection();
    }
    setState(574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(573);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclContext ------------------------------------------------------------------

ObjectPascalParser::FieldDeclContext::FieldDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::FieldDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FieldDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::FieldDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FieldDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FieldDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldDecl;
}


std::any ObjectPascalParser::FieldDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::fieldDecl() {
  FieldDeclContext *_localctx = _tracker.createInstance<FieldDeclContext>(_ctx, getState());
  enterRule(_localctx, 78, ObjectPascalParser::RuleFieldDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(576);
    identList();
    setState(577);
    match(ObjectPascalParser::COLON);
    setState(578);
    type();
    setState(580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(579);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantSectionContext ------------------------------------------------------------------

ObjectPascalParser::VariantSectionContext::VariantSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::VariantSectionContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

std::vector<ObjectPascalParser::RecVariantContext *> ObjectPascalParser::VariantSectionContext::recVariant() {
  return getRuleContexts<ObjectPascalParser::RecVariantContext>();
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::VariantSectionContext::recVariant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecVariantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VariantSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VariantSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantSection;
}


std::any ObjectPascalParser::VariantSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::variantSection() {
  VariantSectionContext *_localctx = _tracker.createInstance<VariantSectionContext>(_ctx, getState());
  enterRule(_localctx, 80, ObjectPascalParser::RuleVariantSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(582);
    match(ObjectPascalParser::CASE);
    setState(585);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(583);
      match(ObjectPascalParser::Ident);
      setState(584);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(587);
    typeId();
    setState(588);
    match(ObjectPascalParser::OF);
    setState(589);
    recVariant();
    setState(594);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(590);
        match(ObjectPascalParser::SEMI);
        setState(591);
        recVariant(); 
      }
      setState(596);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecVariantContext ------------------------------------------------------------------

ObjectPascalParser::RecVariantContext::RecVariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::RecVariantContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::RecVariantContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecVariantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecVariantContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}


size_t ObjectPascalParser::RecVariantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecVariant;
}


std::any ObjectPascalParser::RecVariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecVariant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::recVariant() {
  RecVariantContext *_localctx = _tracker.createInstance<RecVariantContext>(_ctx, getState());
  enterRule(_localctx, 82, ObjectPascalParser::RuleRecVariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(597);
    constExpr();
    setState(602);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(598);
      match(ObjectPascalParser::COMMA);
      setState(599);
      constExpr();
      setState(604);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(605);
    match(ObjectPascalParser::COLON);
    setState(606);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(607);
      fieldList();
    }
    setState(610);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTypeContext ------------------------------------------------------------------

ObjectPascalParser::SetTypeContext::SetTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::SET() {
  return getToken(ObjectPascalParser::SET, 0);
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SetTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::SetTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::SetTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetType;
}


std::any ObjectPascalParser::SetTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::setType() {
  SetTypeContext *_localctx = _tracker.createInstance<SetTypeContext>(_ctx, getState());
  enterRule(_localctx, 84, ObjectPascalParser::RuleSetType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(612);
    match(ObjectPascalParser::SET);
    setState(613);
    match(ObjectPascalParser::OF);
    setState(614);
    ordinalType();
    setState(616);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(615);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileTypeContext ------------------------------------------------------------------

ObjectPascalParser::FileTypeContext::FileTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FileTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FileTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FileTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFileType;
}


std::any ObjectPascalParser::FileTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFileType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::fileType() {
  FileTypeContext *_localctx = _tracker.createInstance<FileTypeContext>(_ctx, getState());
  enterRule(_localctx, 86, ObjectPascalParser::RuleFileType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(618);
    match(ObjectPascalParser::FILE);
    setState(619);
    match(ObjectPascalParser::OF);
    setState(620);
    typeId();
    setState(622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      setState(621);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerTypeContext ------------------------------------------------------------------

ObjectPascalParser::PointerTypeContext::PointerTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PointerTypeContext::CARET() {
  return getToken(ObjectPascalParser::CARET, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PointerTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PointerTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PointerTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePointerType;
}


std::any ObjectPascalParser::PointerTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPointerType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::pointerType() {
  PointerTypeContext *_localctx = _tracker.createInstance<PointerTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, ObjectPascalParser::RulePointerType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(624);
    match(ObjectPascalParser::CARET);
    setState(625);
    typeId();
    setState(627);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(626);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureTypeContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureTypeContext::ProcedureTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureTypeContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ProcedureTypeContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}


size_t ObjectPascalParser::ProcedureTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureType;
}


std::any ObjectPascalParser::ProcedureTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::procedureType() {
  ProcedureTypeContext *_localctx = _tracker.createInstance<ProcedureTypeContext>(_ctx, getState());
  enterRule(_localctx, 90, ObjectPascalParser::RuleProcedureType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(631);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        setState(629);
        procedureHeading();
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        setState(630);
        functionHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::OF) {
      setState(633);
      match(ObjectPascalParser::OF);
      setState(634);
      match(ObjectPascalParser::OBJECT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarSectionContext ------------------------------------------------------------------

ObjectPascalParser::VarSectionContext::VarSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::VAR() {
  return getToken(ObjectPascalParser::VAR, 0);
}

std::vector<ObjectPascalParser::VarDeclContext *> ObjectPascalParser::VarSectionContext::varDecl() {
  return getRuleContexts<ObjectPascalParser::VarDeclContext>();
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::VarSectionContext::varDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::VarDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VarSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VarSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarSection;
}


std::any ObjectPascalParser::VarSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::varSection() {
  VarSectionContext *_localctx = _tracker.createInstance<VarSectionContext>(_ctx, getState());
  enterRule(_localctx, 92, ObjectPascalParser::RuleVarSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(637);
    match(ObjectPascalParser::VAR);
    setState(638);
    varDecl();
    setState(643);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(639);
      match(ObjectPascalParser::SEMI);
      setState(640);
      varDecl();
      setState(645);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

ObjectPascalParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::VarDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::VarDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::VarDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::VarDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ABSOLUTE() {
  return getToken(ObjectPascalParser::ABSOLUTE, 0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}


size_t ObjectPascalParser::VarDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarDecl;
}


std::any ObjectPascalParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 94, ObjectPascalParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(646);
    identList();
    setState(647);
    match(ObjectPascalParser::COLON);
    setState(648);
    type();
    setState(656);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ABSOLUTE: {
        setState(649);
        match(ObjectPascalParser::ABSOLUTE);
        setState(652);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::Ident: {
            setState(650);
            match(ObjectPascalParser::Ident);
            break;
          }

          case ObjectPascalParser::END:
          case ObjectPascalParser::LIBRARY:
          case ObjectPascalParser::IMPLEMENTATION:
          case ObjectPascalParser::INITIALIZATION:
          case ObjectPascalParser::LABEL:
          case ObjectPascalParser::CONST:
          case ObjectPascalParser::TYPE_:
          case ObjectPascalParser::SEMI:
          case ObjectPascalParser::CARET:
          case ObjectPascalParser::PLUS:
          case ObjectPascalParser::MINUS:
          case ObjectPascalParser::STAR:
          case ObjectPascalParser::SHARP:
          case ObjectPascalParser::PLATFORM:
          case ObjectPascalParser::DEPRECATED:
          case ObjectPascalParser::StringLiteral:
          case ObjectPascalParser::VAR:
          case ObjectPascalParser::FUNCTION:
          case ObjectPascalParser::PROCEDURE:
          case ObjectPascalParser::BEGIN:
          case ObjectPascalParser::HEXADECIMALDIGIT:
          case ObjectPascalParser::OCTALDIGIT:
          case ObjectPascalParser::DIGIT: {
            setState(651);
            constExpr();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::ASSIGN: {
        setState(654);
        match(ObjectPascalParser::ASSIGN);
        setState(655);
        constExpr();
        break;
      }

      case ObjectPascalParser::END:
      case ObjectPascalParser::LIBRARY:
      case ObjectPascalParser::IMPLEMENTATION:
      case ObjectPascalParser::INITIALIZATION:
      case ObjectPascalParser::LABEL:
      case ObjectPascalParser::CONST:
      case ObjectPascalParser::TYPE_:
      case ObjectPascalParser::SEMI:
      case ObjectPascalParser::PLATFORM:
      case ObjectPascalParser::DEPRECATED:
      case ObjectPascalParser::VAR:
      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE:
      case ObjectPascalParser::BEGIN: {
        break;
      }

    default:
      break;
    }
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(658);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

ObjectPascalParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::SimpleGroupedContext *> ObjectPascalParser::ExpressionContext::simpleGrouped() {
  return getRuleContexts<ObjectPascalParser::SimpleGroupedContext>();
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::ExpressionContext::simpleGrouped(size_t i) {
  return getRuleContext<ObjectPascalParser::SimpleGroupedContext>(i);
}

std::vector<ObjectPascalParser::RelOpContext *> ObjectPascalParser::ExpressionContext::relOp() {
  return getRuleContexts<ObjectPascalParser::RelOpContext>();
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::ExpressionContext::relOp(size_t i) {
  return getRuleContext<ObjectPascalParser::RelOpContext>(i);
}


size_t ObjectPascalParser::ExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExpression;
}


std::any ObjectPascalParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 96, ObjectPascalParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    simpleGrouped();
    setState(667);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::IN || ((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & ((1ULL << (ObjectPascalParser::IS - 101))
      | (1ULL << (ObjectPascalParser::GRATER - 101))
      | (1ULL << (ObjectPascalParser::LESS - 101))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 101))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 101))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 101)))) != 0) || _la == ObjectPascalParser::AS) {
      setState(662);
      relOp();
      setState(663);
      simpleGrouped();
      setState(669);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleGroupedContext ------------------------------------------------------------------

ObjectPascalParser::SimpleGroupedContext::SimpleGroupedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::SimpleGroupedContext::simpleExpression() {
  return getRuleContext<ObjectPascalParser::SimpleExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::SimpleGroupedContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleGrouped;
}


std::any ObjectPascalParser::SimpleGroupedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleGrouped(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::simpleGrouped() {
  SimpleGroupedContext *_localctx = _tracker.createInstance<SimpleGroupedContext>(_ctx, getState());
  enterRule(_localctx, 98, ObjectPascalParser::RuleSimpleGrouped);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(675);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(670);
      simpleExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(671);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(672);
      simpleExpression();
      setState(673);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleExpressionContext ------------------------------------------------------------------

ObjectPascalParser::SimpleExpressionContext::SimpleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::TermContext *> ObjectPascalParser::SimpleExpressionContext::term() {
  return getRuleContexts<ObjectPascalParser::TermContext>();
}

ObjectPascalParser::TermContext* ObjectPascalParser::SimpleExpressionContext::term(size_t i) {
  return getRuleContext<ObjectPascalParser::TermContext>(i);
}

std::vector<ObjectPascalParser::AddOpContext *> ObjectPascalParser::SimpleExpressionContext::addOp() {
  return getRuleContexts<ObjectPascalParser::AddOpContext>();
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::SimpleExpressionContext::addOp(size_t i) {
  return getRuleContext<ObjectPascalParser::AddOpContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SimpleExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleExpression;
}


std::any ObjectPascalParser::SimpleExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::simpleExpression() {
  SimpleExpressionContext *_localctx = _tracker.createInstance<SimpleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 100, ObjectPascalParser::RuleSimpleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(678);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      setState(677);
      _la = _input->LA(1);
      if (!(_la == ObjectPascalParser::PLUS

      || _la == ObjectPascalParser::MINUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(680);
    term();
    setState(686);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & ((1ULL << (ObjectPascalParser::OR - 102))
      | (1ULL << (ObjectPascalParser::XOR - 102))
      | (1ULL << (ObjectPascalParser::PLUS - 102))
      | (1ULL << (ObjectPascalParser::MINUS - 102)))) != 0)) {
      setState(681);
      addOp();
      setState(682);
      term();
      setState(688);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

ObjectPascalParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FactorContext *> ObjectPascalParser::TermContext::factor() {
  return getRuleContexts<ObjectPascalParser::FactorContext>();
}

ObjectPascalParser::FactorContext* ObjectPascalParser::TermContext::factor(size_t i) {
  return getRuleContext<ObjectPascalParser::FactorContext>(i);
}

std::vector<ObjectPascalParser::MulOpContext *> ObjectPascalParser::TermContext::mulOp() {
  return getRuleContexts<ObjectPascalParser::MulOpContext>();
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::TermContext::mulOp(size_t i) {
  return getRuleContext<ObjectPascalParser::MulOpContext>(i);
}


size_t ObjectPascalParser::TermContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTerm;
}


std::any ObjectPascalParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TermContext* ObjectPascalParser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 102, ObjectPascalParser::RuleTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(689);
    factor();
    setState(695);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (ObjectPascalParser::MOD - 105))
      | (1ULL << (ObjectPascalParser::SHL - 105))
      | (1ULL << (ObjectPascalParser::SHR - 105))
      | (1ULL << (ObjectPascalParser::STAR - 105))
      | (1ULL << (ObjectPascalParser::DIV_ - 105)))) != 0) || _la == ObjectPascalParser::DIV

    || _la == ObjectPascalParser::AND) {
      setState(690);
      mulOp();
      setState(691);
      factor();
      setState(697);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

ObjectPascalParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::FactorContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::FactorContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::DOG() {
  return getToken(ObjectPascalParser::DOG, 0);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::FactorContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::FactorContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NIL() {
  return getToken(ObjectPascalParser::NIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::FactorContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NOT() {
  return getToken(ObjectPascalParser::NOT, 0);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::FactorContext::factor() {
  return getRuleContext<ObjectPascalParser::FactorContext>(0);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::FactorContext::setConstructor() {
  return getRuleContext<ObjectPascalParser::SetConstructorContext>(0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FactorContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::FactorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFactor;
}


std::any ObjectPascalParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 104, ObjectPascalParser::RuleFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(698);
      designator();
      setState(703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LEFT_PAREN) {
        setState(699);
        match(ObjectPascalParser::LEFT_PAREN);
        setState(700);
        exprList();
        setState(701);
        match(ObjectPascalParser::RIGHT_PAREN);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(705);
      match(ObjectPascalParser::DOG);
      setState(706);
      designator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(707);
      number();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(708);
      string();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(709);
      match(ObjectPascalParser::NIL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(710);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(711);
      expression();
      setState(712);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(714);
      match(ObjectPascalParser::NOT);
      setState(715);
      factor();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(716);
      setConstructor();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(717);
      typeId();
      setState(718);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(719);
      expression();
      setState(720);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelOpContext ------------------------------------------------------------------

ObjectPascalParser::RelOpContext::RelOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER() {
  return getToken(ObjectPascalParser::GRATER, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS() {
  return getToken(ObjectPascalParser::LESS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS_EQUAL() {
  return getToken(ObjectPascalParser::LESS_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER_EQUAL() {
  return getToken(ObjectPascalParser::GRATER_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::NOT_EQUAL() {
  return getToken(ObjectPascalParser::NOT_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IN() {
  return getToken(ObjectPascalParser::IN, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IS() {
  return getToken(ObjectPascalParser::IS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::AS() {
  return getToken(ObjectPascalParser::AS, 0);
}


size_t ObjectPascalParser::RelOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRelOp;
}


std::any ObjectPascalParser::RelOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRelOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::relOp() {
  RelOpContext *_localctx = _tracker.createInstance<RelOpContext>(_ctx, getState());
  enterRule(_localctx, 106, ObjectPascalParser::RuleRelOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::IN || ((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & ((1ULL << (ObjectPascalParser::IS - 101))
      | (1ULL << (ObjectPascalParser::GRATER - 101))
      | (1ULL << (ObjectPascalParser::LESS - 101))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 101))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 101))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 101)))) != 0) || _la == ObjectPascalParser::AS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddOpContext ------------------------------------------------------------------

ObjectPascalParser::AddOpContext::AddOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::OR() {
  return getToken(ObjectPascalParser::OR, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::XOR() {
  return getToken(ObjectPascalParser::XOR, 0);
}


size_t ObjectPascalParser::AddOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAddOp;
}


std::any ObjectPascalParser::AddOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAddOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::addOp() {
  AddOpContext *_localctx = _tracker.createInstance<AddOpContext>(_ctx, getState());
  enterRule(_localctx, 108, ObjectPascalParser::RuleAddOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    _la = _input->LA(1);
    if (!(((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & ((1ULL << (ObjectPascalParser::OR - 102))
      | (1ULL << (ObjectPascalParser::XOR - 102))
      | (1ULL << (ObjectPascalParser::PLUS - 102))
      | (1ULL << (ObjectPascalParser::MINUS - 102)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulOpContext ------------------------------------------------------------------

ObjectPascalParser::MulOpContext::MulOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::DIV_() {
  return getToken(ObjectPascalParser::DIV_, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::DIV() {
  return getToken(ObjectPascalParser::DIV, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::MOD() {
  return getToken(ObjectPascalParser::MOD, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::AND() {
  return getToken(ObjectPascalParser::AND, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHL() {
  return getToken(ObjectPascalParser::SHL, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHR() {
  return getToken(ObjectPascalParser::SHR, 0);
}


size_t ObjectPascalParser::MulOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMulOp;
}


std::any ObjectPascalParser::MulOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMulOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::mulOp() {
  MulOpContext *_localctx = _tracker.createInstance<MulOpContext>(_ctx, getState());
  enterRule(_localctx, 110, ObjectPascalParser::RuleMulOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    _la = _input->LA(1);
    if (!(((((_la - 105) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 105)) & ((1ULL << (ObjectPascalParser::MOD - 105))
      | (1ULL << (ObjectPascalParser::SHL - 105))
      | (1ULL << (ObjectPascalParser::SHR - 105))
      | (1ULL << (ObjectPascalParser::STAR - 105))
      | (1ULL << (ObjectPascalParser::DIV_ - 105)))) != 0) || _la == ObjectPascalParser::DIV

    || _la == ObjectPascalParser::AND)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveOpContext ------------------------------------------------------------------

ObjectPascalParser::AdditiveOpContext::AdditiveOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}


size_t ObjectPascalParser::AdditiveOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAdditiveOp;
}


std::any ObjectPascalParser::AdditiveOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::additiveOp() {
  AdditiveOpContext *_localctx = _tracker.createInstance<AdditiveOpContext>(_ctx, getState());
  enterRule(_localctx, 112, ObjectPascalParser::RuleAdditiveOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(730);
    _la = _input->LA(1);
    if (!(((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & ((1ULL << (ObjectPascalParser::PLUS - 158))
      | (1ULL << (ObjectPascalParser::MINUS - 158))
      | (1ULL << (ObjectPascalParser::STAR - 158)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

ObjectPascalParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::DesignatorContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::DOT() {
  return getTokens(ObjectPascalParser::DOT);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::DOT(size_t i) {
  return getToken(ObjectPascalParser::DOT, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::LEFT_BRACKET() {
  return getTokens(ObjectPascalParser::LEFT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::LEFT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::LEFT_BRACKET, i);
}

std::vector<ObjectPascalParser::ExprListContext *> ObjectPascalParser::DesignatorContext::exprList() {
  return getRuleContexts<ObjectPascalParser::ExprListContext>();
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::DesignatorContext::exprList(size_t i) {
  return getRuleContext<ObjectPascalParser::ExprListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::RIGHT_BRACKET() {
  return getTokens(ObjectPascalParser::RIGHT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::RIGHT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::DesignatorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDesignator;
}


std::any ObjectPascalParser::DesignatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDesignator(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 114, ObjectPascalParser::RuleDesignator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(732);
    qualId();
    setState(742);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(740);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::DOT: {
            setState(733);
            match(ObjectPascalParser::DOT);
            setState(734);
            match(ObjectPascalParser::Ident);
            break;
          }

          case ObjectPascalParser::LEFT_BRACKET: {
            setState(735);
            match(ObjectPascalParser::LEFT_BRACKET);
            setState(736);
            exprList();
            setState(737);
            match(ObjectPascalParser::RIGHT_BRACKET);
            break;
          }

          case ObjectPascalParser::CARET: {
            setState(739);
            match(ObjectPascalParser::CARET);
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(744);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetConstructorContext ------------------------------------------------------------------

ObjectPascalParser::SetConstructorContext::SetConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::SetElementContext *> ObjectPascalParser::SetConstructorContext::setElement() {
  return getRuleContexts<ObjectPascalParser::SetElementContext>();
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::SetConstructorContext::setElement(size_t i) {
  return getRuleContext<ObjectPascalParser::SetElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::SetConstructorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::SetConstructorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetConstructor;
}


std::any ObjectPascalParser::SetConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetConstructor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::setConstructor() {
  SetConstructorContext *_localctx = _tracker.createInstance<SetConstructorContext>(_ctx, getState());
  enterRule(_localctx, 116, ObjectPascalParser::RuleSetConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(745);
    match(ObjectPascalParser::LEFT_BRACKET);
    setState(746);
    setElement();
    setState(751);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(747);
      match(ObjectPascalParser::COMMA);
      setState(748);
      setElement();
      setState(753);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(754);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetElementContext ------------------------------------------------------------------

ObjectPascalParser::SetElementContext::SetElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::SetElementContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::SetElementContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetElementContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::SetElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetElement;
}


std::any ObjectPascalParser::SetElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::setElement() {
  SetElementContext *_localctx = _tracker.createInstance<SetElementContext>(_ctx, getState());
  enterRule(_localctx, 118, ObjectPascalParser::RuleSetElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(756);
    expression();
    setState(759);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(757);
      match(ObjectPascalParser::DOT_DOT);
      setState(758);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprListContext ------------------------------------------------------------------

ObjectPascalParser::ExprListContext::ExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ExprListContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ExprListContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExprListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExprListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExprListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExprList;
}


std::any ObjectPascalParser::ExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExprList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::exprList() {
  ExprListContext *_localctx = _tracker.createInstance<ExprListContext>(_ctx, getState());
  enterRule(_localctx, 120, ObjectPascalParser::RuleExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(761);
    expression();
    setState(766);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(762);
      match(ObjectPascalParser::COMMA);
      setState(763);
      expression();
      setState(768);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

ObjectPascalParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::StatementContext::simpleStatement() {
  return getRuleContext<ObjectPascalParser::SimpleStatementContext>(0);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::StatementContext::structStmt() {
  return getRuleContext<ObjectPascalParser::StructStmtContext>(0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::StatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StatementContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}


size_t ObjectPascalParser::StatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStatement;
}


std::any ObjectPascalParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 122, ObjectPascalParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(772);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      setState(769);
      labelId();
      setState(770);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(776);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INHERITED:
      case ObjectPascalParser::GOTO:
      case ObjectPascalParser::DOT:
      case ObjectPascalParser::LEFT_BRACKET:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::COLON_ASSIGN:
      case ObjectPascalParser::Ident: {
        setState(774);
        simpleStatement();
        break;
      }

      case ObjectPascalParser::CASE:
      case ObjectPascalParser::REPEAT:
      case ObjectPascalParser::WHILE:
      case ObjectPascalParser::WITH:
      case ObjectPascalParser::TRY:
      case ObjectPascalParser::RAISE:
      case ObjectPascalParser::IF:
      case ObjectPascalParser::FOR:
      case ObjectPascalParser::BEGIN: {
        setState(775);
        structStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtListContext ------------------------------------------------------------------

ObjectPascalParser::StmtListContext::StmtListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::StmtListContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::StmtListContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StmtListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::StmtListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::StmtListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStmtList;
}


std::any ObjectPascalParser::StmtListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStmtList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::stmtList() {
  StmtListContext *_localctx = _tracker.createInstance<StmtListContext>(_ctx, getState());
  enterRule(_localctx, 124, ObjectPascalParser::RuleStmtList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(778);
    statement();
    setState(783);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(779);
        match(ObjectPascalParser::SEMI);
        setState(780);
        statement(); 
      }
      setState(785);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleStatementContext ------------------------------------------------------------------

ObjectPascalParser::SimpleStatementContext::SimpleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::SimpleStatementContext::assignmentStmt() {
  return getRuleContext<ObjectPascalParser::AssignmentStmtContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::INHERITED() {
  return getToken(ObjectPascalParser::INHERITED, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::GOTO() {
  return getToken(ObjectPascalParser::GOTO, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::SimpleStatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}


size_t ObjectPascalParser::SimpleStatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleStatement;
}


std::any ObjectPascalParser::SimpleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::simpleStatement() {
  SimpleStatementContext *_localctx = _tracker.createInstance<SimpleStatementContext>(_ctx, getState());
  enterRule(_localctx, 126, ObjectPascalParser::RuleSimpleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(790);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::DOT:
      case ObjectPascalParser::LEFT_BRACKET:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::COLON_ASSIGN:
      case ObjectPascalParser::Ident: {
        enterOuterAlt(_localctx, 1);
        setState(786);
        assignmentStmt();
        break;
      }

      case ObjectPascalParser::INHERITED: {
        enterOuterAlt(_localctx, 2);
        setState(787);
        match(ObjectPascalParser::INHERITED);
        break;
      }

      case ObjectPascalParser::GOTO: {
        enterOuterAlt(_localctx, 3);
        setState(788);
        match(ObjectPascalParser::GOTO);
        setState(789);
        labelId();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructStmtContext ------------------------------------------------------------------

ObjectPascalParser::StructStmtContext::StructStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::StructStmtContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::StructStmtContext::conditionalStmt() {
  return getRuleContext<ObjectPascalParser::ConditionalStmtContext>(0);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::StructStmtContext::loopStmt() {
  return getRuleContext<ObjectPascalParser::LoopStmtContext>(0);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::StructStmtContext::withStmt() {
  return getRuleContext<ObjectPascalParser::WithStmtContext>(0);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::StructStmtContext::tryExceptStmt() {
  return getRuleContext<ObjectPascalParser::TryExceptStmtContext>(0);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::StructStmtContext::tryFinallyStmt() {
  return getRuleContext<ObjectPascalParser::TryFinallyStmtContext>(0);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::StructStmtContext::raiseStmt() {
  return getRuleContext<ObjectPascalParser::RaiseStmtContext>(0);
}


size_t ObjectPascalParser::StructStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStructStmt;
}


std::any ObjectPascalParser::StructStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStructStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::structStmt() {
  StructStmtContext *_localctx = _tracker.createInstance<StructStmtContext>(_ctx, getState());
  enterRule(_localctx, 128, ObjectPascalParser::RuleStructStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(799);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(792);
      compoundStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(793);
      conditionalStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(794);
      loopStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(795);
      withStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(796);
      tryExceptStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(797);
      tryFinallyStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(798);
      raiseStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStmtContext ------------------------------------------------------------------

ObjectPascalParser::CompoundStmtContext::CompoundStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::BEGIN() {
  return getToken(ObjectPascalParser::BEGIN, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CompoundStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::CompoundStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCompoundStmt;
}


std::any ObjectPascalParser::CompoundStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCompoundStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::compoundStmt() {
  CompoundStmtContext *_localctx = _tracker.createInstance<CompoundStmtContext>(_ctx, getState());
  enterRule(_localctx, 130, ObjectPascalParser::RuleCompoundStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(801);
    match(ObjectPascalParser::BEGIN);
    setState(802);
    stmtList();
    setState(804);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(803);
      match(ObjectPascalParser::SEMI);
    }
    setState(806);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalStmtContext ------------------------------------------------------------------

ObjectPascalParser::ConditionalStmtContext::ConditionalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ConditionalStmtContext::ifStmt() {
  return getRuleContext<ObjectPascalParser::IfStmtContext>(0);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::ConditionalStmtContext::caseStmt() {
  return getRuleContext<ObjectPascalParser::CaseStmtContext>(0);
}


size_t ObjectPascalParser::ConditionalStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConditionalStmt;
}


std::any ObjectPascalParser::ConditionalStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConditionalStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::conditionalStmt() {
  ConditionalStmtContext *_localctx = _tracker.createInstance<ConditionalStmtContext>(_ctx, getState());
  enterRule(_localctx, 132, ObjectPascalParser::RuleConditionalStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(810);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::IF: {
        enterOuterAlt(_localctx, 1);
        setState(808);
        ifStmt();
        break;
      }

      case ObjectPascalParser::CASE: {
        enterOuterAlt(_localctx, 2);
        setState(809);
        caseStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentStmtContext ------------------------------------------------------------------

ObjectPascalParser::AssignmentStmtContext::AssignmentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::AssignmentStmtContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::AssignmentStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::AssignmentStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}


size_t ObjectPascalParser::AssignmentStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAssignmentStmt;
}


std::any ObjectPascalParser::AssignmentStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::assignmentStmt() {
  AssignmentStmtContext *_localctx = _tracker.createInstance<AssignmentStmtContext>(_ctx, getState());
  enterRule(_localctx, 134, ObjectPascalParser::RuleAssignmentStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    designator();
    setState(813);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(814);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

ObjectPascalParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::IF() {
  return getToken(ObjectPascalParser::IF, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::IfStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::THEN() {
  return getToken(ObjectPascalParser::THEN, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::IfStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}


size_t ObjectPascalParser::IfStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIfStmt;
}


std::any ObjectPascalParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 136, ObjectPascalParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(816);
    match(ObjectPascalParser::IF);
    setState(817);
    expression();
    setState(818);
    match(ObjectPascalParser::THEN);
    setState(819);
    statement();
    setState(822);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      setState(820);
      match(ObjectPascalParser::ELSE);
      setState(821);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStmtContext ------------------------------------------------------------------

ObjectPascalParser::CaseStmtContext::CaseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::CaseStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<ObjectPascalParser::CaseSelectorContext *> ObjectPascalParser::CaseStmtContext::caseSelector() {
  return getRuleContexts<ObjectPascalParser::CaseSelectorContext>();
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::CaseStmtContext::caseSelector(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseSelectorContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CaseStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::CaseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseStmt;
}


std::any ObjectPascalParser::CaseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::caseStmt() {
  CaseStmtContext *_localctx = _tracker.createInstance<CaseStmtContext>(_ctx, getState());
  enterRule(_localctx, 138, ObjectPascalParser::RuleCaseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(824);
    match(ObjectPascalParser::CASE);
    setState(825);
    expression();
    setState(826);
    match(ObjectPascalParser::OF);

    setState(827);
    caseSelector();
    setState(832);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(828);
        match(ObjectPascalParser::SEMI);
        setState(829);
        caseSelector(); 
      }
      setState(834);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
    setState(837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ELSE) {
      setState(835);
      match(ObjectPascalParser::ELSE);
      setState(836);
      stmtList();
    }
    setState(840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(839);
      match(ObjectPascalParser::SEMI);
    }
    setState(842);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseSelectorContext ------------------------------------------------------------------

ObjectPascalParser::CaseSelectorContext::CaseSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::CaseLabelContext *> ObjectPascalParser::CaseSelectorContext::caseLabel() {
  return getRuleContexts<ObjectPascalParser::CaseLabelContext>();
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::CaseSelectorContext::caseLabel(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseLabelContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::CaseSelectorContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseSelectorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::CaseSelectorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseSelector;
}


std::any ObjectPascalParser::CaseSelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseSelector(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::caseSelector() {
  CaseSelectorContext *_localctx = _tracker.createInstance<CaseSelectorContext>(_ctx, getState());
  enterRule(_localctx, 140, ObjectPascalParser::RuleCaseSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    caseLabel();
    setState(849);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(845);
      match(ObjectPascalParser::COMMA);
      setState(846);
      caseLabel();
      setState(851);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(852);
    match(ObjectPascalParser::COLON);
    setState(853);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseLabelContext ------------------------------------------------------------------

ObjectPascalParser::CaseLabelContext::CaseLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::CaseLabelContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::CaseLabelContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseLabelContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::CaseLabelContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseLabel;
}


std::any ObjectPascalParser::CaseLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseLabel(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::caseLabel() {
  CaseLabelContext *_localctx = _tracker.createInstance<CaseLabelContext>(_ctx, getState());
  enterRule(_localctx, 142, ObjectPascalParser::RuleCaseLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    constExpr();
    setState(858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(856);
      match(ObjectPascalParser::DOT_DOT);
      setState(857);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

ObjectPascalParser::LoopStmtContext::LoopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::LoopStmtContext::repeatStmt() {
  return getRuleContext<ObjectPascalParser::RepeatStmtContext>(0);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::LoopStmtContext::whileStmt() {
  return getRuleContext<ObjectPascalParser::WhileStmtContext>(0);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::LoopStmtContext::forStmt() {
  return getRuleContext<ObjectPascalParser::ForStmtContext>(0);
}


size_t ObjectPascalParser::LoopStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLoopStmt;
}


std::any ObjectPascalParser::LoopStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLoopStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::loopStmt() {
  LoopStmtContext *_localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
  enterRule(_localctx, 144, ObjectPascalParser::RuleLoopStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(863);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REPEAT: {
        enterOuterAlt(_localctx, 1);
        setState(860);
        repeatStmt();
        break;
      }

      case ObjectPascalParser::WHILE: {
        enterOuterAlt(_localctx, 2);
        setState(861);
        whileStmt();
        break;
      }

      case ObjectPascalParser::FOR: {
        enterOuterAlt(_localctx, 3);
        setState(862);
        forStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatStmtContext ------------------------------------------------------------------

ObjectPascalParser::RepeatStmtContext::RepeatStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::REPEAT() {
  return getToken(ObjectPascalParser::REPEAT, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::RepeatStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::UNTIL() {
  return getToken(ObjectPascalParser::UNTIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::RepeatStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::RepeatStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRepeatStmt;
}


std::any ObjectPascalParser::RepeatStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRepeatStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::repeatStmt() {
  RepeatStmtContext *_localctx = _tracker.createInstance<RepeatStmtContext>(_ctx, getState());
  enterRule(_localctx, 146, ObjectPascalParser::RuleRepeatStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(865);
    match(ObjectPascalParser::REPEAT);
    setState(866);
    stmtList();
    setState(868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(867);
      match(ObjectPascalParser::SEMI);
    }
    setState(870);
    match(ObjectPascalParser::UNTIL);
    setState(871);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

ObjectPascalParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::WHILE() {
  return getToken(ObjectPascalParser::WHILE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::WhileStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WhileStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WhileStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWhileStmt;
}


std::any ObjectPascalParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 148, ObjectPascalParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(873);
    match(ObjectPascalParser::WHILE);
    setState(874);
    expression();
    setState(875);
    match(ObjectPascalParser::DO);
    setState(876);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

ObjectPascalParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::FOR() {
  return getToken(ObjectPascalParser::FOR, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ForStmtContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ForStmtContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ForStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::TO() {
  return getToken(ObjectPascalParser::TO, 0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DOWNTO() {
  return getToken(ObjectPascalParser::DOWNTO, 0);
}


size_t ObjectPascalParser::ForStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleForStmt;
}


std::any ObjectPascalParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 150, ObjectPascalParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(878);
    match(ObjectPascalParser::FOR);
    setState(879);
    qualId();
    setState(880);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(881);
    expression();
    setState(882);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::TO

    || _la == ObjectPascalParser::DOWNTO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(883);
    expression();
    setState(884);
    match(ObjectPascalParser::DO);
    setState(885);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStmtContext ------------------------------------------------------------------

ObjectPascalParser::WithStmtContext::WithStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::WITH() {
  return getToken(ObjectPascalParser::WITH, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::WithStmtContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WithStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WithStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWithStmt;
}


std::any ObjectPascalParser::WithStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWithStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::withStmt() {
  WithStmtContext *_localctx = _tracker.createInstance<WithStmtContext>(_ctx, getState());
  enterRule(_localctx, 152, ObjectPascalParser::RuleWithStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    match(ObjectPascalParser::WITH);
    setState(888);
    qualIdList();
    setState(889);
    match(ObjectPascalParser::DO);
    setState(890);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryExceptStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryExceptStmtContext::TryExceptStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryExceptStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryExceptStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::EXCEPT() {
  return getToken(ObjectPascalParser::EXCEPT, 0);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::TryExceptStmtContext::exceptionBlock() {
  return getRuleContext<ObjectPascalParser::ExceptionBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TryExceptStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TryExceptStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryExceptStmt;
}


std::any ObjectPascalParser::TryExceptStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryExceptStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::tryExceptStmt() {
  TryExceptStmtContext *_localctx = _tracker.createInstance<TryExceptStmtContext>(_ctx, getState());
  enterRule(_localctx, 154, ObjectPascalParser::RuleTryExceptStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(892);
    match(ObjectPascalParser::TRY);
    setState(893);
    statement();
    setState(898);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(894);
      match(ObjectPascalParser::SEMI);
      setState(895);
      statement();
      setState(900);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(901);
    match(ObjectPascalParser::EXCEPT);
    setState(902);
    exceptionBlock();
    setState(903);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionBlockContext ------------------------------------------------------------------

ObjectPascalParser::ExceptionBlockContext::ExceptionBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::ON() {
  return getTokens(ObjectPascalParser::ON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ON(size_t i) {
  return getToken(ObjectPascalParser::ON, i);
}

std::vector<ObjectPascalParser::TypeIdContext *> ObjectPascalParser::ExceptionBlockContext::typeId() {
  return getRuleContexts<ObjectPascalParser::TypeIdContext>();
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ExceptionBlockContext::typeId(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::DO() {
  return getTokens(ObjectPascalParser::DO);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::DO(size_t i) {
  return getToken(ObjectPascalParser::DO, i);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::ExceptionBlockContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ExceptionBlockContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::COLON() {
  return getTokens(ObjectPascalParser::COLON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::COLON(size_t i) {
  return getToken(ObjectPascalParser::COLON, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ExceptionBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExceptionBlock;
}


std::any ObjectPascalParser::ExceptionBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExceptionBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::exceptionBlock() {
  ExceptionBlockContext *_localctx = _tracker.createInstance<ExceptionBlockContext>(_ctx, getState());
  enterRule(_localctx, 156, ObjectPascalParser::RuleExceptionBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(905);
    match(ObjectPascalParser::ON);
    setState(908);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(906);
      match(ObjectPascalParser::Ident);
      setState(907);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(910);
    typeId();
    setState(911);
    match(ObjectPascalParser::DO);
    setState(912);
    statement();
    setState(925);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(913);
      match(ObjectPascalParser::SEMI);
      setState(914);
      match(ObjectPascalParser::ON);
      setState(917);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
      case 1: {
        setState(915);
        match(ObjectPascalParser::Ident);
        setState(916);
        match(ObjectPascalParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(919);
      typeId();
      setState(920);
      match(ObjectPascalParser::DO);
      setState(921);
      statement();
      setState(927);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(928);
    match(ObjectPascalParser::ELSE);
    setState(932);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & ((1ULL << (ObjectPascalParser::CASE - 44))
      | (1ULL << (ObjectPascalParser::INHERITED - 44))
      | (1ULL << (ObjectPascalParser::GOTO - 44))
      | (1ULL << (ObjectPascalParser::REPEAT - 44))
      | (1ULL << (ObjectPascalParser::WHILE - 44))
      | (1ULL << (ObjectPascalParser::WITH - 44))
      | (1ULL << (ObjectPascalParser::TRY - 44))
      | (1ULL << (ObjectPascalParser::RAISE - 44)))) != 0) || ((((_la - 142) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 142)) & ((1ULL << (ObjectPascalParser::DOT - 142))
      | (1ULL << (ObjectPascalParser::LEFT_BRACKET - 142))
      | (1ULL << (ObjectPascalParser::COLON - 142))
      | (1ULL << (ObjectPascalParser::CARET - 142))
      | (1ULL << (ObjectPascalParser::COLON_ASSIGN - 142))
      | (1ULL << (ObjectPascalParser::Ident - 142))
      | (1ULL << (ObjectPascalParser::IF - 142))
      | (1ULL << (ObjectPascalParser::FOR - 142)))) != 0) || ((((_la - 210) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 210)) & ((1ULL << (ObjectPascalParser::BEGIN - 210))
      | (1ULL << (ObjectPascalParser::HEXADECIMALDIGIT - 210))
      | (1ULL << (ObjectPascalParser::OCTALDIGIT - 210))
      | (1ULL << (ObjectPascalParser::DIGIT - 210)))) != 0)) {
      setState(929);
      statement();
      setState(934);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(936);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(935);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryFinallyStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryFinallyStmtContext::TryFinallyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryFinallyStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryFinallyStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::FINALLY() {
  return getToken(ObjectPascalParser::FINALLY, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::TryFinallyStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryFinallyStmt;
}


std::any ObjectPascalParser::TryFinallyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryFinallyStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::tryFinallyStmt() {
  TryFinallyStmtContext *_localctx = _tracker.createInstance<TryFinallyStmtContext>(_ctx, getState());
  enterRule(_localctx, 158, ObjectPascalParser::RuleTryFinallyStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(938);
    match(ObjectPascalParser::TRY);
    setState(939);
    statement();
    setState(940);
    match(ObjectPascalParser::FINALLY);
    setState(941);
    statement();
    setState(943);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(942);
      match(ObjectPascalParser::SEMI);
    }
    setState(945);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RaiseStmtContext ------------------------------------------------------------------

ObjectPascalParser::RaiseStmtContext::RaiseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::RAISE() {
  return getToken(ObjectPascalParser::RAISE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RaiseStmtContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::AT() {
  return getToken(ObjectPascalParser::AT, 0);
}


size_t ObjectPascalParser::RaiseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRaiseStmt;
}


std::any ObjectPascalParser::RaiseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRaiseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::raiseStmt() {
  RaiseStmtContext *_localctx = _tracker.createInstance<RaiseStmtContext>(_ctx, getState());
  enterRule(_localctx, 160, ObjectPascalParser::RuleRaiseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(947);
    match(ObjectPascalParser::RAISE);
    setState(949);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
    case 1: {
      setState(948);
      match(ObjectPascalParser::Ident);
      break;
    }

    default:
      break;
    }
    setState(953);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::AT) {
      setState(951);
      match(ObjectPascalParser::AT);
      setState(952);
      match(ObjectPascalParser::Ident);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclSectionContext::ProcedureDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::procedureDecl() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclContext>(0);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::functionDecl() {
  return getRuleContext<ObjectPascalParser::FunctionDeclContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDeclSection;
}


std::any ObjectPascalParser::ProcedureDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::procedureDeclSection() {
  ProcedureDeclSectionContext *_localctx = _tracker.createInstance<ProcedureDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 162, ObjectPascalParser::RuleProcedureDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(957);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(955);
        procedureDecl();
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(956);
        functionDecl();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclContext::ProcedureDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureDeclContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ProcedureDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ProcedureDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::ProcedureDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ProcedureDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ProcedureDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDecl;
}


std::any ObjectPascalParser::ProcedureDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::procedureDecl() {
  ProcedureDeclContext *_localctx = _tracker.createInstance<ProcedureDeclContext>(_ctx, getState());
  enterRule(_localctx, 164, ObjectPascalParser::RuleProcedureDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(959);
    procedureHeading();
    setState(960);
    match(ObjectPascalParser::SEMI);
    setState(962);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::VIRTUAL

    || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
      | (1ULL << (ObjectPascalParser::REGISTER - 123))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
      | (1ULL << (ObjectPascalParser::EXPORT - 123))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
      | (1ULL << (ObjectPascalParser::FAR - 123))
      | (1ULL << (ObjectPascalParser::FORWARD - 123))
      | (1ULL << (ObjectPascalParser::MESSAGE - 123))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
      | (1ULL << (ObjectPascalParser::PASCAL - 123))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
      | (1ULL << (ObjectPascalParser::SAFECALL - 123))
      | (1ULL << (ObjectPascalParser::STDCALL - 123))
      | (1ULL << (ObjectPascalParser::VARARGS - 123))
      | (1ULL << (ObjectPascalParser::LOCAL - 123))
      | (1ULL << (ObjectPascalParser::NEAR - 123))
      | (1ULL << (ObjectPascalParser::INLINE - 123))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
      setState(961);
      directive();
    }
    setState(965);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(964);
      portabilityDirective();
    }
    setState(967);
    block();
    setState(968);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclContext ------------------------------------------------------------------

ObjectPascalParser::FunctionDeclContext::FunctionDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::FunctionDeclContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FunctionDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FunctionDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::FunctionDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::FunctionDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FunctionDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FunctionDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionDecl;
}


std::any ObjectPascalParser::FunctionDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::functionDecl() {
  FunctionDeclContext *_localctx = _tracker.createInstance<FunctionDeclContext>(_ctx, getState());
  enterRule(_localctx, 166, ObjectPascalParser::RuleFunctionDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(970);
    functionHeading();
    setState(971);
    match(ObjectPascalParser::SEMI);
    setState(973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::VIRTUAL

    || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
      | (1ULL << (ObjectPascalParser::REGISTER - 123))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
      | (1ULL << (ObjectPascalParser::EXPORT - 123))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
      | (1ULL << (ObjectPascalParser::FAR - 123))
      | (1ULL << (ObjectPascalParser::FORWARD - 123))
      | (1ULL << (ObjectPascalParser::MESSAGE - 123))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
      | (1ULL << (ObjectPascalParser::PASCAL - 123))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
      | (1ULL << (ObjectPascalParser::SAFECALL - 123))
      | (1ULL << (ObjectPascalParser::STDCALL - 123))
      | (1ULL << (ObjectPascalParser::VARARGS - 123))
      | (1ULL << (ObjectPascalParser::LOCAL - 123))
      | (1ULL << (ObjectPascalParser::NEAR - 123))
      | (1ULL << (ObjectPascalParser::INLINE - 123))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
      setState(972);
      directive();
    }
    setState(976);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(975);
      portabilityDirective();
    }
    setState(978);
    block();
    setState(979);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionHeadingContext ------------------------------------------------------------------

ObjectPascalParser::FunctionHeadingContext::FunctionHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::FUNCTION() {
  return getToken(ObjectPascalParser::FUNCTION, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::FunctionHeadingContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::FunctionHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::FunctionHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionHeading;
}


std::any ObjectPascalParser::FunctionHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::functionHeading() {
  FunctionHeadingContext *_localctx = _tracker.createInstance<FunctionHeadingContext>(_ctx, getState());
  enterRule(_localctx, 168, ObjectPascalParser::RuleFunctionHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(981);
    match(ObjectPascalParser::FUNCTION);
    setState(982);
    match(ObjectPascalParser::Ident);
    setState(984);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(983);
      formalParameters();
    }
    setState(986);
    match(ObjectPascalParser::COLON);
    setState(989);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::REAL48:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::DOT_DOT:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::PLUS:
      case ObjectPascalParser::MINUS:
      case ObjectPascalParser::STAR:
      case ObjectPascalParser::SHARP:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::StringLiteral:
      case ObjectPascalParser::HEXADECIMALDIGIT:
      case ObjectPascalParser::OCTALDIGIT:
      case ObjectPascalParser::DIGIT: {
        setState(987);
        simpleType();
        break;
      }

      case ObjectPascalParser::STRING: {
        setState(988);
        match(ObjectPascalParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureHeadingContext::ProcedureHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::PROCEDURE() {
  return getToken(ObjectPascalParser::PROCEDURE, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ProcedureHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ProcedureHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureHeading;
}


std::any ObjectPascalParser::ProcedureHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::procedureHeading() {
  ProcedureHeadingContext *_localctx = _tracker.createInstance<ProcedureHeadingContext>(_ctx, getState());
  enterRule(_localctx, 170, ObjectPascalParser::RuleProcedureHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(991);
    match(ObjectPascalParser::PROCEDURE);
    setState(992);
    match(ObjectPascalParser::Ident);
    setState(994);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(993);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

ObjectPascalParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::FormalParmContext *> ObjectPascalParser::FormalParametersContext::formalParm() {
  return getRuleContexts<ObjectPascalParser::FormalParmContext>();
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::FormalParametersContext::formalParm(size_t i) {
  return getRuleContext<ObjectPascalParser::FormalParmContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FormalParametersContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::FormalParametersContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParameters;
}


std::any ObjectPascalParser::FormalParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameters(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 172, ObjectPascalParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(996);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1002);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::CONST

    || _la == ObjectPascalParser::OUT || _la == ObjectPascalParser::Ident

    || _la == ObjectPascalParser::VAR) {
      setState(997);
      formalParm();
      setState(998);
      match(ObjectPascalParser::SEMI);
      setState(1004);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1005);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParmContext ------------------------------------------------------------------

ObjectPascalParser::FormalParmContext::FormalParmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::FormalParmContext::parameter() {
  return getRuleContext<ObjectPascalParser::ParameterContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::VAR() {
  return getToken(ObjectPascalParser::VAR, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::OUT() {
  return getToken(ObjectPascalParser::OUT, 0);
}


size_t ObjectPascalParser::FormalParmContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParm;
}


std::any ObjectPascalParser::FormalParmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::formalParm() {
  FormalParmContext *_localctx = _tracker.createInstance<FormalParmContext>(_ctx, getState());
  enterRule(_localctx, 174, ObjectPascalParser::RuleFormalParm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1008);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CONST

    || _la == ObjectPascalParser::OUT || _la == ObjectPascalParser::VAR) {
      setState(1007);
      _la = _input->LA(1);
      if (!(_la == ObjectPascalParser::CONST

      || _la == ObjectPascalParser::OUT || _la == ObjectPascalParser::VAR)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1010);
    parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

ObjectPascalParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ParameterContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::ParameterContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ARRAY() {
  return getToken(ObjectPascalParser::ARRAY, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ParameterContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ParameterContext::getRuleIndex() const {
  return ObjectPascalParser::RuleParameter;
}


std::any ObjectPascalParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 176, ObjectPascalParser::RuleParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1031);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1012);
      identList();
      setState(1023);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::COLON) {
        setState(1013);
        match(ObjectPascalParser::COLON);
        setState(1021);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::REAL:
          case ObjectPascalParser::SINGLE:
          case ObjectPascalParser::DOUBLE:
          case ObjectPascalParser::EXTENDED:
          case ObjectPascalParser::CURRENCY:
          case ObjectPascalParser::COMP:
          case ObjectPascalParser::SHORTINT:
          case ObjectPascalParser::SMALLINT:
          case ObjectPascalParser::INTEGER:
          case ObjectPascalParser::BYTE:
          case ObjectPascalParser::LONGINT:
          case ObjectPascalParser::WORD:
          case ObjectPascalParser::BOOLEAN:
          case ObjectPascalParser::CHAR:
          case ObjectPascalParser::WIDECHAR:
          case ObjectPascalParser::PCHAR:
          case ObjectPascalParser::REAL48:
          case ObjectPascalParser::LEFT_PAREN:
          case ObjectPascalParser::DOT_DOT:
          case ObjectPascalParser::CARET:
          case ObjectPascalParser::PLUS:
          case ObjectPascalParser::MINUS:
          case ObjectPascalParser::STAR:
          case ObjectPascalParser::SHARP:
          case ObjectPascalParser::CARDINAL:
          case ObjectPascalParser::INT64:
          case ObjectPascalParser::LONGWORD:
          case ObjectPascalParser::StringLiteral:
          case ObjectPascalParser::ARRAY:
          case ObjectPascalParser::HEXADECIMALDIGIT:
          case ObjectPascalParser::OCTALDIGIT:
          case ObjectPascalParser::DIGIT: {
            setState(1016);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == ObjectPascalParser::ARRAY) {
              setState(1014);
              match(ObjectPascalParser::ARRAY);
              setState(1015);
              match(ObjectPascalParser::OF);
            }
            setState(1018);
            simpleType();
            break;
          }

          case ObjectPascalParser::STRING: {
            setState(1019);
            match(ObjectPascalParser::STRING);
            break;
          }

          case ObjectPascalParser::FILE: {
            setState(1020);
            match(ObjectPascalParser::FILE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1025);
      match(ObjectPascalParser::Ident);
      setState(1026);
      match(ObjectPascalParser::COLON);
      setState(1027);
      simpleType();
      setState(1028);
      match(ObjectPascalParser::ASSIGN);
      setState(1029);
      constExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveContext ------------------------------------------------------------------

ObjectPascalParser::DirectiveContext::DirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::CDECL() {
  return getToken(ObjectPascalParser::CDECL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REGISTER() {
  return getToken(ObjectPascalParser::REGISTER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::DYNAMIC() {
  return getToken(ObjectPascalParser::DYNAMIC, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VIRTUAL() {
  return getToken(ObjectPascalParser::VIRTUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::DirectiveContext::externalDirective() {
  return getRuleContext<ObjectPascalParser::ExternalDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::NEAR() {
  return getToken(ObjectPascalParser::NEAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FAR() {
  return getToken(ObjectPascalParser::FAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FORWARD() {
  return getToken(ObjectPascalParser::FORWARD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::INLINE() {
  return getToken(ObjectPascalParser::INLINE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ASSEMBLER() {
  return getToken(ObjectPascalParser::ASSEMBLER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::MESSAGE() {
  return getToken(ObjectPascalParser::MESSAGE, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::DirectiveContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERRIDE() {
  return getToken(ObjectPascalParser::OVERRIDE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERLOAD() {
  return getToken(ObjectPascalParser::OVERLOAD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::PASCAL() {
  return getToken(ObjectPascalParser::PASCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REINTRODUCE() {
  return getToken(ObjectPascalParser::REINTRODUCE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::SAFECALL() {
  return getToken(ObjectPascalParser::SAFECALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::STDCALL() {
  return getToken(ObjectPascalParser::STDCALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VARARGS() {
  return getToken(ObjectPascalParser::VARARGS, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::LOCAL() {
  return getToken(ObjectPascalParser::LOCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ABSTRACT() {
  return getToken(ObjectPascalParser::ABSTRACT, 0);
}


size_t ObjectPascalParser::DirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDirective;
}


std::any ObjectPascalParser::DirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::directive() {
  DirectiveContext *_localctx = _tracker.createInstance<DirectiveContext>(_ctx, getState());
  enterRule(_localctx, 178, ObjectPascalParser::RuleDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1055);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CDECL: {
        enterOuterAlt(_localctx, 1);
        setState(1033);
        match(ObjectPascalParser::CDECL);
        break;
      }

      case ObjectPascalParser::REGISTER: {
        enterOuterAlt(_localctx, 2);
        setState(1034);
        match(ObjectPascalParser::REGISTER);
        break;
      }

      case ObjectPascalParser::DYNAMIC: {
        enterOuterAlt(_localctx, 3);
        setState(1035);
        match(ObjectPascalParser::DYNAMIC);
        break;
      }

      case ObjectPascalParser::VIRTUAL: {
        enterOuterAlt(_localctx, 4);
        setState(1036);
        match(ObjectPascalParser::VIRTUAL);
        break;
      }

      case ObjectPascalParser::EXPORT: {
        enterOuterAlt(_localctx, 5);
        setState(1037);
        match(ObjectPascalParser::EXPORT);
        break;
      }

      case ObjectPascalParser::EXTERNAL: {
        enterOuterAlt(_localctx, 6);
        setState(1038);
        externalDirective();
        break;
      }

      case ObjectPascalParser::NEAR: {
        enterOuterAlt(_localctx, 7);
        setState(1039);
        match(ObjectPascalParser::NEAR);
        break;
      }

      case ObjectPascalParser::FAR: {
        enterOuterAlt(_localctx, 8);
        setState(1040);
        match(ObjectPascalParser::FAR);
        break;
      }

      case ObjectPascalParser::FORWARD: {
        enterOuterAlt(_localctx, 9);
        setState(1041);
        match(ObjectPascalParser::FORWARD);
        break;
      }

      case ObjectPascalParser::INLINE: {
        enterOuterAlt(_localctx, 10);
        setState(1042);
        match(ObjectPascalParser::INLINE);
        break;
      }

      case ObjectPascalParser::ASSEMBLER: {
        enterOuterAlt(_localctx, 11);
        setState(1043);
        match(ObjectPascalParser::ASSEMBLER);
        break;
      }

      case ObjectPascalParser::MESSAGE: {
        enterOuterAlt(_localctx, 12);
        setState(1044);
        match(ObjectPascalParser::MESSAGE);
        setState(1045);
        constExpr();
        break;
      }

      case ObjectPascalParser::OVERRIDE: {
        enterOuterAlt(_localctx, 13);
        setState(1046);
        match(ObjectPascalParser::OVERRIDE);
        break;
      }

      case ObjectPascalParser::OVERLOAD: {
        enterOuterAlt(_localctx, 14);
        setState(1047);
        match(ObjectPascalParser::OVERLOAD);
        break;
      }

      case ObjectPascalParser::PASCAL: {
        enterOuterAlt(_localctx, 15);
        setState(1048);
        match(ObjectPascalParser::PASCAL);
        break;
      }

      case ObjectPascalParser::REINTRODUCE: {
        enterOuterAlt(_localctx, 16);
        setState(1049);
        match(ObjectPascalParser::REINTRODUCE);
        break;
      }

      case ObjectPascalParser::SAFECALL: {
        enterOuterAlt(_localctx, 17);
        setState(1050);
        match(ObjectPascalParser::SAFECALL);
        break;
      }

      case ObjectPascalParser::STDCALL: {
        enterOuterAlt(_localctx, 18);
        setState(1051);
        match(ObjectPascalParser::STDCALL);
        break;
      }

      case ObjectPascalParser::VARARGS: {
        enterOuterAlt(_localctx, 19);
        setState(1052);
        match(ObjectPascalParser::VARARGS);
        break;
      }

      case ObjectPascalParser::LOCAL: {
        enterOuterAlt(_localctx, 20);
        setState(1053);
        match(ObjectPascalParser::LOCAL);
        break;
      }

      case ObjectPascalParser::ABSTRACT: {
        enterOuterAlt(_localctx, 21);
        setState(1054);
        match(ObjectPascalParser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::ExternalDirectiveContext::ExternalDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::EXTERNAL() {
  return getToken(ObjectPascalParser::EXTERNAL, 0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ExternalDirectiveContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExternalDirectiveContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}


size_t ObjectPascalParser::ExternalDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExternalDirective;
}


std::any ObjectPascalParser::ExternalDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExternalDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::externalDirective() {
  ExternalDirectiveContext *_localctx = _tracker.createInstance<ExternalDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 180, ObjectPascalParser::RuleExternalDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1057);
    match(ObjectPascalParser::EXTERNAL);
    setState(1068);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::StringLiteral) {
      setState(1058);
      string();
      setState(1066);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::NAME) {
        setState(1059);
        match(ObjectPascalParser::NAME);
        setState(1063);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ObjectPascalParser::Ident) {
          setState(1060);
          match(ObjectPascalParser::Ident);
          setState(1065);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectTypeContext ------------------------------------------------------------------

ObjectPascalParser::ObjectTypeContext::ObjectTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::ObjectTypeContext::objHeritage() {
  return getRuleContext<ObjectPascalParser::ObjHeritageContext>(0);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ObjectTypeContext::objFieldList() {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(0);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ObjectTypeContext::methodList() {
  return getRuleContext<ObjectPascalParser::MethodListContext>(0);
}


size_t ObjectPascalParser::ObjectTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjectType;
}


std::any ObjectPascalParser::ObjectTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjectType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::objectType() {
  ObjectTypeContext *_localctx = _tracker.createInstance<ObjectTypeContext>(_ctx, getState());
  enterRule(_localctx, 182, ObjectPascalParser::RuleObjectType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070);
    match(ObjectPascalParser::OBJECT);
    setState(1072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1071);
      objHeritage();
    }
    setState(1075);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(1074);
      objFieldList();
    }
    setState(1078);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      setState(1077);
      methodList();
      break;
    }

    default:
      break;
    }
    setState(1080);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ObjHeritageContext::ObjHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ObjHeritageContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ObjHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjHeritage;
}


std::any ObjectPascalParser::ObjHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::objHeritage() {
  ObjHeritageContext *_localctx = _tracker.createInstance<ObjHeritageContext>(_ctx, getState());
  enterRule(_localctx, 184, ObjectPascalParser::RuleObjHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1082);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1083);
    qualId();
    setState(1084);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodListContext ------------------------------------------------------------------

ObjectPascalParser::MethodListContext::MethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

std::vector<ObjectPascalParser::MethodHeadingContext *> ObjectPascalParser::MethodListContext::methodHeading() {
  return getRuleContexts<ObjectPascalParser::MethodHeadingContext>();
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::MethodListContext::methodHeading(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodHeadingContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::VIRTUAL() {
  return getTokens(ObjectPascalParser::VIRTUAL);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::VIRTUAL(size_t i) {
  return getToken(ObjectPascalParser::VIRTUAL, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::ABSTRACT() {
  return getTokens(ObjectPascalParser::ABSTRACT);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::ABSTRACT(size_t i) {
  return getToken(ObjectPascalParser::ABSTRACT, i);
}


size_t ObjectPascalParser::MethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodList;
}


std::any ObjectPascalParser::MethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::methodList() {
  MethodListContext *_localctx = _tracker.createInstance<MethodListContext>(_ctx, getState());
  enterRule(_localctx, 186, ObjectPascalParser::RuleMethodList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1099);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::CLASS)
      | (1ULL << ObjectPascalParser::CONSTRUCTOR)
      | (1ULL << ObjectPascalParser::DESTRUCTOR))) != 0) || _la == ObjectPascalParser::FUNCTION

    || _la == ObjectPascalParser::PROCEDURE) {
      setState(1086);
      methodHeading();
      setState(1093);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
      case 1: {
        setState(1087);
        match(ObjectPascalParser::SEMI);
        setState(1088);
        match(ObjectPascalParser::VIRTUAL);
        setState(1091);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
        case 1: {
          setState(1089);
          match(ObjectPascalParser::SEMI);
          setState(1090);
          match(ObjectPascalParser::ABSTRACT);
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      setState(1095);
      match(ObjectPascalParser::SEMI);
      setState(1101);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeadingContext ------------------------------------------------------------------

ObjectPascalParser::MethodHeadingContext::MethodHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::MethodHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::MethodHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::MethodHeadingContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::MethodHeadingContext::constructorHeading() {
  return getRuleContext<ObjectPascalParser::ConstructorHeadingContext>(0);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::MethodHeadingContext::destructorHeading() {
  return getRuleContext<ObjectPascalParser::DestructorHeadingContext>(0);
}


size_t ObjectPascalParser::MethodHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodHeading;
}


std::any ObjectPascalParser::MethodHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::methodHeading() {
  MethodHeadingContext *_localctx = _tracker.createInstance<MethodHeadingContext>(_ctx, getState());
  enterRule(_localctx, 188, ObjectPascalParser::RuleMethodHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1111);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CLASS:
      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(1103);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::CLASS) {
          setState(1102);
          match(ObjectPascalParser::CLASS);
        }
        setState(1107);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::PROCEDURE: {
            setState(1105);
            procedureHeading();
            break;
          }

          case ObjectPascalParser::FUNCTION: {
            setState(1106);
            functionHeading();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR: {
        enterOuterAlt(_localctx, 2);
        setState(1109);
        constructorHeading();
        break;
      }

      case ObjectPascalParser::DESTRUCTOR: {
        enterOuterAlt(_localctx, 3);
        setState(1110);
        destructorHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ConstructorHeadingContext::ConstructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::CONSTRUCTOR() {
  return getToken(ObjectPascalParser::CONSTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ConstructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ConstructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstructorHeading;
}


std::any ObjectPascalParser::ConstructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::constructorHeading() {
  ConstructorHeadingContext *_localctx = _tracker.createInstance<ConstructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 190, ObjectPascalParser::RuleConstructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1113);
    match(ObjectPascalParser::CONSTRUCTOR);
    setState(1114);
    match(ObjectPascalParser::Ident);
    setState(1116);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1115);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::DestructorHeadingContext::DestructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::DESTRUCTOR() {
  return getToken(ObjectPascalParser::DESTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::DestructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::DestructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDestructorHeading;
}


std::any ObjectPascalParser::DestructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDestructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::destructorHeading() {
  DestructorHeadingContext *_localctx = _tracker.createInstance<DestructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 192, ObjectPascalParser::RuleDestructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1118);
    match(ObjectPascalParser::DESTRUCTOR);
    setState(1119);
    match(ObjectPascalParser::Ident);
    setState(1121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1120);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ObjFieldListContext::ObjFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ObjFieldListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ObjFieldListContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}


size_t ObjectPascalParser::ObjFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjFieldList;
}


std::any ObjectPascalParser::ObjFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::objFieldList() {
  ObjFieldListContext *_localctx = _tracker.createInstance<ObjFieldListContext>(_ctx, getState());
  enterRule(_localctx, 194, ObjectPascalParser::RuleObjFieldList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    identList();
    setState(1124);
    match(ObjectPascalParser::COLON);
    setState(1125);
    type();
    setState(1127);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitSectionContext ------------------------------------------------------------------

ObjectPascalParser::InitSectionContext::InitSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::INITIALIZATION() {
  return getToken(ObjectPascalParser::INITIALIZATION, 0);
}

std::vector<ObjectPascalParser::StmtListContext *> ObjectPascalParser::InitSectionContext::stmtList() {
  return getRuleContexts<ObjectPascalParser::StmtListContext>();
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::InitSectionContext::stmtList(size_t i) {
  return getRuleContext<ObjectPascalParser::StmtListContext>(i);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::FINALIZATION() {
  return getToken(ObjectPascalParser::FINALIZATION, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::BEGIN() {
  return getToken(ObjectPascalParser::BEGIN, 0);
}


size_t ObjectPascalParser::InitSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInitSection;
}


std::any ObjectPascalParser::InitSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInitSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::initSection() {
  InitSectionContext *_localctx = _tracker.createInstance<InitSectionContext>(_ctx, getState());
  enterRule(_localctx, 196, ObjectPascalParser::RuleInitSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1142);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INITIALIZATION: {
        enterOuterAlt(_localctx, 1);
        setState(1129);
        match(ObjectPascalParser::INITIALIZATION);
        setState(1130);
        stmtList();
        setState(1133);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::FINALIZATION) {
          setState(1131);
          match(ObjectPascalParser::FINALIZATION);
          setState(1132);
          stmtList();
        }
        setState(1135);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::BEGIN: {
        enterOuterAlt(_localctx, 2);
        setState(1137);
        match(ObjectPascalParser::BEGIN);
        setState(1138);
        stmtList();
        setState(1139);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::END: {
        enterOuterAlt(_localctx, 3);
        setState(1141);
        match(ObjectPascalParser::END);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::ClassTypeContext::classHeritage() {
  return getRuleContext<ObjectPascalParser::ClassHeritageContext>(0);
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassTypeContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::ClassTypeContext::classFieldList() {
  return getRuleContext<ObjectPascalParser::ClassFieldListContext>(0);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::ClassTypeContext::classMethodList() {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(0);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::ClassTypeContext::classPropertyList() {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(0);
}


size_t ObjectPascalParser::ClassTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassType;
}


std::any ObjectPascalParser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 198, ObjectPascalParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1144);
    match(ObjectPascalParser::CLASS);
    setState(1146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1145);
      classHeritage();
    }
    setState(1149);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(1148);
      classVisibility();
      break;
    }

    default:
      break;
    }
    setState(1152);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx)) {
    case 1: {
      setState(1151);
      classFieldList();
      break;
    }

    default:
      break;
    }
    setState(1155);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1154);
      classMethodList();
      break;
    }

    default:
      break;
    }
    setState(1158);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      setState(1157);
      classPropertyList();
      break;
    }

    default:
      break;
    }
    setState(1160);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ClassHeritageContext::ClassHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ClassHeritageContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ClassHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassHeritage;
}


std::any ObjectPascalParser::ClassHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::classHeritage() {
  ClassHeritageContext *_localctx = _tracker.createInstance<ClassHeritageContext>(_ctx, getState());
  enterRule(_localctx, 200, ObjectPascalParser::RuleClassHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1163);
    identList();
    setState(1164);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVisibilityContext ------------------------------------------------------------------

ObjectPascalParser::ClassVisibilityContext::ClassVisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLIC() {
  return getToken(ObjectPascalParser::PUBLIC, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PROTECTED() {
  return getToken(ObjectPascalParser::PROTECTED, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PRIVATE() {
  return getToken(ObjectPascalParser::PRIVATE, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLISHED() {
  return getToken(ObjectPascalParser::PUBLISHED, 0);
}


size_t ObjectPascalParser::ClassVisibilityContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassVisibility;
}


std::any ObjectPascalParser::ClassVisibilityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassVisibility(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::classVisibility() {
  ClassVisibilityContext *_localctx = _tracker.createInstance<ClassVisibilityContext>(_ctx, getState());
  enterRule(_localctx, 202, ObjectPascalParser::RuleClassVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1167);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      setState(1166);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
        | (1ULL << ObjectPascalParser::PRIVATE)
        | (1ULL << ObjectPascalParser::PUBLISHED))) != 0) || _la == ObjectPascalParser::PROTECTED)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ClassFieldListContext::ClassFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ClassVisibilityContext *> ObjectPascalParser::ClassFieldListContext::classVisibility() {
  return getRuleContexts<ObjectPascalParser::ClassVisibilityContext>();
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassFieldListContext::classVisibility(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(i);
}

std::vector<ObjectPascalParser::ObjFieldListContext *> ObjectPascalParser::ClassFieldListContext::objFieldList() {
  return getRuleContexts<ObjectPascalParser::ObjFieldListContext>();
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ClassFieldListContext::objFieldList(size_t i) {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ClassFieldListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ClassFieldListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ClassFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassFieldList;
}


std::any ObjectPascalParser::ClassFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::classFieldList() {
  ClassFieldListContext *_localctx = _tracker.createInstance<ClassFieldListContext>(_ctx, getState());
  enterRule(_localctx, 204, ObjectPascalParser::RuleClassFieldList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1175);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1169);
        classVisibility();
        setState(1170);
        objFieldList();
        setState(1171);
        match(ObjectPascalParser::SEMI); 
      }
      setState(1177);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMethodListContext ------------------------------------------------------------------

ObjectPascalParser::ClassMethodListContext::ClassMethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ClassVisibilityContext *> ObjectPascalParser::ClassMethodListContext::classVisibility() {
  return getRuleContexts<ObjectPascalParser::ClassVisibilityContext>();
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassMethodListContext::classVisibility(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(i);
}

std::vector<ObjectPascalParser::MethodListContext *> ObjectPascalParser::ClassMethodListContext::methodList() {
  return getRuleContexts<ObjectPascalParser::MethodListContext>();
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ClassMethodListContext::methodList(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ClassMethodListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ClassMethodListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ClassMethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassMethodList;
}


std::any ObjectPascalParser::ClassMethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::classMethodList() {
  ClassMethodListContext *_localctx = _tracker.createInstance<ClassMethodListContext>(_ctx, getState());
  enterRule(_localctx, 206, ObjectPascalParser::RuleClassMethodList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1184);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1178);
        classVisibility();
        setState(1179);
        methodList();
        setState(1180);
        match(ObjectPascalParser::SEMI); 
      }
      setState(1186);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassPropertyListContext ------------------------------------------------------------------

ObjectPascalParser::ClassPropertyListContext::ClassPropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ClassVisibilityContext *> ObjectPascalParser::ClassPropertyListContext::classVisibility() {
  return getRuleContexts<ObjectPascalParser::ClassVisibilityContext>();
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassPropertyListContext::classVisibility(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(i);
}

std::vector<ObjectPascalParser::PropertyListContext *> ObjectPascalParser::ClassPropertyListContext::propertyList() {
  return getRuleContexts<ObjectPascalParser::PropertyListContext>();
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::ClassPropertyListContext::propertyList(size_t i) {
  return getRuleContext<ObjectPascalParser::PropertyListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ClassPropertyListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ClassPropertyListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ClassPropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassPropertyList;
}


std::any ObjectPascalParser::ClassPropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::classPropertyList() {
  ClassPropertyListContext *_localctx = _tracker.createInstance<ClassPropertyListContext>(_ctx, getState());
  enterRule(_localctx, 208, ObjectPascalParser::RuleClassPropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1193);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED)
      | (1ULL << ObjectPascalParser::PROPERTY_1))) != 0) || _la == ObjectPascalParser::PROTECTED) {
      setState(1187);
      classVisibility();
      setState(1188);
      propertyList();
      setState(1189);
      match(ObjectPascalParser::SEMI);
      setState(1195);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyListContext::PropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::PROPERTY_1() {
  return getToken(ObjectPascalParser::PROPERTY_1, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::PropertyListContext::propertyInterface() {
  return getRuleContext<ObjectPascalParser::PropertyInterfaceContext>(0);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::PropertyListContext::propertySpecifiers() {
  return getRuleContext<ObjectPascalParser::PropertySpecifiersContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PropertyListContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyList;
}


std::any ObjectPascalParser::PropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::propertyList() {
  PropertyListContext *_localctx = _tracker.createInstance<PropertyListContext>(_ctx, getState());
  enterRule(_localctx, 210, ObjectPascalParser::RulePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1196);
    match(ObjectPascalParser::PROPERTY_1);
    setState(1197);
    match(ObjectPascalParser::Ident);
    setState(1199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET

    || _la == ObjectPascalParser::COLON) {
      setState(1198);
      propertyInterface();
    }
    setState(1202);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      setState(1201);
      propertySpecifiers();
      break;
    }

    default:
      break;
    }
    setState(1205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1204);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyInterfaceContext ------------------------------------------------------------------

ObjectPascalParser::PropertyInterfaceContext::PropertyInterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::PropertyInterfaceContext::propertyParameterList() {
  return getRuleContext<ObjectPascalParser::PropertyParameterListContext>(0);
}


size_t ObjectPascalParser::PropertyInterfaceContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyInterface;
}


std::any ObjectPascalParser::PropertyInterfaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyInterface(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::propertyInterface() {
  PropertyInterfaceContext *_localctx = _tracker.createInstance<PropertyInterfaceContext>(_ctx, getState());
  enterRule(_localctx, 212, ObjectPascalParser::RulePropertyInterface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1208);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(1207);
      propertyParameterList();
    }
    setState(1210);
    match(ObjectPascalParser::COLON);
    setState(1211);
    match(ObjectPascalParser::Ident);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyParameterListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyParameterListContext::PropertyParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::PropertyParameterListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertyParameterListContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::PropertyParameterListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::PropertyParameterListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyParameterList;
}


std::any ObjectPascalParser::PropertyParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyParameterList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::propertyParameterList() {
  PropertyParameterListContext *_localctx = _tracker.createInstance<PropertyParameterListContext>(_ctx, getState());
  enterRule(_localctx, 214, ObjectPascalParser::RulePropertyParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1213);
    match(ObjectPascalParser::LEFT_BRACKET);

    setState(1214);
    identList();
    setState(1215);
    match(ObjectPascalParser::COLON);
    setState(1216);
    typeId();
    setState(1221);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(1218);
      match(ObjectPascalParser::SEMI);
      setState(1223);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1224);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySpecifiersContext ------------------------------------------------------------------

ObjectPascalParser::PropertySpecifiersContext::PropertySpecifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::PropertySpecifiersContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::PropertySpecifiersContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::READ() {
  return getToken(ObjectPascalParser::READ, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::PropertySpecifiersContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::WRITE() {
  return getToken(ObjectPascalParser::WRITE, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::STORED() {
  return getToken(ObjectPascalParser::STORED, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::NODEFAULT() {
  return getToken(ObjectPascalParser::NODEFAULT, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::IMPLEMENTS() {
  return getToken(ObjectPascalParser::IMPLEMENTS, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertySpecifiersContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::DEFAULT() {
  return getToken(ObjectPascalParser::DEFAULT, 0);
}


size_t ObjectPascalParser::PropertySpecifiersContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertySpecifiers;
}


std::any ObjectPascalParser::PropertySpecifiersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertySpecifiers(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::propertySpecifiers() {
  PropertySpecifiersContext *_localctx = _tracker.createInstance<PropertySpecifiersContext>(_ctx, getState());
  enterRule(_localctx, 216, ObjectPascalParser::RulePropertySpecifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::INDEX) {
      setState(1226);
      match(ObjectPascalParser::INDEX);
      setState(1227);
      constExpr();
    }
    setState(1232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::READ) {
      setState(1230);
      match(ObjectPascalParser::READ);
      setState(1231);
      match(ObjectPascalParser::Ident);
    }
    setState(1236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::WRITE) {
      setState(1234);
      match(ObjectPascalParser::WRITE);
      setState(1235);
      match(ObjectPascalParser::Ident);
    }
    setState(1243);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::STORED) {
      setState(1238);
      match(ObjectPascalParser::STORED);
      setState(1241);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectPascalParser::Ident: {
          setState(1239);
          match(ObjectPascalParser::Ident);
          break;
        }

        case ObjectPascalParser::LIBRARY:
        case ObjectPascalParser::DEFAULT:
        case ObjectPascalParser::NODEFAULT:
        case ObjectPascalParser::IMPLEMENTS:
        case ObjectPascalParser::SEMI:
        case ObjectPascalParser::CARET:
        case ObjectPascalParser::PLUS:
        case ObjectPascalParser::MINUS:
        case ObjectPascalParser::STAR:
        case ObjectPascalParser::SHARP:
        case ObjectPascalParser::PLATFORM:
        case ObjectPascalParser::DEPRECATED:
        case ObjectPascalParser::StringLiteral:
        case ObjectPascalParser::HEXADECIMALDIGIT:
        case ObjectPascalParser::OCTALDIGIT:
        case ObjectPascalParser::DIGIT: {
          setState(1240);
          constExpr();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(1248);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::DEFAULT: {
        setState(1245);
        match(ObjectPascalParser::DEFAULT);
        setState(1246);
        constExpr();
        break;
      }

      case ObjectPascalParser::NODEFAULT: {
        setState(1247);
        match(ObjectPascalParser::NODEFAULT);
        break;
      }

      case ObjectPascalParser::LIBRARY:
      case ObjectPascalParser::IMPLEMENTS:
      case ObjectPascalParser::SEMI:
      case ObjectPascalParser::PLATFORM:
      case ObjectPascalParser::DEPRECATED: {
        break;
      }

    default:
      break;
    }
    setState(1252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::IMPLEMENTS) {
      setState(1250);
      match(ObjectPascalParser::IMPLEMENTS);
      setState(1251);
      typeId();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::InterfaceTypeContext::interfaceHeritage() {
  return getRuleContext<ObjectPascalParser::InterfaceHeritageContext>(0);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::InterfaceTypeContext::classMethodList() {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(0);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::InterfaceTypeContext::classPropertyList() {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(0);
}


size_t ObjectPascalParser::InterfaceTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceType;
}


std::any ObjectPascalParser::InterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 218, ObjectPascalParser::RuleInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1254);
    match(ObjectPascalParser::INTERFACE);
    setState(1256);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1255);
      interfaceHeritage();
    }
    setState(1259);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      setState(1258);
      classMethodList();
      break;
    }

    default:
      break;
    }
    setState(1262);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      setState(1261);
      classPropertyList();
      break;
    }

    default:
      break;
    }
    setState(1264);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceHeritageContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceHeritageContext::InterfaceHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::InterfaceHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceHeritage;
}


std::any ObjectPascalParser::InterfaceHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::interfaceHeritage() {
  InterfaceHeritageContext *_localctx = _tracker.createInstance<InterfaceHeritageContext>(_ctx, getState());
  enterRule(_localctx, 220, ObjectPascalParser::RuleInterfaceHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1266);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1267);
    match(ObjectPascalParser::Ident);
    setState(1268);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresClauseContext ------------------------------------------------------------------

ObjectPascalParser::RequiresClauseContext::RequiresClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::REQUIRES() {
  return getToken(ObjectPascalParser::REQUIRES, 0);
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::RequiresClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::RequiresClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::RequiresClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRequiresClause;
}


std::any ObjectPascalParser::RequiresClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRequiresClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::requiresClause() {
  RequiresClauseContext *_localctx = _tracker.createInstance<RequiresClauseContext>(_ctx, getState());
  enterRule(_localctx, 222, ObjectPascalParser::RuleRequiresClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1270);
    match(ObjectPascalParser::REQUIRES);
    setState(1272); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1271);
      identList();
      setState(1274); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
    setState(1276);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContainsClauseContext ------------------------------------------------------------------

ObjectPascalParser::ContainsClauseContext::ContainsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::CONTAINS() {
  return getToken(ObjectPascalParser::CONTAINS, 0);
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::ContainsClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ContainsClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::ContainsClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleContainsClause;
}


std::any ObjectPascalParser::ContainsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitContainsClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::containsClause() {
  ContainsClauseContext *_localctx = _tracker.createInstance<ContainsClauseContext>(_ctx, getState());
  enterRule(_localctx, 224, ObjectPascalParser::RuleContainsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1278);
    match(ObjectPascalParser::CONTAINS);
    setState(1280); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1279);
      identList();
      setState(1282); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
    setState(1284);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentListContext ------------------------------------------------------------------

ObjectPascalParser::IdentListContext::IdentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::IdentListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIdentList;
}


std::any ObjectPascalParser::IdentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIdentList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::identList() {
  IdentListContext *_localctx = _tracker.createInstance<IdentListContext>(_ctx, getState());
  enterRule(_localctx, 226, ObjectPascalParser::RuleIdentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1286);
    match(ObjectPascalParser::Ident);
    setState(1289); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1287);
      match(ObjectPascalParser::COMMA);
      setState(1288);
      match(ObjectPascalParser::Ident);
      setState(1291); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdListContext ------------------------------------------------------------------

ObjectPascalParser::QualIdListContext::QualIdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::QualIdContext *> ObjectPascalParser::QualIdListContext::qualId() {
  return getRuleContexts<ObjectPascalParser::QualIdContext>();
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::QualIdListContext::qualId(size_t i) {
  return getRuleContext<ObjectPascalParser::QualIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::QualIdListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::QualIdListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualIdList;
}


std::any ObjectPascalParser::QualIdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualIdList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::qualIdList() {
  QualIdListContext *_localctx = _tracker.createInstance<QualIdListContext>(_ctx, getState());
  enterRule(_localctx, 228, ObjectPascalParser::RuleQualIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1293);
    qualId();
    setState(1296); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1294);
      match(ObjectPascalParser::COMMA);
      setState(1295);
      qualId();
      setState(1298); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdContext ------------------------------------------------------------------

ObjectPascalParser::QualIdContext::QualIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::QualIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdContext::DOT() {
  return getTokens(ObjectPascalParser::DOT);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::DOT(size_t i) {
  return getToken(ObjectPascalParser::DOT, i);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::QualIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualId;
}


std::any ObjectPascalParser::QualIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::qualId() {
  QualIdContext *_localctx = _tracker.createInstance<QualIdContext>(_ctx, getState());
  enterRule(_localctx, 230, ObjectPascalParser::RuleQualId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1303);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(1300);
      unitId();
      setState(1301);
      match(ObjectPascalParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1312);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      setState(1305);
      match(ObjectPascalParser::DOT);
      setState(1306);
      match(ObjectPascalParser::Ident);
      setState(1308); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1307);
                match(ObjectPascalParser::CARET);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1310); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdContext ------------------------------------------------------------------

ObjectPascalParser::TypeIdContext::TypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::PredefinedTypeContext* ObjectPascalParser::TypeIdContext::predefinedType() {
  return getRuleContext<ObjectPascalParser::PredefinedTypeContext>(0);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::TypeIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::TypeIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeId;
}


std::any ObjectPascalParser::TypeIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::typeId() {
  TypeIdContext *_localctx = _tracker.createInstance<TypeIdContext>(_ctx, getState());
  enterRule(_localctx, 232, ObjectPascalParser::RuleTypeId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(1314);
      unitId();
      setState(1315);
      match(ObjectPascalParser::DOT);
    }
    setState(1319);
    predefinedType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedTypeContext ------------------------------------------------------------------

ObjectPascalParser::PredefinedTypeContext::PredefinedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}


size_t ObjectPascalParser::PredefinedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePredefinedType;
}


std::any ObjectPascalParser::PredefinedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PredefinedTypeContext* ObjectPascalParser::predefinedType() {
  PredefinedTypeContext *_localctx = _tracker.createInstance<PredefinedTypeContext>(_ctx, getState());
  enterRule(_localctx, 234, ObjectPascalParser::RulePredefinedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1321);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharExprContext ------------------------------------------------------------------

ObjectPascalParser::CharExprContext::CharExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::CARET() {
  return getToken(ObjectPascalParser::CARET, 0);
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::UPPERCASE() {
  return getToken(ObjectPascalParser::UPPERCASE, 0);
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::LOWERCASE() {
  return getToken(ObjectPascalParser::LOWERCASE, 0);
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::SHARP() {
  return getToken(ObjectPascalParser::SHARP, 0);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::CharExprContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::CharExprContext::radixNumber() {
  return getRuleContext<ObjectPascalParser::RadixNumberContext>(0);
}


size_t ObjectPascalParser::CharExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCharExpr;
}


std::any ObjectPascalParser::CharExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCharExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::charExpr() {
  CharExprContext *_localctx = _tracker.createInstance<CharExprContext>(_ctx, getState());
  enterRule(_localctx, 236, ObjectPascalParser::RuleCharExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1330);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CARET: {
        enterOuterAlt(_localctx, 1);
        setState(1323);
        match(ObjectPascalParser::CARET);
        setState(1324);
        _la = _input->LA(1);
        if (!(_la == ObjectPascalParser::UPPERCASE

        || _la == ObjectPascalParser::LOWERCASE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case ObjectPascalParser::SHARP: {
        enterOuterAlt(_localctx, 2);
        setState(1325);
        match(ObjectPascalParser::SHARP);
        setState(1328);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
        case 1: {
          setState(1326);
          integer();
          break;
        }

        case 2: {
          setState(1327);
          radixNumber();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstExprContext ------------------------------------------------------------------

ObjectPascalParser::ConstExprContext::ConstExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::NumberContext* ObjectPascalParser::ConstExprContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ConstExprContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::ConstExprContext::charExpr() {
  return getRuleContext<ObjectPascalParser::CharExprContext>(0);
}

std::vector<ObjectPascalParser::IntegerContext *> ObjectPascalParser::ConstExprContext::integer() {
  return getRuleContexts<ObjectPascalParser::IntegerContext>();
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::ConstExprContext::integer(size_t i) {
  return getRuleContext<ObjectPascalParser::IntegerContext>(i);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::ConstExprContext::additiveOp() {
  return getRuleContext<ObjectPascalParser::AdditiveOpContext>(0);
}


size_t ObjectPascalParser::ConstExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstExpr;
}


std::any ObjectPascalParser::ConstExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::constExpr() {
  ConstExprContext *_localctx = _tracker.createInstance<ConstExprContext>(_ctx, getState());
  enterRule(_localctx, 238, ObjectPascalParser::RuleConstExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1339);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
    case 1: {
      setState(1332);
      number();
      break;
    }

    case 2: {
      setState(1333);
      string();
      break;
    }

    case 3: {
      setState(1334);
      charExpr();
      break;
    }

    case 4: {
      setState(1335);
      integer();
      setState(1336);
      additiveOp();
      setState(1337);
      integer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitIdContext ------------------------------------------------------------------

ObjectPascalParser::UnitIdContext::UnitIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::UnitIdContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::UnitIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnitId;
}


std::any ObjectPascalParser::UnitIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnitId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::unitId() {
  UnitIdContext *_localctx = _tracker.createInstance<UnitIdContext>(_ctx, getState());
  enterRule(_localctx, 240, ObjectPascalParser::RuleUnitId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1345);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1341);
      match(ObjectPascalParser::Ident);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1342);
      match(ObjectPascalParser::Ident);
      setState(1343);
      match(ObjectPascalParser::DOT);
      setState(1344);
      match(ObjectPascalParser::Ident);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelIdContext ------------------------------------------------------------------

ObjectPascalParser::LabelIdContext::LabelIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelIdContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::LabelIdContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}


size_t ObjectPascalParser::LabelIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelId;
}


std::any ObjectPascalParser::LabelIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::labelId() {
  LabelIdContext *_localctx = _tracker.createInstance<LabelIdContext>(_ctx, getState());
  enterRule(_localctx, 242, ObjectPascalParser::RuleLabelId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1349);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1347);
      match(ObjectPascalParser::Ident);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1348);
      integer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

ObjectPascalParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringContext::StringLiteral() {
  return getToken(ObjectPascalParser::StringLiteral, 0);
}


size_t ObjectPascalParser::StringContext::getRuleIndex() const {
  return ObjectPascalParser::RuleString;
}


std::any ObjectPascalParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringContext* ObjectPascalParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 244, ObjectPascalParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1351);
    match(ObjectPascalParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

ObjectPascalParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::SignedIntegerContext *> ObjectPascalParser::NumberContext::signedInteger() {
  return getRuleContexts<ObjectPascalParser::SignedIntegerContext>();
}

ObjectPascalParser::SignedIntegerContext* ObjectPascalParser::NumberContext::signedInteger(size_t i) {
  return getRuleContext<ObjectPascalParser::SignedIntegerContext>(i);
}

tree::TerminalNode* ObjectPascalParser::NumberContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::NumberContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}

tree::TerminalNode* ObjectPascalParser::NumberContext::E() {
  return getToken(ObjectPascalParser::E, 0);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::NumberContext::radixNumber() {
  return getRuleContext<ObjectPascalParser::RadixNumberContext>(0);
}


size_t ObjectPascalParser::NumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleNumber;
}


std::any ObjectPascalParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 246, ObjectPascalParser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1363);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1353);
      signedInteger();
      setState(1360);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
      case 1: {
        setState(1354);
        match(ObjectPascalParser::DOT);
        setState(1355);
        integer();
        setState(1358);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::E) {
          setState(1356);
          match(ObjectPascalParser::E);
          setState(1357);
          signedInteger();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1362);
      radixNumber();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RadixNumberContext ------------------------------------------------------------------

ObjectPascalParser::RadixNumberContext::RadixNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::HexNumberContext* ObjectPascalParser::RadixNumberContext::hexNumber() {
  return getRuleContext<ObjectPascalParser::HexNumberContext>(0);
}

ObjectPascalParser::OctalNumberContext* ObjectPascalParser::RadixNumberContext::octalNumber() {
  return getRuleContext<ObjectPascalParser::OctalNumberContext>(0);
}


size_t ObjectPascalParser::RadixNumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRadixNumber;
}


std::any ObjectPascalParser::RadixNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRadixNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::radixNumber() {
  RadixNumberContext *_localctx = _tracker.createInstance<RadixNumberContext>(_ctx, getState());
  enterRule(_localctx, 248, ObjectPascalParser::RuleRadixNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1367);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1365);
      hexNumber();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1366);
      octalNumber();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HexNumberContext ------------------------------------------------------------------

ObjectPascalParser::HexNumberContext::HexNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::HexNumberContext::HEXADECIMALDIGIT() {
  return getTokens(ObjectPascalParser::HEXADECIMALDIGIT);
}

tree::TerminalNode* ObjectPascalParser::HexNumberContext::HEXADECIMALDIGIT(size_t i) {
  return getToken(ObjectPascalParser::HEXADECIMALDIGIT, i);
}


size_t ObjectPascalParser::HexNumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleHexNumber;
}


std::any ObjectPascalParser::HexNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitHexNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::HexNumberContext* ObjectPascalParser::hexNumber() {
  HexNumberContext *_localctx = _tracker.createInstance<HexNumberContext>(_ctx, getState());
  enterRule(_localctx, 250, ObjectPascalParser::RuleHexNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1372);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1369);
        match(ObjectPascalParser::HEXADECIMALDIGIT); 
      }
      setState(1374);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OctalNumberContext ------------------------------------------------------------------

ObjectPascalParser::OctalNumberContext::OctalNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::OctalNumberContext::OCTALDIGIT() {
  return getTokens(ObjectPascalParser::OCTALDIGIT);
}

tree::TerminalNode* ObjectPascalParser::OctalNumberContext::OCTALDIGIT(size_t i) {
  return getToken(ObjectPascalParser::OCTALDIGIT, i);
}


size_t ObjectPascalParser::OctalNumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOctalNumber;
}


std::any ObjectPascalParser::OctalNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOctalNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OctalNumberContext* ObjectPascalParser::octalNumber() {
  OctalNumberContext *_localctx = _tracker.createInstance<OctalNumberContext>(_ctx, getState());
  enterRule(_localctx, 252, ObjectPascalParser::RuleOctalNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1378);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1375);
        match(ObjectPascalParser::OCTALDIGIT); 
      }
      setState(1380);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerContext ------------------------------------------------------------------

ObjectPascalParser::IntegerContext::IntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IntegerContext::DIGIT() {
  return getTokens(ObjectPascalParser::DIGIT);
}

tree::TerminalNode* ObjectPascalParser::IntegerContext::DIGIT(size_t i) {
  return getToken(ObjectPascalParser::DIGIT, i);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::IntegerContext::radixNumber() {
  return getRuleContext<ObjectPascalParser::RadixNumberContext>(0);
}


size_t ObjectPascalParser::IntegerContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInteger;
}


std::any ObjectPascalParser::IntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInteger(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::integer() {
  IntegerContext *_localctx = _tracker.createInstance<IntegerContext>(_ctx, getState());
  enterRule(_localctx, 254, ObjectPascalParser::RuleInteger);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1388);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1384);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1381);
          match(ObjectPascalParser::DIGIT); 
        }
        setState(1386);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1387);
      radixNumber();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignedIntegerContext ------------------------------------------------------------------

ObjectPascalParser::SignedIntegerContext::SignedIntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::SignedIntegerContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SignedIntegerContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSignedInteger;
}


std::any ObjectPascalParser::SignedIntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSignedInteger(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SignedIntegerContext* ObjectPascalParser::signedInteger() {
  SignedIntegerContext *_localctx = _tracker.createInstance<SignedIntegerContext>(_ctx, getState());
  enterRule(_localctx, 256, ObjectPascalParser::RuleSignedInteger);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1390);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::PLUS

    || _la == ObjectPascalParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1391);
    integer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void ObjectPascalParser::initialize() {
  std::call_once(objectpascalparserParserOnceFlag, objectpascalparserParserInitialize);
}
