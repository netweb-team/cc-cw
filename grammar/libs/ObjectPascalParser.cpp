
// Generated from ObjectPascalParser.g4 by ANTLR 4.10.1


#include "ObjectPascalParserVisitor.h"

#include "ObjectPascalParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ObjectPascalParserStaticData final {
  ObjectPascalParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ObjectPascalParserStaticData(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData(ObjectPascalParserStaticData&&) = delete;
  ObjectPascalParserStaticData& operator=(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData& operator=(ObjectPascalParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag objectpascalparserParserOnceFlag;
ObjectPascalParserStaticData *objectpascalparserParserStaticData = nullptr;

void objectpascalparserParserInitialize() {
  assert(objectpascalparserParserStaticData == nullptr);
  auto staticData = std::make_unique<ObjectPascalParserStaticData>(
    std::vector<std::string>{
      "goal", "program", "unit", "package", "library", "programBlock", "usesClause", 
      "portabilityDirective", "interfaceSection", "interfaceDecl", "exportedHeading", 
      "implementationSection", "block", "exportsStmt", "exportsItem", "declSection", 
      "labelDeclSection", "constSection", "constantDecl", "typeSection", 
      "typeDecl", "typedConstant", "arrayConstant", "recordConstant", "recordFieldConstant", 
      "type", "restrictedType", "classRefType", "simpleType", "realType", 
      "ordinalType", "ordIdent", "variantType", "subrangeType", "enumeratedType", 
      "enumeratedTypeElement", "stringType", "strucType", "arrayType", "recType", 
      "fieldList", "fieldDecl", "variantSection", "recVariant", "setType", 
      "fileType", "pointerType", "procedureType", "varSection", "varDecl", 
      "expression", "simpleGrouped", "simpleExpression", "term", "factor", 
      "relOp", "addOp", "mulOp", "additiveOp", "designator", "setConstructor", 
      "setElement", "exprList", "statement", "stmtList", "simpleStatement", 
      "structStmt", "begin", "compoundStmt", "conditionalStmt", "procedureCall", 
      "assignmentStmt", "ifStmt", "caseStmt", "caseSelector", "caseLabel", 
      "loopStmt", "repeatStmt", "whileStmt", "forStmt", "withStmt", "tryExceptStmt", 
      "exceptionBlock", "tryFinallyStmt", "raiseStmt", "procedureDeclSection", 
      "procedureDecl", "functionDecl", "functionHeading", "procedureHeading", 
      "formalParameters", "formalParm", "parameter", "directive", "externalDirective", 
      "objectType", "objHeritage", "methodList", "methodHeading", "constructorHeading", 
      "destructorHeading", "objFieldList", "initSection", "classType", "classHeritage", 
      "classVisibility", "classFieldList", "classMethodList", "classPropertyList", 
      "propertyList", "propertyInterface", "propertyParameterList", "propertySpecifiers", 
      "interfaceType", "interfaceHeritage", "requiresClause", "containsClause", 
      "identList", "qualIdList", "qualId", "typeId", "predefinedType", "charExpr", 
      "constExpr", "unitId", "labelId", "string", "number", "radixNumber", 
      "hexNumber", "octalNumber", "integer", "signedInteger", "array", "var", 
      "not", "div", "and", "as", "if", "do", "for", "except", "function", 
      "procedure", "override", "protected"
    },
    std::vector<std::string>{
      "", "'program'", "'package'", "'end'", "'requires'", "'contains'", 
      "'library'", "'unit'", "'interface'", "'implementation'", "'intitialization'", 
      "'uses'", "'in'", "'label'", "'const'", "'type'", "'class'", "'of'", 
      "'real'", "'single'", "'double'", "'extended'", "'currency'", "'comp'", 
      "'shortint'", "'smallint'", "'integer'", "'byte'", "'longint'", "'word'", 
      "'boolean'", "'char'", "'widechar'", "'longchar'", "'pchar'", "'variant'", 
      "'olevariant'", "'string'", "'ansistring'", "'widestring'", "'packed'", 
      "'array'", "'Array'", "'record'", "'case'", "'set'", "'file'", "'object'", 
      "'virtual'", "'constructor'", "'destructor'", "'finalization'", "'public'", 
      "'protected'", "'Protected'", "'private'", "'published'", "'property'", 
      "'Property'", "'index'", "'read'", "'write'", "'stored'", "'default'", 
      "'nodefault'", "'implements'", "'var'", "'Var'", "'absolute'", "'absctuct'", 
      "'function'", "'Function'", "'procedure'", "'Procedure'", "'out'", 
      "'inherited'", "'goto'", "'begin'", "'Begin'", "'then'", "'else'", 
      "'if'", "'If'", "'repeat'", "'until'", "'while'", "'to'", "'downto'", 
      "'for'", "'For'", "'do'", "'Do'", "'DO'", "'with'", "'try'", "'finally'", 
      "'except'", "'Except'", "'on'", "'raise'", "'at'", "'is'", "'or'", 
      "'xor'", "'div'", "'mod'", "'and'", "'shl'", "'shr'", "'DIV'", "'AND'", 
      "'nil'", "'not'", "'Not'", "'NOT'", "'true'", "'True'", "'false'", 
      "'False'", "'UID'", "'NAME'", "'as'", "'As'", "'cdecl'", "'register'", 
      "'dynamic'", "'export'", "'external'", "'far'", "'forward'", "'message'", 
      "'override'", "'Override'", "'overload'", "'pascal'", "'reintroduce'", 
      "'safecall'", "'stdcall'", "'varargs'", "'local'", "'real48'", "';'", 
      "'.'", "'('", "')'", "'['", "']'", "','", "'='", "':'", "'..'", "'^'", 
      "':='", "'>'", "'<'", "'>='", "'<='", "'<>'", "'+'", "'-'", "'*'", 
      "'/'", "'@'", "'#'", "'</'", "'near'", "'inline'", "'assembler'", 
      "'platform'", "'deprecated'", "'cardinal'", "'int64'", "'longword'", 
      "'unicodestring'", "'\"'", "'E'", "'''"
    },
    std::vector<std::string>{
      "", "PROGRAM", "PACKAGE", "END", "REQUIRES", "CONTAINS", "LIBRARY", 
      "UNIT", "INTERFACE", "IMPLEMENTATION", "INITIALIZATION", "USES", "IN", 
      "LABEL", "CONST", "TYPE_", "CLASS", "OF", "REAL", "SINGLE", "DOUBLE", 
      "EXTENDED", "CURRENCY", "COMP", "SHORTINT", "SMALLINT", "INTEGER", 
      "BYTE", "LONGINT", "WORD", "BOOLEAN", "CHAR", "WIDECHAR", "LONGCHAR", 
      "PCHAR", "VARIANT", "OLEVARIANT", "STRING", "ANSISTRING", "WIDESTRING", 
      "PACKED", "ARRAY_1", "ARRAY_2", "RECORD", "CASE", "SET", "FILE", "OBJECT", 
      "VIRTUAL", "CONSTRUCTOR", "DESTRUCTOR", "FINALIZATION", "PUBLIC", 
      "PROTECTED_1", "PROTECTED_2", "PRIVATE", "PUBLISHED", "PROPERTY_1", 
      "PROPERTY_2", "INDEX", "READ", "WRITE", "STORED", "DEFAULT", "NODEFAULT", 
      "IMPLEMENTS", "VAR_1", "VAR_2", "ABSOLUTE", "ABSTRACT", "FUNCTION_1", 
      "FUNCTION_2", "PROCEDURE_1", "PROCEDURE_2", "OUT", "INHERITED", "GOTO", 
      "BEGIN_1", "BEGIN_2", "THEN", "ELSE", "IF_1", "IF_2", "REPEAT", "UNTIL", 
      "WHILE", "TO", "DOWNTO", "FOR_1", "FOR_2", "DO_1", "DO_2", "DO_3", 
      "WITH", "TRY", "FINALLY", "EXCEPT_1", "EXCEPT_2", "ON", "RAISE", "AT", 
      "IS", "OR", "XOR", "DIV_LITTLE", "MOD", "AND_LITTLE", "SHL", "SHR", 
      "DIV_BIG", "AND_BIG", "NIL", "NOT_1", "NOT_2", "NOT_3", "TRUE_1", 
      "TRUE_2", "FALSE_1", "FALSE_2", "UID", "NAME", "AS_1", "AS_2", "CDECL", 
      "REGISTER", "DYNAMIC", "EXPORT", "EXTERNAL", "FAR", "FORWARD", "MESSAGE", 
      "OVERRIDE_1", "OVERRIDE_2", "OVERLOAD", "PASCAL", "REINTRODUCE", "SAFECALL", 
      "STDCALL", "VARARGS", "LOCAL", "REAL48", "SEMI", "DOT", "LEFT_PAREN", 
      "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "COMMA", "ASSIGN", 
      "COLON", "DOT_DOT", "CARET", "COLON_ASSIGN", "GRATER", "LESS", "GRATER_EQUAL", 
      "LESS_EQUAL", "NOT_EQUAL", "PLUS", "MINUS", "STAR", "DIV_", "DOG", 
      "SHARP", "LESS_DIV", "NEAR", "INLINE", "ASSEMBLER", "PLATFORM", "DEPRECATED", 
      "CARDINAL", "INT64", "LONGWORD", "UNICODESTRING", "QUOTE", "E", "SINGLE_QUOTE", 
      "Ident", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", 
      "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", 
      "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace", 
      "Newline", "BlockComment", "LineComment", "IntegerLiteral", "CharacterLiteral", 
      "FloatingLiteral", "StringLiteral", "BooleanLiteral", "UserDefinedLiteral", 
      "MultiLineMacro", "OVERRIDE", "UPPERCASE", "LOWERCASE", "HEXADECIMALDIGIT", 
      "OCTALDIGIT", "DIGIT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,203,1514,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,1,0,1,0,1,0,1,0,3,0,299,8,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,307,8,1,
  	1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,316,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
  	3,1,3,1,3,3,3,328,8,3,1,3,3,3,331,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,5,3,5,343,8,5,1,5,5,5,346,8,5,10,5,12,5,349,9,5,1,5,1,5,1,6,1,6,
  	1,6,1,6,1,7,1,7,1,8,1,8,3,8,361,8,8,1,8,5,8,364,8,8,10,8,12,8,367,9,8,
  	1,9,1,9,1,9,1,9,3,9,373,8,9,1,10,1,10,1,10,3,10,378,8,10,1,10,1,10,1,
  	10,3,10,383,8,10,3,10,385,8,10,1,11,1,11,3,11,389,8,11,1,11,5,11,392,
  	8,11,10,11,12,11,395,9,11,1,12,3,12,398,8,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,5,13,406,8,13,10,13,12,13,409,9,13,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,3,14,418,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,426,8,14,3,14,428,
  	8,14,1,15,1,15,1,15,1,15,1,15,3,15,435,8,15,1,16,1,16,1,16,1,17,1,17,
  	1,17,1,17,5,17,444,8,17,10,17,12,17,447,9,17,1,18,1,18,1,18,1,18,3,18,
  	453,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,461,8,18,3,18,463,8,18,1,
  	19,1,19,1,19,1,19,4,19,469,8,19,11,19,12,19,470,1,20,1,20,1,20,3,20,476,
  	8,20,1,20,1,20,3,20,480,8,20,1,20,1,20,1,20,3,20,485,8,20,1,20,1,20,3,
  	20,489,8,20,3,20,491,8,20,1,21,1,21,1,21,3,21,496,8,21,1,22,1,22,1,22,
  	1,22,5,22,502,8,22,10,22,12,22,505,9,22,1,22,1,22,1,23,1,23,1,23,1,23,
  	5,23,513,8,23,10,23,12,23,516,9,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,532,8,25,1,26,1,26,1,26,3,26,
  	537,8,26,1,27,1,27,1,27,1,27,1,28,1,28,3,28,545,8,28,1,29,1,29,1,30,1,
  	30,1,30,3,30,552,8,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,
  	34,1,34,1,34,5,34,566,8,34,10,34,12,34,569,9,34,1,34,1,34,1,35,1,35,1,
  	35,3,35,576,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,587,
  	8,36,1,37,3,37,590,8,37,1,37,1,37,1,37,1,37,1,37,3,37,597,8,37,3,37,599,
  	8,37,1,38,1,38,1,38,1,38,1,38,5,38,606,8,38,10,38,12,38,609,9,38,1,38,
  	1,38,3,38,613,8,38,1,38,1,38,1,38,3,38,618,8,38,1,39,1,39,3,39,622,8,
  	39,1,39,1,39,3,39,626,8,39,1,40,1,40,1,40,4,40,631,8,40,11,40,12,40,632,
  	1,40,3,40,636,8,40,1,40,3,40,639,8,40,1,41,1,41,1,41,1,41,3,41,645,8,
  	41,1,42,1,42,1,42,3,42,650,8,42,1,42,1,42,1,42,1,42,1,42,5,42,657,8,42,
  	10,42,12,42,660,9,42,1,43,1,43,1,43,5,43,665,8,43,10,43,12,43,668,9,43,
  	1,43,1,43,1,43,3,43,673,8,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,681,8,
  	44,1,45,1,45,1,45,1,45,3,45,687,8,45,1,46,1,46,1,46,3,46,692,8,46,1,47,
  	1,47,3,47,696,8,47,1,47,1,47,3,47,700,8,47,1,48,1,48,1,48,1,48,5,48,706,
  	8,48,10,48,12,48,709,9,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,717,8,49,
  	1,49,1,49,3,49,721,8,49,1,49,3,49,724,8,49,1,50,1,50,1,50,1,50,5,50,730,
  	8,50,10,50,12,50,733,9,50,1,51,1,51,1,51,1,51,1,51,3,51,740,8,51,1,52,
  	3,52,743,8,52,1,52,1,52,1,52,1,52,5,52,749,8,52,10,52,12,52,752,9,52,
  	1,53,1,53,1,53,1,53,5,53,758,8,53,10,53,12,53,761,9,53,1,54,1,54,1,54,
  	1,54,1,54,3,54,768,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,788,8,54,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,3,55,798,8,55,1,56,1,56,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,3,57,809,8,57,1,58,1,58,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,5,59,821,8,59,10,59,12,59,824,9,59,1,60,1,60,1,60,1,60,
  	5,60,830,8,60,10,60,12,60,833,9,60,1,60,1,60,1,61,1,61,1,61,3,61,840,
  	8,61,1,62,1,62,1,62,5,62,845,8,62,10,62,12,62,848,9,62,1,63,1,63,1,63,
  	3,63,853,8,63,1,63,1,63,3,63,857,8,63,1,64,1,64,1,64,5,64,862,8,64,10,
  	64,12,64,865,9,64,1,65,1,65,1,65,1,65,1,65,3,65,872,8,65,1,66,1,66,1,
  	66,1,66,1,66,1,66,1,66,3,66,881,8,66,1,67,1,67,1,68,1,68,1,68,3,68,888,
  	8,68,1,68,1,68,1,69,1,69,3,69,894,8,69,1,70,1,70,1,70,3,70,899,8,70,1,
  	70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,913,8,
  	72,1,73,1,73,1,73,1,73,1,73,1,73,5,73,921,8,73,10,73,12,73,924,9,73,1,
  	73,1,73,3,73,928,8,73,1,73,3,73,931,8,73,1,73,1,73,1,74,1,74,1,74,5,74,
  	938,8,74,10,74,12,74,941,9,74,1,74,1,74,1,74,1,75,1,75,1,75,3,75,949,
  	8,75,1,76,1,76,1,76,3,76,954,8,76,1,77,1,77,1,77,3,77,959,8,77,1,77,1,
  	77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
  	79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,5,81,987,8,81,10,
  	81,12,81,990,9,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,999,8,82,1,
  	82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1008,8,82,1,82,1,82,1,82,1,82,5,
  	82,1014,8,82,10,82,12,82,1017,9,82,1,82,1,82,5,82,1021,8,82,10,82,12,
  	82,1024,9,82,1,82,3,82,1027,8,82,1,83,1,83,1,83,1,83,1,83,3,83,1034,8,
  	83,1,83,1,83,1,84,1,84,3,84,1040,8,84,1,84,1,84,3,84,1044,8,84,1,85,1,
  	85,3,85,1048,8,85,1,86,1,86,1,86,3,86,1053,8,86,1,86,3,86,1056,8,86,1,
  	86,1,86,1,86,1,87,1,87,1,87,3,87,1064,8,87,1,87,3,87,1067,8,87,1,87,1,
  	87,1,87,1,88,1,88,1,88,3,88,1075,8,88,1,88,1,88,1,88,3,88,1080,8,88,1,
  	89,1,89,1,89,3,89,1085,8,89,1,90,1,90,1,90,1,90,5,90,1091,8,90,10,90,
  	12,90,1094,9,90,1,90,1,90,1,91,1,91,1,91,3,91,1101,8,91,1,91,1,91,1,92,
  	1,92,1,92,1,92,1,92,3,92,1110,8,92,1,92,1,92,1,92,3,92,1115,8,92,3,92,
  	1117,8,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1125,8,92,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,3,93,1149,8,93,1,94,1,94,1,94,1,94,5,94,1155,
  	8,94,10,94,12,94,1158,9,94,3,94,1160,8,94,3,94,1162,8,94,1,95,1,95,3,
  	95,1166,8,95,1,95,3,95,1169,8,95,1,95,3,95,1172,8,95,1,95,1,95,1,96,1,
  	96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,3,97,1185,8,97,3,97,1187,8,97,1,
  	97,1,97,5,97,1191,8,97,10,97,12,97,1194,9,97,1,98,3,98,1197,8,98,1,98,
  	1,98,3,98,1201,8,98,1,98,1,98,3,98,1205,8,98,1,99,1,99,1,99,3,99,1210,
  	8,99,1,100,1,100,1,100,3,100,1215,8,100,1,101,1,101,1,101,1,101,1,101,
  	1,101,1,102,1,102,1,102,1,102,3,102,1227,8,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,3,102,1236,8,102,1,103,1,103,3,103,1240,8,103,1,103,
  	3,103,1243,8,103,1,103,3,103,1246,8,103,1,103,3,103,1249,8,103,1,103,
  	3,103,1252,8,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
  	1,105,3,105,1264,8,105,1,106,1,106,1,106,1,106,5,106,1270,8,106,10,106,
  	12,106,1273,9,106,1,107,1,107,1,107,1,107,5,107,1279,8,107,10,107,12,
  	107,1282,9,107,1,108,1,108,1,108,1,108,5,108,1288,8,108,10,108,12,108,
  	1291,9,108,1,109,1,109,1,109,3,109,1296,8,109,1,109,3,109,1299,8,109,
  	1,109,3,109,1302,8,109,1,110,3,110,1305,8,110,1,110,1,110,1,110,1,111,
  	1,111,1,111,1,111,1,111,1,111,5,111,1316,8,111,10,111,12,111,1319,9,111,
  	1,111,1,111,1,112,1,112,3,112,1325,8,112,1,112,1,112,3,112,1329,8,112,
  	1,112,1,112,3,112,1333,8,112,1,112,1,112,1,112,3,112,1338,8,112,3,112,
  	1340,8,112,1,112,1,112,1,112,3,112,1345,8,112,1,112,1,112,3,112,1349,
  	8,112,1,113,1,113,3,113,1353,8,113,1,113,3,113,1356,8,113,1,113,3,113,
  	1359,8,113,1,113,1,113,1,114,1,114,1,114,1,114,1,115,1,115,4,115,1369,
  	8,115,11,115,12,115,1370,1,115,1,115,1,116,1,116,4,116,1377,8,116,11,
  	116,12,116,1378,1,116,1,116,1,117,1,117,1,117,4,117,1386,8,117,11,117,
  	12,117,1387,1,118,1,118,1,118,4,118,1393,8,118,11,118,12,118,1394,1,119,
  	1,119,1,119,1,119,4,119,1401,8,119,11,119,12,119,1402,3,119,1405,8,119,
  	1,120,1,120,1,120,3,120,1410,8,120,1,120,1,120,1,121,1,121,1,122,1,122,
  	1,122,1,122,1,122,3,122,1421,8,122,3,122,1423,8,122,1,123,1,123,1,123,
  	1,123,1,123,1,123,1,123,3,123,1432,8,123,1,124,1,124,1,124,1,124,3,124,
  	1438,8,124,1,125,1,125,3,125,1442,8,125,1,126,1,126,1,127,1,127,1,127,
  	1,127,1,127,3,127,1451,8,127,3,127,1453,8,127,1,127,3,127,1456,8,127,
  	1,128,1,128,3,128,1460,8,128,1,129,5,129,1463,8,129,10,129,12,129,1466,
  	9,129,1,130,5,130,1469,8,130,10,130,12,130,1472,9,130,1,131,5,131,1475,
  	8,131,10,131,12,131,1478,9,131,1,131,3,131,1481,8,131,1,132,1,132,1,132,
  	1,133,1,133,1,134,1,134,1,135,1,135,1,136,1,136,1,137,1,137,1,138,1,138,
  	1,139,1,139,1,140,1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,144,
  	1,145,1,145,1,146,1,146,1,146,0,0,147,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  	256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
  	292,0,25,2,0,6,6,168,169,2,0,18,23,140,140,3,0,24,32,34,34,170,172,1,
  	0,35,36,1,0,158,159,2,0,102,103,158,159,1,0,158,160,1,0,77,78,1,0,86,
  	87,3,0,18,18,26,27,30,31,1,0,199,200,1,0,41,42,1,0,66,67,1,0,112,114,
  	2,0,104,104,109,109,2,0,106,106,110,110,1,0,121,122,1,0,81,82,1,0,90,
  	92,1,0,88,89,1,0,96,97,1,0,70,71,1,0,72,73,1,0,131,132,1,0,53,54,1627,
  	0,298,1,0,0,0,2,300,1,0,0,0,4,312,1,0,0,0,6,323,1,0,0,0,8,335,1,0,0,0,
  	10,342,1,0,0,0,12,352,1,0,0,0,14,356,1,0,0,0,16,358,1,0,0,0,18,372,1,
  	0,0,0,20,384,1,0,0,0,22,386,1,0,0,0,24,397,1,0,0,0,26,401,1,0,0,0,28,
  	427,1,0,0,0,30,434,1,0,0,0,32,436,1,0,0,0,34,439,1,0,0,0,36,462,1,0,0,
  	0,38,464,1,0,0,0,40,490,1,0,0,0,42,495,1,0,0,0,44,497,1,0,0,0,46,508,
  	1,0,0,0,48,519,1,0,0,0,50,531,1,0,0,0,52,536,1,0,0,0,54,538,1,0,0,0,56,
  	544,1,0,0,0,58,546,1,0,0,0,60,551,1,0,0,0,62,553,1,0,0,0,64,555,1,0,0,
  	0,66,557,1,0,0,0,68,561,1,0,0,0,70,572,1,0,0,0,72,586,1,0,0,0,74,589,
  	1,0,0,0,76,600,1,0,0,0,78,619,1,0,0,0,80,630,1,0,0,0,82,640,1,0,0,0,84,
  	646,1,0,0,0,86,661,1,0,0,0,88,676,1,0,0,0,90,682,1,0,0,0,92,688,1,0,0,
  	0,94,695,1,0,0,0,96,701,1,0,0,0,98,710,1,0,0,0,100,725,1,0,0,0,102,739,
  	1,0,0,0,104,742,1,0,0,0,106,753,1,0,0,0,108,787,1,0,0,0,110,797,1,0,0,
  	0,112,799,1,0,0,0,114,808,1,0,0,0,116,810,1,0,0,0,118,812,1,0,0,0,120,
  	825,1,0,0,0,122,836,1,0,0,0,124,841,1,0,0,0,126,852,1,0,0,0,128,858,1,
  	0,0,0,130,871,1,0,0,0,132,880,1,0,0,0,134,882,1,0,0,0,136,884,1,0,0,0,
  	138,893,1,0,0,0,140,895,1,0,0,0,142,902,1,0,0,0,144,906,1,0,0,0,146,914,
  	1,0,0,0,148,934,1,0,0,0,150,945,1,0,0,0,152,953,1,0,0,0,154,955,1,0,0,
  	0,156,963,1,0,0,0,158,968,1,0,0,0,160,977,1,0,0,0,162,982,1,0,0,0,164,
  	995,1,0,0,0,166,1028,1,0,0,0,168,1037,1,0,0,0,170,1047,1,0,0,0,172,1049,
  	1,0,0,0,174,1060,1,0,0,0,176,1071,1,0,0,0,178,1081,1,0,0,0,180,1086,1,
  	0,0,0,182,1100,1,0,0,0,184,1124,1,0,0,0,186,1148,1,0,0,0,188,1150,1,0,
  	0,0,190,1163,1,0,0,0,192,1175,1,0,0,0,194,1192,1,0,0,0,196,1204,1,0,0,
  	0,198,1206,1,0,0,0,200,1211,1,0,0,0,202,1216,1,0,0,0,204,1235,1,0,0,0,
  	206,1237,1,0,0,0,208,1255,1,0,0,0,210,1263,1,0,0,0,212,1271,1,0,0,0,214,
  	1280,1,0,0,0,216,1289,1,0,0,0,218,1292,1,0,0,0,220,1304,1,0,0,0,222,1309,
  	1,0,0,0,224,1324,1,0,0,0,226,1350,1,0,0,0,228,1362,1,0,0,0,230,1366,1,
  	0,0,0,232,1374,1,0,0,0,234,1382,1,0,0,0,236,1389,1,0,0,0,238,1396,1,0,
  	0,0,240,1409,1,0,0,0,242,1413,1,0,0,0,244,1422,1,0,0,0,246,1431,1,0,0,
  	0,248,1437,1,0,0,0,250,1441,1,0,0,0,252,1443,1,0,0,0,254,1455,1,0,0,0,
  	256,1459,1,0,0,0,258,1464,1,0,0,0,260,1470,1,0,0,0,262,1480,1,0,0,0,264,
  	1482,1,0,0,0,266,1485,1,0,0,0,268,1487,1,0,0,0,270,1489,1,0,0,0,272,1491,
  	1,0,0,0,274,1493,1,0,0,0,276,1495,1,0,0,0,278,1497,1,0,0,0,280,1499,1,
  	0,0,0,282,1501,1,0,0,0,284,1503,1,0,0,0,286,1505,1,0,0,0,288,1507,1,0,
  	0,0,290,1509,1,0,0,0,292,1511,1,0,0,0,294,299,3,2,1,0,295,299,3,6,3,0,
  	296,299,3,8,4,0,297,299,3,4,2,0,298,294,1,0,0,0,298,295,1,0,0,0,298,296,
  	1,0,0,0,298,297,1,0,0,0,299,1,1,0,0,0,300,301,5,1,0,0,301,306,5,177,0,
  	0,302,303,5,143,0,0,303,304,3,234,117,0,304,305,5,144,0,0,305,307,1,0,
  	0,0,306,302,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,5,141,0,0,
  	309,310,3,10,5,0,310,311,5,142,0,0,311,3,1,0,0,0,312,313,5,7,0,0,313,
  	315,3,238,119,0,314,316,3,14,7,0,315,314,1,0,0,0,315,316,1,0,0,0,316,
  	317,1,0,0,0,317,318,5,141,0,0,318,319,3,16,8,0,319,320,3,22,11,0,320,
  	321,3,204,102,0,321,322,5,142,0,0,322,5,1,0,0,0,323,324,5,2,0,0,324,325,
  	5,177,0,0,325,327,5,141,0,0,326,328,3,230,115,0,327,326,1,0,0,0,327,328,
  	1,0,0,0,328,330,1,0,0,0,329,331,3,232,116,0,330,329,1,0,0,0,330,331,1,
  	0,0,0,331,332,1,0,0,0,332,333,5,3,0,0,333,334,5,142,0,0,334,7,1,0,0,0,
  	335,336,5,6,0,0,336,337,5,177,0,0,337,338,5,141,0,0,338,339,3,10,5,0,
  	339,340,5,142,0,0,340,9,1,0,0,0,341,343,3,12,6,0,342,341,1,0,0,0,342,
  	343,1,0,0,0,343,347,1,0,0,0,344,346,3,30,15,0,345,344,1,0,0,0,346,349,
  	1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,
  	0,350,351,3,136,68,0,351,11,1,0,0,0,352,353,5,11,0,0,353,354,3,236,118,
  	0,354,355,5,141,0,0,355,13,1,0,0,0,356,357,7,0,0,0,357,15,1,0,0,0,358,
  	360,5,8,0,0,359,361,3,12,6,0,360,359,1,0,0,0,360,361,1,0,0,0,361,365,
  	1,0,0,0,362,364,3,18,9,0,363,362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,
  	0,0,365,366,1,0,0,0,366,17,1,0,0,0,367,365,1,0,0,0,368,373,3,34,17,0,
  	369,373,3,38,19,0,370,373,3,96,48,0,371,373,3,20,10,0,372,368,1,0,0,0,
  	372,369,1,0,0,0,372,370,1,0,0,0,372,371,1,0,0,0,373,19,1,0,0,0,374,375,
  	3,178,89,0,375,377,5,141,0,0,376,378,3,186,93,0,377,376,1,0,0,0,377,378,
  	1,0,0,0,378,385,1,0,0,0,379,380,3,176,88,0,380,382,5,141,0,0,381,383,
  	3,186,93,0,382,381,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,374,1,
  	0,0,0,384,379,1,0,0,0,385,21,1,0,0,0,386,388,5,9,0,0,387,389,3,12,6,0,
  	388,387,1,0,0,0,388,389,1,0,0,0,389,393,1,0,0,0,390,392,3,30,15,0,391,
  	390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,23,1,
  	0,0,0,395,393,1,0,0,0,396,398,3,30,15,0,397,396,1,0,0,0,397,398,1,0,0,
  	0,398,399,1,0,0,0,399,400,3,136,68,0,400,25,1,0,0,0,401,402,5,126,0,0,
  	402,407,3,28,14,0,403,404,5,147,0,0,404,406,3,28,14,0,405,403,1,0,0,0,
  	406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,27,1,0,0,0,409,407,
  	1,0,0,0,410,417,5,177,0,0,411,418,5,120,0,0,412,413,5,59,0,0,413,414,
  	5,176,0,0,414,415,3,246,123,0,415,416,5,176,0,0,416,418,1,0,0,0,417,411,
  	1,0,0,0,417,412,1,0,0,0,417,418,1,0,0,0,418,428,1,0,0,0,419,426,5,59,
  	0,0,420,421,5,120,0,0,421,422,5,176,0,0,422,423,3,246,123,0,423,424,5,
  	176,0,0,424,426,1,0,0,0,425,419,1,0,0,0,425,420,1,0,0,0,425,426,1,0,0,
  	0,426,428,1,0,0,0,427,410,1,0,0,0,427,425,1,0,0,0,428,29,1,0,0,0,429,
  	435,3,32,16,0,430,435,3,34,17,0,431,435,3,38,19,0,432,435,3,96,48,0,433,
  	435,3,170,85,0,434,429,1,0,0,0,434,430,1,0,0,0,434,431,1,0,0,0,434,432,
  	1,0,0,0,434,433,1,0,0,0,435,31,1,0,0,0,436,437,5,13,0,0,437,438,3,250,
  	125,0,438,33,1,0,0,0,439,445,5,14,0,0,440,441,3,36,18,0,441,442,5,141,
  	0,0,442,444,1,0,0,0,443,440,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,
  	446,1,0,0,0,446,35,1,0,0,0,447,445,1,0,0,0,448,449,5,177,0,0,449,450,
  	5,148,0,0,450,452,3,246,123,0,451,453,3,14,7,0,452,451,1,0,0,0,452,453,
  	1,0,0,0,453,463,1,0,0,0,454,455,5,177,0,0,455,456,5,149,0,0,456,457,3,
  	240,120,0,457,458,5,148,0,0,458,460,3,42,21,0,459,461,3,14,7,0,460,459,
  	1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,448,1,0,0,0,462,454,1,0,0,
  	0,463,37,1,0,0,0,464,468,5,15,0,0,465,466,3,40,20,0,466,467,5,141,0,0,
  	467,469,1,0,0,0,468,465,1,0,0,0,469,470,1,0,0,0,470,468,1,0,0,0,470,471,
  	1,0,0,0,471,39,1,0,0,0,472,473,5,177,0,0,473,475,5,148,0,0,474,476,5,
  	15,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,479,3,50,25,
  	0,478,480,3,14,7,0,479,478,1,0,0,0,479,480,1,0,0,0,480,491,1,0,0,0,481,
  	482,5,177,0,0,482,484,5,148,0,0,483,485,5,15,0,0,484,483,1,0,0,0,484,
  	485,1,0,0,0,485,486,1,0,0,0,486,488,3,52,26,0,487,489,3,14,7,0,488,487,
  	1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,472,1,0,0,0,490,481,1,0,0,
  	0,491,41,1,0,0,0,492,496,3,246,123,0,493,496,3,44,22,0,494,496,3,46,23,
  	0,495,492,1,0,0,0,495,493,1,0,0,0,495,494,1,0,0,0,496,43,1,0,0,0,497,
  	498,5,143,0,0,498,503,3,42,21,0,499,500,5,147,0,0,500,502,3,42,21,0,501,
  	499,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,506,1,
  	0,0,0,505,503,1,0,0,0,506,507,5,144,0,0,507,45,1,0,0,0,508,514,5,143,
  	0,0,509,510,3,48,24,0,510,511,5,141,0,0,511,513,1,0,0,0,512,509,1,0,0,
  	0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,
  	514,1,0,0,0,517,518,5,144,0,0,518,47,1,0,0,0,519,520,5,177,0,0,520,521,
  	5,149,0,0,521,522,3,42,21,0,522,49,1,0,0,0,523,532,3,240,120,0,524,532,
  	3,56,28,0,525,532,3,74,37,0,526,532,3,92,46,0,527,532,3,72,36,0,528,532,
  	3,94,47,0,529,532,3,64,32,0,530,532,3,54,27,0,531,523,1,0,0,0,531,524,
  	1,0,0,0,531,525,1,0,0,0,531,526,1,0,0,0,531,527,1,0,0,0,531,528,1,0,0,
  	0,531,529,1,0,0,0,531,530,1,0,0,0,532,51,1,0,0,0,533,537,3,190,95,0,534,
  	537,3,206,103,0,535,537,3,226,113,0,536,533,1,0,0,0,536,534,1,0,0,0,536,
  	535,1,0,0,0,537,53,1,0,0,0,538,539,5,16,0,0,539,540,5,17,0,0,540,541,
  	3,240,120,0,541,55,1,0,0,0,542,545,3,60,30,0,543,545,3,58,29,0,544,542,
  	1,0,0,0,544,543,1,0,0,0,545,57,1,0,0,0,546,547,7,1,0,0,547,59,1,0,0,0,
  	548,552,3,66,33,0,549,552,3,68,34,0,550,552,3,62,31,0,551,548,1,0,0,0,
  	551,549,1,0,0,0,551,550,1,0,0,0,552,61,1,0,0,0,553,554,7,2,0,0,554,63,
  	1,0,0,0,555,556,7,3,0,0,556,65,1,0,0,0,557,558,3,246,123,0,558,559,5,
  	150,0,0,559,560,3,246,123,0,560,67,1,0,0,0,561,562,5,143,0,0,562,567,
  	3,70,35,0,563,564,5,147,0,0,564,566,3,70,35,0,565,563,1,0,0,0,566,569,
  	1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,567,1,0,0,
  	0,570,571,5,144,0,0,571,69,1,0,0,0,572,575,5,177,0,0,573,574,5,148,0,
  	0,574,576,3,246,123,0,575,573,1,0,0,0,575,576,1,0,0,0,576,71,1,0,0,0,
  	577,587,5,37,0,0,578,587,5,38,0,0,579,587,5,39,0,0,580,587,5,173,0,0,
  	581,582,5,37,0,0,582,583,5,145,0,0,583,584,3,246,123,0,584,585,5,146,
  	0,0,585,587,1,0,0,0,586,577,1,0,0,0,586,578,1,0,0,0,586,579,1,0,0,0,586,
  	580,1,0,0,0,586,581,1,0,0,0,587,73,1,0,0,0,588,590,5,40,0,0,589,588,1,
  	0,0,0,589,590,1,0,0,0,590,598,1,0,0,0,591,599,3,76,38,0,592,599,3,88,
  	44,0,593,599,3,90,45,0,594,596,3,78,39,0,595,597,5,40,0,0,596,595,1,0,
  	0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,591,1,0,0,0,598,592,1,0,0,0,598,
  	593,1,0,0,0,598,594,1,0,0,0,599,75,1,0,0,0,600,612,3,266,133,0,601,602,
  	5,145,0,0,602,607,3,60,30,0,603,604,5,147,0,0,604,606,3,60,30,0,605,603,
  	1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,
  	0,609,607,1,0,0,0,610,611,5,146,0,0,611,613,1,0,0,0,612,601,1,0,0,0,612,
  	613,1,0,0,0,613,614,1,0,0,0,614,615,5,17,0,0,615,617,3,50,25,0,616,618,
  	3,14,7,0,617,616,1,0,0,0,617,618,1,0,0,0,618,77,1,0,0,0,619,621,5,43,
  	0,0,620,622,3,80,40,0,621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,
  	623,625,5,3,0,0,624,626,3,14,7,0,625,624,1,0,0,0,625,626,1,0,0,0,626,
  	79,1,0,0,0,627,628,3,82,41,0,628,629,5,141,0,0,629,631,1,0,0,0,630,627,
  	1,0,0,0,631,632,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,
  	0,634,636,3,84,42,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,
  	639,5,141,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,81,1,0,0,0,640,641,
  	3,234,117,0,641,642,5,149,0,0,642,644,3,50,25,0,643,645,3,14,7,0,644,
  	643,1,0,0,0,644,645,1,0,0,0,645,83,1,0,0,0,646,649,5,44,0,0,647,648,5,
  	177,0,0,648,650,5,149,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,651,1,0,
  	0,0,651,652,3,240,120,0,652,653,5,17,0,0,653,658,3,86,43,0,654,655,5,
  	141,0,0,655,657,3,86,43,0,656,654,1,0,0,0,657,660,1,0,0,0,658,656,1,0,
  	0,0,658,659,1,0,0,0,659,85,1,0,0,0,660,658,1,0,0,0,661,666,3,246,123,
  	0,662,663,5,147,0,0,663,665,3,246,123,0,664,662,1,0,0,0,665,668,1,0,0,
  	0,666,664,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,666,1,0,0,0,669,
  	670,5,149,0,0,670,672,5,143,0,0,671,673,3,80,40,0,672,671,1,0,0,0,672,
  	673,1,0,0,0,673,674,1,0,0,0,674,675,5,144,0,0,675,87,1,0,0,0,676,677,
  	5,45,0,0,677,678,5,17,0,0,678,680,3,60,30,0,679,681,3,14,7,0,680,679,
  	1,0,0,0,680,681,1,0,0,0,681,89,1,0,0,0,682,683,5,46,0,0,683,684,5,17,
  	0,0,684,686,3,240,120,0,685,687,3,14,7,0,686,685,1,0,0,0,686,687,1,0,
  	0,0,687,91,1,0,0,0,688,689,5,151,0,0,689,691,3,240,120,0,690,692,3,14,
  	7,0,691,690,1,0,0,0,691,692,1,0,0,0,692,93,1,0,0,0,693,696,3,178,89,0,
  	694,696,3,176,88,0,695,693,1,0,0,0,695,694,1,0,0,0,696,699,1,0,0,0,697,
  	698,5,17,0,0,698,700,5,47,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,95,
  	1,0,0,0,701,702,3,268,134,0,702,707,3,98,49,0,703,704,5,141,0,0,704,706,
  	3,98,49,0,705,703,1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,
  	0,0,708,97,1,0,0,0,709,707,1,0,0,0,710,711,3,234,117,0,711,712,5,149,
  	0,0,712,720,3,50,25,0,713,716,5,68,0,0,714,717,5,177,0,0,715,717,3,246,
  	123,0,716,714,1,0,0,0,716,715,1,0,0,0,717,721,1,0,0,0,718,719,5,148,0,
  	0,719,721,3,246,123,0,720,713,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,
  	721,723,1,0,0,0,722,724,3,14,7,0,723,722,1,0,0,0,723,724,1,0,0,0,724,
  	99,1,0,0,0,725,731,3,102,51,0,726,727,3,110,55,0,727,728,3,102,51,0,728,
  	730,1,0,0,0,729,726,1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,
  	0,0,0,732,101,1,0,0,0,733,731,1,0,0,0,734,740,3,104,52,0,735,736,5,143,
  	0,0,736,737,3,104,52,0,737,738,5,144,0,0,738,740,1,0,0,0,739,734,1,0,
  	0,0,739,735,1,0,0,0,740,103,1,0,0,0,741,743,7,4,0,0,742,741,1,0,0,0,742,
  	743,1,0,0,0,743,744,1,0,0,0,744,750,3,106,53,0,745,746,3,112,56,0,746,
  	747,3,106,53,0,747,749,1,0,0,0,748,745,1,0,0,0,749,752,1,0,0,0,750,748,
  	1,0,0,0,750,751,1,0,0,0,751,105,1,0,0,0,752,750,1,0,0,0,753,759,3,108,
  	54,0,754,755,3,114,57,0,755,756,3,108,54,0,756,758,1,0,0,0,757,754,1,
  	0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,107,1,0,0,0,
  	761,759,1,0,0,0,762,767,3,118,59,0,763,764,5,143,0,0,764,765,3,124,62,
  	0,765,766,5,144,0,0,766,768,1,0,0,0,767,763,1,0,0,0,767,768,1,0,0,0,768,
  	788,1,0,0,0,769,770,5,162,0,0,770,788,3,118,59,0,771,788,3,254,127,0,
  	772,788,3,252,126,0,773,788,5,111,0,0,774,775,5,143,0,0,775,776,3,100,
  	50,0,776,777,5,144,0,0,777,788,1,0,0,0,778,779,3,270,135,0,779,780,3,
  	108,54,0,780,788,1,0,0,0,781,788,3,120,60,0,782,783,3,240,120,0,783,784,
  	5,143,0,0,784,785,3,100,50,0,785,786,5,144,0,0,786,788,1,0,0,0,787,762,
  	1,0,0,0,787,769,1,0,0,0,787,771,1,0,0,0,787,772,1,0,0,0,787,773,1,0,0,
  	0,787,774,1,0,0,0,787,778,1,0,0,0,787,781,1,0,0,0,787,782,1,0,0,0,788,
  	109,1,0,0,0,789,798,5,153,0,0,790,798,5,154,0,0,791,798,5,156,0,0,792,
  	798,5,155,0,0,793,798,5,157,0,0,794,798,5,12,0,0,795,798,5,101,0,0,796,
  	798,3,276,138,0,797,789,1,0,0,0,797,790,1,0,0,0,797,791,1,0,0,0,797,792,
  	1,0,0,0,797,793,1,0,0,0,797,794,1,0,0,0,797,795,1,0,0,0,797,796,1,0,0,
  	0,798,111,1,0,0,0,799,800,7,5,0,0,800,113,1,0,0,0,801,809,5,160,0,0,802,
  	809,5,161,0,0,803,809,3,272,136,0,804,809,5,105,0,0,805,809,3,274,137,
  	0,806,809,5,107,0,0,807,809,5,108,0,0,808,801,1,0,0,0,808,802,1,0,0,0,
  	808,803,1,0,0,0,808,804,1,0,0,0,808,805,1,0,0,0,808,806,1,0,0,0,808,807,
  	1,0,0,0,809,115,1,0,0,0,810,811,7,6,0,0,811,117,1,0,0,0,812,822,3,238,
  	119,0,813,814,5,142,0,0,814,821,5,177,0,0,815,816,5,145,0,0,816,817,3,
  	124,62,0,817,818,5,146,0,0,818,821,1,0,0,0,819,821,5,151,0,0,820,813,
  	1,0,0,0,820,815,1,0,0,0,820,819,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,
  	0,822,823,1,0,0,0,823,119,1,0,0,0,824,822,1,0,0,0,825,826,5,145,0,0,826,
  	831,3,122,61,0,827,828,5,147,0,0,828,830,3,122,61,0,829,827,1,0,0,0,830,
  	833,1,0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,831,1,
  	0,0,0,834,835,5,146,0,0,835,121,1,0,0,0,836,839,3,100,50,0,837,838,5,
  	150,0,0,838,840,3,100,50,0,839,837,1,0,0,0,839,840,1,0,0,0,840,123,1,
  	0,0,0,841,846,3,100,50,0,842,843,5,147,0,0,843,845,3,100,50,0,844,842,
  	1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,846,847,1,0,0,0,847,125,1,0,0,
  	0,848,846,1,0,0,0,849,850,3,250,125,0,850,851,5,149,0,0,851,853,1,0,0,
  	0,852,849,1,0,0,0,852,853,1,0,0,0,853,856,1,0,0,0,854,857,3,130,65,0,
  	855,857,3,132,66,0,856,854,1,0,0,0,856,855,1,0,0,0,857,127,1,0,0,0,858,
  	863,3,126,63,0,859,860,5,141,0,0,860,862,3,126,63,0,861,859,1,0,0,0,862,
  	865,1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,129,1,0,0,0,865,863,1,
  	0,0,0,866,872,3,142,71,0,867,872,5,75,0,0,868,869,5,76,0,0,869,872,3,
  	250,125,0,870,872,3,140,70,0,871,866,1,0,0,0,871,867,1,0,0,0,871,868,
  	1,0,0,0,871,870,1,0,0,0,872,131,1,0,0,0,873,881,3,136,68,0,874,881,3,
  	138,69,0,875,881,3,152,76,0,876,881,3,160,80,0,877,881,3,162,81,0,878,
  	881,3,166,83,0,879,881,3,168,84,0,880,873,1,0,0,0,880,874,1,0,0,0,880,
  	875,1,0,0,0,880,876,1,0,0,0,880,877,1,0,0,0,880,878,1,0,0,0,880,879,1,
  	0,0,0,881,133,1,0,0,0,882,883,7,7,0,0,883,135,1,0,0,0,884,885,3,134,67,
  	0,885,887,3,128,64,0,886,888,5,141,0,0,887,886,1,0,0,0,887,888,1,0,0,
  	0,888,889,1,0,0,0,889,890,5,3,0,0,890,137,1,0,0,0,891,894,3,144,72,0,
  	892,894,3,146,73,0,893,891,1,0,0,0,893,892,1,0,0,0,894,139,1,0,0,0,895,
  	896,3,238,119,0,896,898,5,143,0,0,897,899,3,124,62,0,898,897,1,0,0,0,
  	898,899,1,0,0,0,899,900,1,0,0,0,900,901,5,144,0,0,901,141,1,0,0,0,902,
  	903,3,118,59,0,903,904,5,152,0,0,904,905,3,100,50,0,905,143,1,0,0,0,906,
  	907,3,278,139,0,907,908,3,100,50,0,908,909,5,79,0,0,909,912,3,126,63,
  	0,910,911,5,80,0,0,911,913,3,126,63,0,912,910,1,0,0,0,912,913,1,0,0,0,
  	913,145,1,0,0,0,914,915,5,44,0,0,915,916,3,100,50,0,916,917,5,17,0,0,
  	917,922,3,148,74,0,918,919,5,141,0,0,919,921,3,148,74,0,920,918,1,0,0,
  	0,921,924,1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,927,1,0,0,0,924,
  	922,1,0,0,0,925,926,5,80,0,0,926,928,3,128,64,0,927,925,1,0,0,0,927,928,
  	1,0,0,0,928,930,1,0,0,0,929,931,5,141,0,0,930,929,1,0,0,0,930,931,1,0,
  	0,0,931,932,1,0,0,0,932,933,5,3,0,0,933,147,1,0,0,0,934,939,3,150,75,
  	0,935,936,5,147,0,0,936,938,3,150,75,0,937,935,1,0,0,0,938,941,1,0,0,
  	0,939,937,1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,942,
  	943,5,149,0,0,943,944,3,126,63,0,944,149,1,0,0,0,945,948,3,246,123,0,
  	946,947,5,150,0,0,947,949,3,246,123,0,948,946,1,0,0,0,948,949,1,0,0,0,
  	949,151,1,0,0,0,950,954,3,154,77,0,951,954,3,156,78,0,952,954,3,158,79,
  	0,953,950,1,0,0,0,953,951,1,0,0,0,953,952,1,0,0,0,954,153,1,0,0,0,955,
  	956,5,83,0,0,956,958,3,128,64,0,957,959,5,141,0,0,958,957,1,0,0,0,958,
  	959,1,0,0,0,959,960,1,0,0,0,960,961,5,84,0,0,961,962,3,100,50,0,962,155,
  	1,0,0,0,963,964,5,85,0,0,964,965,3,100,50,0,965,966,3,280,140,0,966,967,
  	3,126,63,0,967,157,1,0,0,0,968,969,3,282,141,0,969,970,3,238,119,0,970,
  	971,5,152,0,0,971,972,3,100,50,0,972,973,7,8,0,0,973,974,3,100,50,0,974,
  	975,3,280,140,0,975,976,3,126,63,0,976,159,1,0,0,0,977,978,5,93,0,0,978,
  	979,3,236,118,0,979,980,3,280,140,0,980,981,3,126,63,0,981,161,1,0,0,
  	0,982,983,5,94,0,0,983,988,3,126,63,0,984,985,5,141,0,0,985,987,3,126,
  	63,0,986,984,1,0,0,0,987,990,1,0,0,0,988,986,1,0,0,0,988,989,1,0,0,0,
  	989,991,1,0,0,0,990,988,1,0,0,0,991,992,3,284,142,0,992,993,3,164,82,
  	0,993,994,5,3,0,0,994,163,1,0,0,0,995,998,5,98,0,0,996,997,5,177,0,0,
  	997,999,5,149,0,0,998,996,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,
  	1001,3,240,120,0,1001,1002,3,280,140,0,1002,1015,3,126,63,0,1003,1004,
  	5,141,0,0,1004,1007,5,98,0,0,1005,1006,5,177,0,0,1006,1008,5,149,0,0,
  	1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,3,240,
  	120,0,1010,1011,3,280,140,0,1011,1012,3,126,63,0,1012,1014,1,0,0,0,1013,
  	1003,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,
  	1018,1,0,0,0,1017,1015,1,0,0,0,1018,1022,5,80,0,0,1019,1021,3,126,63,
  	0,1020,1019,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,
  	0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1025,1027,5,141,0,0,1026,1025,
  	1,0,0,0,1026,1027,1,0,0,0,1027,165,1,0,0,0,1028,1029,5,94,0,0,1029,1030,
  	3,126,63,0,1030,1031,5,95,0,0,1031,1033,3,126,63,0,1032,1034,5,141,0,
  	0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,1036,5,3,
  	0,0,1036,167,1,0,0,0,1037,1039,5,99,0,0,1038,1040,5,177,0,0,1039,1038,
  	1,0,0,0,1039,1040,1,0,0,0,1040,1043,1,0,0,0,1041,1042,5,100,0,0,1042,
  	1044,5,177,0,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,169,1,0,0,0,1045,
  	1048,3,172,86,0,1046,1048,3,174,87,0,1047,1045,1,0,0,0,1047,1046,1,0,
  	0,0,1048,171,1,0,0,0,1049,1050,3,178,89,0,1050,1052,5,141,0,0,1051,1053,
  	3,186,93,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,
  	1056,3,14,7,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,
  	1058,3,24,12,0,1058,1059,5,141,0,0,1059,173,1,0,0,0,1060,1061,3,176,88,
  	0,1061,1063,5,141,0,0,1062,1064,3,186,93,0,1063,1062,1,0,0,0,1063,1064,
  	1,0,0,0,1064,1066,1,0,0,0,1065,1067,3,14,7,0,1066,1065,1,0,0,0,1066,1067,
  	1,0,0,0,1067,1068,1,0,0,0,1068,1069,3,24,12,0,1069,1070,5,141,0,0,1070,
  	175,1,0,0,0,1071,1072,3,286,143,0,1072,1074,5,177,0,0,1073,1075,3,180,
  	90,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,1079,
  	5,149,0,0,1077,1080,3,56,28,0,1078,1080,5,37,0,0,1079,1077,1,0,0,0,1079,
  	1078,1,0,0,0,1080,177,1,0,0,0,1081,1082,3,288,144,0,1082,1084,5,177,0,
  	0,1083,1085,3,180,90,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,179,1,
  	0,0,0,1086,1092,5,143,0,0,1087,1088,3,182,91,0,1088,1089,5,141,0,0,1089,
  	1091,1,0,0,0,1090,1087,1,0,0,0,1091,1094,1,0,0,0,1092,1090,1,0,0,0,1092,
  	1093,1,0,0,0,1093,1095,1,0,0,0,1094,1092,1,0,0,0,1095,1096,5,144,0,0,
  	1096,181,1,0,0,0,1097,1101,3,268,134,0,1098,1101,5,14,0,0,1099,1101,5,
  	74,0,0,1100,1097,1,0,0,0,1100,1098,1,0,0,0,1100,1099,1,0,0,0,1100,1101,
  	1,0,0,0,1101,1102,1,0,0,0,1102,1103,3,184,92,0,1103,183,1,0,0,0,1104,
  	1116,3,234,117,0,1105,1114,5,149,0,0,1106,1107,3,266,133,0,1107,1108,
  	5,17,0,0,1108,1110,1,0,0,0,1109,1106,1,0,0,0,1109,1110,1,0,0,0,1110,1111,
  	1,0,0,0,1111,1115,3,56,28,0,1112,1115,5,37,0,0,1113,1115,5,46,0,0,1114,
  	1109,1,0,0,0,1114,1112,1,0,0,0,1114,1113,1,0,0,0,1115,1117,1,0,0,0,1116,
  	1105,1,0,0,0,1116,1117,1,0,0,0,1117,1125,1,0,0,0,1118,1119,5,177,0,0,
  	1119,1120,5,149,0,0,1120,1121,3,56,28,0,1121,1122,5,148,0,0,1122,1123,
  	3,246,123,0,1123,1125,1,0,0,0,1124,1104,1,0,0,0,1124,1118,1,0,0,0,1125,
  	185,1,0,0,0,1126,1149,5,123,0,0,1127,1149,5,124,0,0,1128,1149,5,125,0,
  	0,1129,1149,5,48,0,0,1130,1149,5,126,0,0,1131,1149,3,188,94,0,1132,1149,
  	5,165,0,0,1133,1149,5,128,0,0,1134,1149,5,129,0,0,1135,1149,5,166,0,0,
  	1136,1149,5,167,0,0,1137,1138,5,130,0,0,1138,1149,3,246,123,0,1139,1149,
  	5,198,0,0,1140,1149,5,133,0,0,1141,1149,5,134,0,0,1142,1149,5,135,0,0,
  	1143,1149,5,136,0,0,1144,1149,5,137,0,0,1145,1149,5,138,0,0,1146,1149,
  	5,139,0,0,1147,1149,5,69,0,0,1148,1126,1,0,0,0,1148,1127,1,0,0,0,1148,
  	1128,1,0,0,0,1148,1129,1,0,0,0,1148,1130,1,0,0,0,1148,1131,1,0,0,0,1148,
  	1132,1,0,0,0,1148,1133,1,0,0,0,1148,1134,1,0,0,0,1148,1135,1,0,0,0,1148,
  	1136,1,0,0,0,1148,1137,1,0,0,0,1148,1139,1,0,0,0,1148,1140,1,0,0,0,1148,
  	1141,1,0,0,0,1148,1142,1,0,0,0,1148,1143,1,0,0,0,1148,1144,1,0,0,0,1148,
  	1145,1,0,0,0,1148,1146,1,0,0,0,1148,1147,1,0,0,0,1149,187,1,0,0,0,1150,
  	1161,5,127,0,0,1151,1159,3,252,126,0,1152,1156,5,120,0,0,1153,1155,5,
  	177,0,0,1154,1153,1,0,0,0,1155,1158,1,0,0,0,1156,1154,1,0,0,0,1156,1157,
  	1,0,0,0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1159,1152,1,0,0,0,1159,1160,
  	1,0,0,0,1160,1162,1,0,0,0,1161,1151,1,0,0,0,1161,1162,1,0,0,0,1162,189,
  	1,0,0,0,1163,1165,5,47,0,0,1164,1166,3,192,96,0,1165,1164,1,0,0,0,1165,
  	1166,1,0,0,0,1166,1168,1,0,0,0,1167,1169,3,202,101,0,1168,1167,1,0,0,
  	0,1168,1169,1,0,0,0,1169,1171,1,0,0,0,1170,1172,3,194,97,0,1171,1170,
  	1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1174,5,3,0,0,1174,191,
  	1,0,0,0,1175,1176,5,143,0,0,1176,1177,3,238,119,0,1177,1178,5,144,0,0,
  	1178,193,1,0,0,0,1179,1186,3,196,98,0,1180,1181,5,141,0,0,1181,1184,5,
  	48,0,0,1182,1183,5,141,0,0,1183,1185,5,69,0,0,1184,1182,1,0,0,0,1184,
  	1185,1,0,0,0,1185,1187,1,0,0,0,1186,1180,1,0,0,0,1186,1187,1,0,0,0,1187,
  	1188,1,0,0,0,1188,1189,5,141,0,0,1189,1191,1,0,0,0,1190,1179,1,0,0,0,
  	1191,1194,1,0,0,0,1192,1190,1,0,0,0,1192,1193,1,0,0,0,1193,195,1,0,0,
  	0,1194,1192,1,0,0,0,1195,1197,5,16,0,0,1196,1195,1,0,0,0,1196,1197,1,
  	0,0,0,1197,1200,1,0,0,0,1198,1201,3,178,89,0,1199,1201,3,176,88,0,1200,
  	1198,1,0,0,0,1200,1199,1,0,0,0,1201,1205,1,0,0,0,1202,1205,3,198,99,0,
  	1203,1205,3,200,100,0,1204,1196,1,0,0,0,1204,1202,1,0,0,0,1204,1203,1,
  	0,0,0,1205,197,1,0,0,0,1206,1207,5,49,0,0,1207,1209,5,177,0,0,1208,1210,
  	3,180,90,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,199,1,0,0,0,1211,
  	1212,5,50,0,0,1212,1214,5,177,0,0,1213,1215,3,180,90,0,1214,1213,1,0,
  	0,0,1214,1215,1,0,0,0,1215,201,1,0,0,0,1216,1217,3,234,117,0,1217,1218,
  	5,149,0,0,1218,1219,3,50,25,0,1219,1220,1,0,0,0,1220,1221,5,141,0,0,1221,
  	203,1,0,0,0,1222,1223,5,10,0,0,1223,1226,3,128,64,0,1224,1225,5,51,0,
  	0,1225,1227,3,128,64,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,1227,1228,
  	1,0,0,0,1228,1229,5,3,0,0,1229,1236,1,0,0,0,1230,1231,3,134,67,0,1231,
  	1232,3,128,64,0,1232,1233,5,3,0,0,1233,1236,1,0,0,0,1234,1236,5,3,0,0,
  	1235,1222,1,0,0,0,1235,1230,1,0,0,0,1235,1234,1,0,0,0,1236,205,1,0,0,
  	0,1237,1239,5,16,0,0,1238,1240,3,208,104,0,1239,1238,1,0,0,0,1239,1240,
  	1,0,0,0,1240,1242,1,0,0,0,1241,1243,3,210,105,0,1242,1241,1,0,0,0,1242,
  	1243,1,0,0,0,1243,1245,1,0,0,0,1244,1246,3,212,106,0,1245,1244,1,0,0,
  	0,1245,1246,1,0,0,0,1246,1248,1,0,0,0,1247,1249,3,214,107,0,1248,1247,
  	1,0,0,0,1248,1249,1,0,0,0,1249,1251,1,0,0,0,1250,1252,3,216,108,0,1251,
  	1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1254,5,3,0,0,1254,
  	207,1,0,0,0,1255,1256,5,143,0,0,1256,1257,3,234,117,0,1257,1258,5,144,
  	0,0,1258,209,1,0,0,0,1259,1264,5,52,0,0,1260,1264,3,292,146,0,1261,1264,
  	5,55,0,0,1262,1264,5,56,0,0,1263,1259,1,0,0,0,1263,1260,1,0,0,0,1263,
  	1261,1,0,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,211,1,0,0,0,1265,
  	1266,3,210,105,0,1266,1267,3,202,101,0,1267,1268,5,141,0,0,1268,1270,
  	1,0,0,0,1269,1265,1,0,0,0,1270,1273,1,0,0,0,1271,1269,1,0,0,0,1271,1272,
  	1,0,0,0,1272,213,1,0,0,0,1273,1271,1,0,0,0,1274,1275,3,210,105,0,1275,
  	1276,3,194,97,0,1276,1277,5,141,0,0,1277,1279,1,0,0,0,1278,1274,1,0,0,
  	0,1279,1282,1,0,0,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,215,1,0,
  	0,0,1282,1280,1,0,0,0,1283,1284,3,210,105,0,1284,1285,3,218,109,0,1285,
  	1286,5,141,0,0,1286,1288,1,0,0,0,1287,1283,1,0,0,0,1288,1291,1,0,0,0,
  	1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,217,1,0,0,0,1291,1289,1,0,0,
  	0,1292,1293,5,57,0,0,1293,1295,5,177,0,0,1294,1296,3,220,110,0,1295,1294,
  	1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,0,0,1297,1299,3,224,112,0,1298,
  	1297,1,0,0,0,1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,1302,3,14,7,0,1301,
  	1300,1,0,0,0,1301,1302,1,0,0,0,1302,219,1,0,0,0,1303,1305,3,222,111,0,
  	1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,5,149,
  	0,0,1307,1308,5,177,0,0,1308,221,1,0,0,0,1309,1310,5,145,0,0,1310,1311,
  	3,234,117,0,1311,1312,5,149,0,0,1312,1313,3,240,120,0,1313,1317,1,0,0,
  	0,1314,1316,5,141,0,0,1315,1314,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,
  	0,0,0,1317,1318,1,0,0,0,1318,1320,1,0,0,0,1319,1317,1,0,0,0,1320,1321,
  	5,146,0,0,1321,223,1,0,0,0,1322,1323,5,59,0,0,1323,1325,3,246,123,0,1324,
  	1322,1,0,0,0,1324,1325,1,0,0,0,1325,1328,1,0,0,0,1326,1327,5,60,0,0,1327,
  	1329,5,177,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1332,1,0,0,0,
  	1330,1331,5,61,0,0,1331,1333,5,177,0,0,1332,1330,1,0,0,0,1332,1333,1,
  	0,0,0,1333,1339,1,0,0,0,1334,1337,5,62,0,0,1335,1338,5,177,0,0,1336,1338,
  	3,246,123,0,1337,1335,1,0,0,0,1337,1336,1,0,0,0,1338,1340,1,0,0,0,1339,
  	1334,1,0,0,0,1339,1340,1,0,0,0,1340,1344,1,0,0,0,1341,1342,5,63,0,0,1342,
  	1345,3,246,123,0,1343,1345,5,64,0,0,1344,1341,1,0,0,0,1344,1343,1,0,0,
  	0,1344,1345,1,0,0,0,1345,1348,1,0,0,0,1346,1347,5,65,0,0,1347,1349,3,
  	240,120,0,1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,225,1,0,0,0,1350,1352,
  	5,8,0,0,1351,1353,3,228,114,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,
  	1355,1,0,0,0,1354,1356,3,214,107,0,1355,1354,1,0,0,0,1355,1356,1,0,0,
  	0,1356,1358,1,0,0,0,1357,1359,3,216,108,0,1358,1357,1,0,0,0,1358,1359,
  	1,0,0,0,1359,1360,1,0,0,0,1360,1361,5,3,0,0,1361,227,1,0,0,0,1362,1363,
  	5,143,0,0,1363,1364,5,177,0,0,1364,1365,5,144,0,0,1365,229,1,0,0,0,1366,
  	1368,5,4,0,0,1367,1369,3,234,117,0,1368,1367,1,0,0,0,1369,1370,1,0,0,
  	0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1373,5,141,
  	0,0,1373,231,1,0,0,0,1374,1376,5,5,0,0,1375,1377,3,234,117,0,1376,1375,
  	1,0,0,0,1377,1378,1,0,0,0,1378,1376,1,0,0,0,1378,1379,1,0,0,0,1379,1380,
  	1,0,0,0,1380,1381,5,141,0,0,1381,233,1,0,0,0,1382,1385,5,177,0,0,1383,
  	1384,5,147,0,0,1384,1386,5,177,0,0,1385,1383,1,0,0,0,1386,1387,1,0,0,
  	0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,235,1,0,0,0,1389,1392,3,238,
  	119,0,1390,1391,5,147,0,0,1391,1393,3,238,119,0,1392,1390,1,0,0,0,1393,
  	1394,1,0,0,0,1394,1392,1,0,0,0,1394,1395,1,0,0,0,1395,237,1,0,0,0,1396,
  	1404,3,248,124,0,1397,1398,5,142,0,0,1398,1400,5,177,0,0,1399,1401,5,
  	151,0,0,1400,1399,1,0,0,0,1401,1402,1,0,0,0,1402,1400,1,0,0,0,1402,1403,
  	1,0,0,0,1403,1405,1,0,0,0,1404,1397,1,0,0,0,1404,1405,1,0,0,0,1405,239,
  	1,0,0,0,1406,1407,3,248,124,0,1407,1408,5,142,0,0,1408,1410,1,0,0,0,1409,
  	1406,1,0,0,0,1409,1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,3,242,121,
  	0,1412,241,1,0,0,0,1413,1414,7,9,0,0,1414,243,1,0,0,0,1415,1416,5,151,
  	0,0,1416,1423,7,10,0,0,1417,1420,5,163,0,0,1418,1421,3,262,131,0,1419,
  	1421,3,256,128,0,1420,1418,1,0,0,0,1420,1419,1,0,0,0,1421,1423,1,0,0,
  	0,1422,1415,1,0,0,0,1422,1417,1,0,0,0,1423,245,1,0,0,0,1424,1432,3,254,
  	127,0,1425,1432,3,252,126,0,1426,1432,3,244,122,0,1427,1428,3,262,131,
  	0,1428,1429,3,116,58,0,1429,1430,3,262,131,0,1430,1432,1,0,0,0,1431,1424,
  	1,0,0,0,1431,1425,1,0,0,0,1431,1426,1,0,0,0,1431,1427,1,0,0,0,1432,247,
  	1,0,0,0,1433,1438,5,177,0,0,1434,1435,5,177,0,0,1435,1436,5,142,0,0,1436,
  	1438,5,177,0,0,1437,1433,1,0,0,0,1437,1434,1,0,0,0,1438,249,1,0,0,0,1439,
  	1442,5,177,0,0,1440,1442,3,262,131,0,1441,1439,1,0,0,0,1441,1440,1,0,
  	0,0,1442,251,1,0,0,0,1443,1444,5,194,0,0,1444,253,1,0,0,0,1445,1452,3,
  	264,132,0,1446,1447,5,142,0,0,1447,1450,3,262,131,0,1448,1449,5,175,0,
  	0,1449,1451,3,264,132,0,1450,1448,1,0,0,0,1450,1451,1,0,0,0,1451,1453,
  	1,0,0,0,1452,1446,1,0,0,0,1452,1453,1,0,0,0,1453,1456,1,0,0,0,1454,1456,
  	3,256,128,0,1455,1445,1,0,0,0,1455,1454,1,0,0,0,1456,255,1,0,0,0,1457,
  	1460,3,258,129,0,1458,1460,3,260,130,0,1459,1457,1,0,0,0,1459,1458,1,
  	0,0,0,1460,257,1,0,0,0,1461,1463,5,201,0,0,1462,1461,1,0,0,0,1463,1466,
  	1,0,0,0,1464,1462,1,0,0,0,1464,1465,1,0,0,0,1465,259,1,0,0,0,1466,1464,
  	1,0,0,0,1467,1469,5,202,0,0,1468,1467,1,0,0,0,1469,1472,1,0,0,0,1470,
  	1468,1,0,0,0,1470,1471,1,0,0,0,1471,261,1,0,0,0,1472,1470,1,0,0,0,1473,
  	1475,5,203,0,0,1474,1473,1,0,0,0,1475,1478,1,0,0,0,1476,1474,1,0,0,0,
  	1476,1477,1,0,0,0,1477,1481,1,0,0,0,1478,1476,1,0,0,0,1479,1481,3,256,
  	128,0,1480,1476,1,0,0,0,1480,1479,1,0,0,0,1481,263,1,0,0,0,1482,1483,
  	7,4,0,0,1483,1484,3,262,131,0,1484,265,1,0,0,0,1485,1486,7,11,0,0,1486,
  	267,1,0,0,0,1487,1488,7,12,0,0,1488,269,1,0,0,0,1489,1490,7,13,0,0,1490,
  	271,1,0,0,0,1491,1492,7,14,0,0,1492,273,1,0,0,0,1493,1494,7,15,0,0,1494,
  	275,1,0,0,0,1495,1496,7,16,0,0,1496,277,1,0,0,0,1497,1498,7,17,0,0,1498,
  	279,1,0,0,0,1499,1500,7,18,0,0,1500,281,1,0,0,0,1501,1502,7,19,0,0,1502,
  	283,1,0,0,0,1503,1504,7,20,0,0,1504,285,1,0,0,0,1505,1506,7,21,0,0,1506,
  	287,1,0,0,0,1507,1508,7,22,0,0,1508,289,1,0,0,0,1509,1510,7,23,0,0,1510,
  	291,1,0,0,0,1511,1512,7,24,0,0,1512,293,1,0,0,0,180,298,306,315,327,330,
  	342,347,360,365,372,377,382,384,388,393,397,407,417,425,427,434,445,452,
  	460,462,470,475,479,484,488,490,495,503,514,531,536,544,551,567,575,586,
  	589,596,598,607,612,617,621,625,632,635,638,644,649,658,666,672,680,686,
  	691,695,699,707,716,720,723,731,739,742,750,759,767,787,797,808,820,822,
  	831,839,846,852,856,863,871,880,887,893,898,912,922,927,930,939,948,953,
  	958,988,998,1007,1015,1022,1026,1033,1039,1043,1047,1052,1055,1063,1066,
  	1074,1079,1084,1092,1100,1109,1114,1116,1124,1148,1156,1159,1161,1165,
  	1168,1171,1184,1186,1192,1196,1200,1204,1209,1214,1226,1235,1239,1242,
  	1245,1248,1251,1263,1271,1280,1289,1295,1298,1301,1304,1317,1324,1328,
  	1332,1337,1339,1344,1348,1352,1355,1358,1370,1378,1387,1394,1402,1404,
  	1409,1420,1422,1431,1437,1441,1450,1452,1455,1459,1464,1470,1476,1480
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  objectpascalparserParserStaticData = staticData.release();
}

}

ObjectPascalParser::ObjectPascalParser(TokenStream *input) : ObjectPascalParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ObjectPascalParser::ObjectPascalParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ObjectPascalParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *objectpascalparserParserStaticData->atn, objectpascalparserParserStaticData->decisionToDFA, objectpascalparserParserStaticData->sharedContextCache, options);
}

ObjectPascalParser::~ObjectPascalParser() {
  delete _interpreter;
}

const atn::ATN& ObjectPascalParser::getATN() const {
  return *objectpascalparserParserStaticData->atn;
}

std::string ObjectPascalParser::getGrammarFileName() const {
  return "ObjectPascalParser.g4";
}

const std::vector<std::string>& ObjectPascalParser::getRuleNames() const {
  return objectpascalparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& ObjectPascalParser::getVocabulary() const {
  return objectpascalparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ObjectPascalParser::getSerializedATN() const {
  return objectpascalparserParserStaticData->serializedATN;
}


//----------------- GoalContext ------------------------------------------------------------------

ObjectPascalParser::GoalContext::GoalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::GoalContext::program() {
  return getRuleContext<ObjectPascalParser::ProgramContext>(0);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::GoalContext::package() {
  return getRuleContext<ObjectPascalParser::PackageContext>(0);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::GoalContext::library() {
  return getRuleContext<ObjectPascalParser::LibraryContext>(0);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::GoalContext::unit() {
  return getRuleContext<ObjectPascalParser::UnitContext>(0);
}


size_t ObjectPascalParser::GoalContext::getRuleIndex() const {
  return ObjectPascalParser::RuleGoal;
}


std::any ObjectPascalParser::GoalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitGoal(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::GoalContext* ObjectPascalParser::goal() {
  GoalContext *_localctx = _tracker.createInstance<GoalContext>(_ctx, getState());
  enterRule(_localctx, 0, ObjectPascalParser::RuleGoal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(298);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROGRAM: {
        enterOuterAlt(_localctx, 1);
        setState(294);
        program();
        break;
      }

      case ObjectPascalParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(295);
        package();
        break;
      }

      case ObjectPascalParser::LIBRARY: {
        enterOuterAlt(_localctx, 3);
        setState(296);
        library();
        break;
      }

      case ObjectPascalParser::UNIT: {
        enterOuterAlt(_localctx, 4);
        setState(297);
        unit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

ObjectPascalParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::PROGRAM() {
  return getToken(ObjectPascalParser::PROGRAM, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::ProgramContext::programBlock() {
  return getRuleContext<ObjectPascalParser::ProgramBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ProgramContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ProgramContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgram;
}


std::any ObjectPascalParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, ObjectPascalParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(300);
    match(ObjectPascalParser::PROGRAM);
    setState(301);
    match(ObjectPascalParser::Ident);
    setState(306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(302);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(303);
      identList();
      setState(304);
      match(ObjectPascalParser::RIGHT_PAREN);
    }
    setState(308);
    match(ObjectPascalParser::SEMI);
    setState(309);
    programBlock();
    setState(310);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitContext ------------------------------------------------------------------

ObjectPascalParser::UnitContext::UnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UnitContext::UNIT() {
  return getToken(ObjectPascalParser::UNIT, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::UnitContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::UnitContext::interfaceSection() {
  return getRuleContext<ObjectPascalParser::InterfaceSectionContext>(0);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::UnitContext::implementationSection() {
  return getRuleContext<ObjectPascalParser::ImplementationSectionContext>(0);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::UnitContext::initSection() {
  return getRuleContext<ObjectPascalParser::InitSectionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::UnitContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::UnitContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnit;
}


std::any ObjectPascalParser::UnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnit(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::unit() {
  UnitContext *_localctx = _tracker.createInstance<UnitContext>(_ctx, getState());
  enterRule(_localctx, 4, ObjectPascalParser::RuleUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(312);
    match(ObjectPascalParser::UNIT);
    setState(313);
    qualId();
    setState(315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(314);
      portabilityDirective();
    }
    setState(317);
    match(ObjectPascalParser::SEMI);
    setState(318);
    interfaceSection();
    setState(319);
    implementationSection();
    setState(320);
    initSection();
    setState(321);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

ObjectPascalParser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PackageContext::PACKAGE() {
  return getToken(ObjectPascalParser::PACKAGE, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::PackageContext::requiresClause() {
  return getRuleContext<ObjectPascalParser::RequiresClauseContext>(0);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::PackageContext::containsClause() {
  return getRuleContext<ObjectPascalParser::ContainsClauseContext>(0);
}


size_t ObjectPascalParser::PackageContext::getRuleIndex() const {
  return ObjectPascalParser::RulePackage;
}


std::any ObjectPascalParser::PackageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPackage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 6, ObjectPascalParser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(323);
    match(ObjectPascalParser::PACKAGE);
    setState(324);
    match(ObjectPascalParser::Ident);
    setState(325);
    match(ObjectPascalParser::SEMI);
    setState(327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::REQUIRES) {
      setState(326);
      requiresClause();
    }
    setState(330);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CONTAINS) {
      setState(329);
      containsClause();
    }
    setState(332);
    match(ObjectPascalParser::END);
    setState(333);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryContext ------------------------------------------------------------------

ObjectPascalParser::LibraryContext::LibraryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::LibraryContext::programBlock() {
  return getRuleContext<ObjectPascalParser::ProgramBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::LibraryContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLibrary;
}


std::any ObjectPascalParser::LibraryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLibrary(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::library() {
  LibraryContext *_localctx = _tracker.createInstance<LibraryContext>(_ctx, getState());
  enterRule(_localctx, 8, ObjectPascalParser::RuleLibrary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(335);
    match(ObjectPascalParser::LIBRARY);
    setState(336);
    match(ObjectPascalParser::Ident);
    setState(337);
    match(ObjectPascalParser::SEMI);
    setState(338);
    programBlock();
    setState(339);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramBlockContext ------------------------------------------------------------------

ObjectPascalParser::ProgramBlockContext::ProgramBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::ProgramBlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ProgramBlockContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ProgramBlockContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ProgramBlockContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ProgramBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgramBlock;
}


std::any ObjectPascalParser::ProgramBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgramBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramBlockContext* ObjectPascalParser::programBlock() {
  ProgramBlockContext *_localctx = _tracker.createInstance<ProgramBlockContext>(_ctx, getState());
  enterRule(_localctx, 10, ObjectPascalParser::RuleProgramBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(342);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(341);
      usesClause();
    }
    setState(347);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::VAR_1 - 13))
      | (1ULL << (ObjectPascalParser::VAR_2 - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION_1 - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION_2 - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE_1 - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE_2 - 13)))) != 0)) {
      setState(344);
      declSection();
      setState(349);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(350);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsesClauseContext ------------------------------------------------------------------

ObjectPascalParser::UsesClauseContext::UsesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::USES() {
  return getToken(ObjectPascalParser::USES, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::UsesClauseContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::UsesClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUsesClause;
}


std::any ObjectPascalParser::UsesClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUsesClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::usesClause() {
  UsesClauseContext *_localctx = _tracker.createInstance<UsesClauseContext>(_ctx, getState());
  enterRule(_localctx, 12, ObjectPascalParser::RuleUsesClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(ObjectPascalParser::USES);
    setState(353);
    qualIdList();
    setState(354);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PortabilityDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::PortabilityDirectiveContext::PortabilityDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::PLATFORM() {
  return getToken(ObjectPascalParser::PLATFORM, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::DEPRECATED() {
  return getToken(ObjectPascalParser::DEPRECATED, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}


size_t ObjectPascalParser::PortabilityDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RulePortabilityDirective;
}


std::any ObjectPascalParser::PortabilityDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPortabilityDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::portabilityDirective() {
  PortabilityDirectiveContext *_localctx = _tracker.createInstance<PortabilityDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 14, ObjectPascalParser::RulePortabilityDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(356);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceSectionContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceSectionContext::InterfaceSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceSectionContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::InterfaceSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::InterfaceDeclContext *> ObjectPascalParser::InterfaceSectionContext::interfaceDecl() {
  return getRuleContexts<ObjectPascalParser::InterfaceDeclContext>();
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::InterfaceSectionContext::interfaceDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::InterfaceDeclContext>(i);
}


size_t ObjectPascalParser::InterfaceSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceSection;
}


std::any ObjectPascalParser::InterfaceSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::interfaceSection() {
  InterfaceSectionContext *_localctx = _tracker.createInstance<InterfaceSectionContext>(_ctx, getState());
  enterRule(_localctx, 16, ObjectPascalParser::RuleInterfaceSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(358);
    match(ObjectPascalParser::INTERFACE);
    setState(360);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(359);
      usesClause();
    }
    setState(365);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::TYPE_ - 14))
      | (1ULL << (ObjectPascalParser::VAR_1 - 14))
      | (1ULL << (ObjectPascalParser::VAR_2 - 14))
      | (1ULL << (ObjectPascalParser::FUNCTION_1 - 14))
      | (1ULL << (ObjectPascalParser::FUNCTION_2 - 14))
      | (1ULL << (ObjectPascalParser::PROCEDURE_1 - 14))
      | (1ULL << (ObjectPascalParser::PROCEDURE_2 - 14)))) != 0)) {
      setState(362);
      interfaceDecl();
      setState(367);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceDeclContext::InterfaceDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::InterfaceDeclContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::InterfaceDeclContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::InterfaceDeclContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::InterfaceDeclContext::exportedHeading() {
  return getRuleContext<ObjectPascalParser::ExportedHeadingContext>(0);
}


size_t ObjectPascalParser::InterfaceDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceDecl;
}


std::any ObjectPascalParser::InterfaceDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::interfaceDecl() {
  InterfaceDeclContext *_localctx = _tracker.createInstance<InterfaceDeclContext>(_ctx, getState());
  enterRule(_localctx, 18, ObjectPascalParser::RuleInterfaceDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(372);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 1);
        setState(368);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 2);
        setState(369);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR_1:
      case ObjectPascalParser::VAR_2: {
        enterOuterAlt(_localctx, 3);
        setState(370);
        varSection();
        break;
      }

      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2:
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2: {
        enterOuterAlt(_localctx, 4);
        setState(371);
        exportedHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportedHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ExportedHeadingContext::ExportedHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ExportedHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExportedHeadingContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ExportedHeadingContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ExportedHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}


size_t ObjectPascalParser::ExportedHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportedHeading;
}


std::any ObjectPascalParser::ExportedHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportedHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::exportedHeading() {
  ExportedHeadingContext *_localctx = _tracker.createInstance<ExportedHeadingContext>(_ctx, getState());
  enterRule(_localctx, 20, ObjectPascalParser::RuleExportedHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(384);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2: {
        enterOuterAlt(_localctx, 1);
        setState(374);
        procedureHeading();
        setState(375);
        match(ObjectPascalParser::SEMI);
        setState(377);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::VIRTUAL

        || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
          | (1ULL << (ObjectPascalParser::REGISTER - 123))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
          | (1ULL << (ObjectPascalParser::EXPORT - 123))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
          | (1ULL << (ObjectPascalParser::FAR - 123))
          | (1ULL << (ObjectPascalParser::FORWARD - 123))
          | (1ULL << (ObjectPascalParser::MESSAGE - 123))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
          | (1ULL << (ObjectPascalParser::PASCAL - 123))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
          | (1ULL << (ObjectPascalParser::SAFECALL - 123))
          | (1ULL << (ObjectPascalParser::STDCALL - 123))
          | (1ULL << (ObjectPascalParser::VARARGS - 123))
          | (1ULL << (ObjectPascalParser::LOCAL - 123))
          | (1ULL << (ObjectPascalParser::NEAR - 123))
          | (1ULL << (ObjectPascalParser::INLINE - 123))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
          setState(376);
          directive();
        }
        break;
      }

      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2: {
        enterOuterAlt(_localctx, 2);
        setState(379);
        functionHeading();
        setState(380);
        match(ObjectPascalParser::SEMI);
        setState(382);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::VIRTUAL

        || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
          | (1ULL << (ObjectPascalParser::REGISTER - 123))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
          | (1ULL << (ObjectPascalParser::EXPORT - 123))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
          | (1ULL << (ObjectPascalParser::FAR - 123))
          | (1ULL << (ObjectPascalParser::FORWARD - 123))
          | (1ULL << (ObjectPascalParser::MESSAGE - 123))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
          | (1ULL << (ObjectPascalParser::PASCAL - 123))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
          | (1ULL << (ObjectPascalParser::SAFECALL - 123))
          | (1ULL << (ObjectPascalParser::STDCALL - 123))
          | (1ULL << (ObjectPascalParser::VARARGS - 123))
          | (1ULL << (ObjectPascalParser::LOCAL - 123))
          | (1ULL << (ObjectPascalParser::NEAR - 123))
          | (1ULL << (ObjectPascalParser::INLINE - 123))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
          setState(381);
          directive();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementationSectionContext ------------------------------------------------------------------

ObjectPascalParser::ImplementationSectionContext::ImplementationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ImplementationSectionContext::IMPLEMENTATION() {
  return getToken(ObjectPascalParser::IMPLEMENTATION, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ImplementationSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ImplementationSectionContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ImplementationSectionContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ImplementationSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleImplementationSection;
}


std::any ObjectPascalParser::ImplementationSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitImplementationSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::implementationSection() {
  ImplementationSectionContext *_localctx = _tracker.createInstance<ImplementationSectionContext>(_ctx, getState());
  enterRule(_localctx, 22, ObjectPascalParser::RuleImplementationSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    match(ObjectPascalParser::IMPLEMENTATION);
    setState(388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(387);
      usesClause();
    }
    setState(393);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::VAR_1 - 13))
      | (1ULL << (ObjectPascalParser::VAR_2 - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION_1 - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION_2 - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE_1 - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE_2 - 13)))) != 0)) {
      setState(390);
      declSection();
      setState(395);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

ObjectPascalParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::BlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::BlockContext::declSection() {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(0);
}


size_t ObjectPascalParser::BlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleBlock;
}


std::any ObjectPascalParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 24, ObjectPascalParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::VAR_1 - 13))
      | (1ULL << (ObjectPascalParser::VAR_2 - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION_1 - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION_2 - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE_1 - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE_2 - 13)))) != 0)) {
      setState(396);
      declSection();
    }
    setState(399);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsStmtContext ------------------------------------------------------------------

ObjectPascalParser::ExportsStmtContext::ExportsStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExportsStmtContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

std::vector<ObjectPascalParser::ExportsItemContext *> ObjectPascalParser::ExportsStmtContext::exportsItem() {
  return getRuleContexts<ObjectPascalParser::ExportsItemContext>();
}

ObjectPascalParser::ExportsItemContext* ObjectPascalParser::ExportsStmtContext::exportsItem(size_t i) {
  return getRuleContext<ObjectPascalParser::ExportsItemContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExportsStmtContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExportsStmtContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExportsStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportsStmt;
}


std::any ObjectPascalParser::ExportsStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportsStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportsStmtContext* ObjectPascalParser::exportsStmt() {
  ExportsStmtContext *_localctx = _tracker.createInstance<ExportsStmtContext>(_ctx, getState());
  enterRule(_localctx, 26, ObjectPascalParser::RuleExportsStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(401);
    match(ObjectPascalParser::EXPORT);
    setState(402);
    exportsItem();
    setState(407);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(403);
      match(ObjectPascalParser::COMMA);
      setState(404);
      exportsItem();
      setState(409);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsItemContext ------------------------------------------------------------------

ObjectPascalParser::ExportsItemContext::ExportsItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExportsItemContext::SINGLE_QUOTE() {
  return getTokens(ObjectPascalParser::SINGLE_QUOTE);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::SINGLE_QUOTE(size_t i) {
  return getToken(ObjectPascalParser::SINGLE_QUOTE, i);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ExportsItemContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ExportsItemContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportsItem;
}


std::any ObjectPascalParser::ExportsItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportsItem(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportsItemContext* ObjectPascalParser::exportsItem() {
  ExportsItemContext *_localctx = _tracker.createInstance<ExportsItemContext>(_ctx, getState());
  enterRule(_localctx, 28, ObjectPascalParser::RuleExportsItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(427);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Ident: {
        enterOuterAlt(_localctx, 1);
        setState(410);
        match(ObjectPascalParser::Ident);
        setState(417);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::NAME: {
            setState(411);
            match(ObjectPascalParser::NAME);
            break;
          }

          case ObjectPascalParser::INDEX: {
            setState(412);
            match(ObjectPascalParser::INDEX);
            setState(413);
            match(ObjectPascalParser::SINGLE_QUOTE);
            setState(414);
            constExpr();
            setState(415);
            match(ObjectPascalParser::SINGLE_QUOTE);
            break;
          }

          case ObjectPascalParser::EOF:
          case ObjectPascalParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case ObjectPascalParser::EOF:
      case ObjectPascalParser::INDEX:
      case ObjectPascalParser::NAME:
      case ObjectPascalParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(425);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::INDEX: {
            setState(419);
            match(ObjectPascalParser::INDEX);
            break;
          }

          case ObjectPascalParser::NAME: {
            setState(420);
            match(ObjectPascalParser::NAME);
            setState(421);
            match(ObjectPascalParser::SINGLE_QUOTE);
            setState(422);
            constExpr();
            setState(423);
            match(ObjectPascalParser::SINGLE_QUOTE);
            break;
          }

          case ObjectPascalParser::EOF:
          case ObjectPascalParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::DeclSectionContext::DeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::DeclSectionContext::labelDeclSection() {
  return getRuleContext<ObjectPascalParser::LabelDeclSectionContext>(0);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::DeclSectionContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::DeclSectionContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::DeclSectionContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::DeclSectionContext::procedureDeclSection() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclSectionContext>(0);
}


size_t ObjectPascalParser::DeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDeclSection;
}


std::any ObjectPascalParser::DeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::declSection() {
  DeclSectionContext *_localctx = _tracker.createInstance<DeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 30, ObjectPascalParser::RuleDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(434);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(429);
        labelDeclSection();
        break;
      }

      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 2);
        setState(430);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 3);
        setState(431);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR_1:
      case ObjectPascalParser::VAR_2: {
        enterOuterAlt(_localctx, 4);
        setState(432);
        varSection();
        break;
      }

      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2:
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2: {
        enterOuterAlt(_localctx, 5);
        setState(433);
        procedureDeclSection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::LabelDeclSectionContext::LabelDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelDeclSectionContext::LABEL() {
  return getToken(ObjectPascalParser::LABEL, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::LabelDeclSectionContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}


size_t ObjectPascalParser::LabelDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelDeclSection;
}


std::any ObjectPascalParser::LabelDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::labelDeclSection() {
  LabelDeclSectionContext *_localctx = _tracker.createInstance<LabelDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 32, ObjectPascalParser::RuleLabelDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(436);
    match(ObjectPascalParser::LABEL);
    setState(437);
    labelId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstSectionContext ------------------------------------------------------------------

ObjectPascalParser::ConstSectionContext::ConstSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

std::vector<ObjectPascalParser::ConstantDeclContext *> ObjectPascalParser::ConstSectionContext::constantDecl() {
  return getRuleContexts<ObjectPascalParser::ConstantDeclContext>();
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::ConstSectionContext::constantDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstantDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ConstSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstSection;
}


std::any ObjectPascalParser::ConstSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::constSection() {
  ConstSectionContext *_localctx = _tracker.createInstance<ConstSectionContext>(_ctx, getState());
  enterRule(_localctx, 34, ObjectPascalParser::RuleConstSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(439);
    match(ObjectPascalParser::CONST);
    setState(445);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Ident) {
      setState(440);
      constantDecl();
      setState(441);
      match(ObjectPascalParser::SEMI);
      setState(447);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclContext ------------------------------------------------------------------

ObjectPascalParser::ConstantDeclContext::ConstantDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ConstantDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ConstantDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ConstantDeclContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ConstantDeclContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::ConstantDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstantDecl;
}


std::any ObjectPascalParser::ConstantDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstantDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::constantDecl() {
  ConstantDeclContext *_localctx = _tracker.createInstance<ConstantDeclContext>(_ctx, getState());
  enterRule(_localctx, 36, ObjectPascalParser::RuleConstantDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(462);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(448);
      match(ObjectPascalParser::Ident);
      setState(449);
      match(ObjectPascalParser::ASSIGN);
      setState(450);
      constExpr();
      setState(452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(451);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(454);
      match(ObjectPascalParser::Ident);
      setState(455);
      match(ObjectPascalParser::COLON);
      setState(456);
      typeId();
      setState(457);
      match(ObjectPascalParser::ASSIGN);
      setState(458);
      typedConstant();
      setState(460);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(459);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSectionContext ------------------------------------------------------------------

ObjectPascalParser::TypeSectionContext::TypeSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

std::vector<ObjectPascalParser::TypeDeclContext *> ObjectPascalParser::TypeSectionContext::typeDecl() {
  return getRuleContexts<ObjectPascalParser::TypeDeclContext>();
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::TypeSectionContext::typeDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TypeSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TypeSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeSection;
}


std::any ObjectPascalParser::TypeSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::typeSection() {
  TypeSectionContext *_localctx = _tracker.createInstance<TypeSectionContext>(_ctx, getState());
  enterRule(_localctx, 38, ObjectPascalParser::RuleTypeSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    match(ObjectPascalParser::TYPE_);
    setState(468); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(465);
      typeDecl();
      setState(466);
      match(ObjectPascalParser::SEMI);
      setState(470); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclContext ------------------------------------------------------------------

ObjectPascalParser::TypeDeclContext::TypeDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::TypeDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::TypeDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::TypeDeclContext::restrictedType() {
  return getRuleContext<ObjectPascalParser::RestrictedTypeContext>(0);
}


size_t ObjectPascalParser::TypeDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeDecl;
}


std::any ObjectPascalParser::TypeDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::typeDecl() {
  TypeDeclContext *_localctx = _tracker.createInstance<TypeDeclContext>(_ctx, getState());
  enterRule(_localctx, 40, ObjectPascalParser::RuleTypeDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(490);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(472);
      match(ObjectPascalParser::Ident);
      setState(473);
      match(ObjectPascalParser::ASSIGN);
      setState(475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(474);
        match(ObjectPascalParser::TYPE_);
      }
      setState(477);
      type();
      setState(479);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(478);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(481);
      match(ObjectPascalParser::Ident);
      setState(482);
      match(ObjectPascalParser::ASSIGN);
      setState(484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(483);
        match(ObjectPascalParser::TYPE_);
      }
      setState(486);
      restrictedType();
      setState(488);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(487);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedConstantContext ------------------------------------------------------------------

ObjectPascalParser::TypedConstantContext::TypedConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::TypedConstantContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::TypedConstantContext::arrayConstant() {
  return getRuleContext<ObjectPascalParser::ArrayConstantContext>(0);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::TypedConstantContext::recordConstant() {
  return getRuleContext<ObjectPascalParser::RecordConstantContext>(0);
}


size_t ObjectPascalParser::TypedConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypedConstant;
}


std::any ObjectPascalParser::TypedConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypedConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::typedConstant() {
  TypedConstantContext *_localctx = _tracker.createInstance<TypedConstantContext>(_ctx, getState());
  enterRule(_localctx, 42, ObjectPascalParser::RuleTypedConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(495);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(492);
      constExpr();
      break;
    }

    case 2: {
      setState(493);
      arrayConstant();
      break;
    }

    case 3: {
      setState(494);
      recordConstant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstantContext ------------------------------------------------------------------

ObjectPascalParser::ArrayConstantContext::ArrayConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::TypedConstantContext *> ObjectPascalParser::ArrayConstantContext::typedConstant() {
  return getRuleContexts<ObjectPascalParser::TypedConstantContext>();
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ArrayConstantContext::typedConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayConstantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayConstant;
}


std::any ObjectPascalParser::ArrayConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::arrayConstant() {
  ArrayConstantContext *_localctx = _tracker.createInstance<ArrayConstantContext>(_ctx, getState());
  enterRule(_localctx, 44, ObjectPascalParser::RuleArrayConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(498);
    typedConstant();
    setState(503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(499);
      match(ObjectPascalParser::COMMA);
      setState(500);
      typedConstant();
      setState(505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(506);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordConstantContext::RecordConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::RecordFieldConstantContext *> ObjectPascalParser::RecordConstantContext::recordFieldConstant() {
  return getRuleContexts<ObjectPascalParser::RecordFieldConstantContext>();
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::RecordConstantContext::recordFieldConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecordFieldConstantContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecordConstantContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::RecordConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordConstant;
}


std::any ObjectPascalParser::RecordConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::recordConstant() {
  RecordConstantContext *_localctx = _tracker.createInstance<RecordConstantContext>(_ctx, getState());
  enterRule(_localctx, 46, ObjectPascalParser::RuleRecordConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(514);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Ident) {
      setState(509);
      recordFieldConstant();
      setState(510);
      match(ObjectPascalParser::SEMI);
      setState(516);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(517);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordFieldConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordFieldConstantContext::RecordFieldConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::RecordFieldConstantContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::RecordFieldConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordFieldConstant;
}


std::any ObjectPascalParser::RecordFieldConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordFieldConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::recordFieldConstant() {
  RecordFieldConstantContext *_localctx = _tracker.createInstance<RecordFieldConstantContext>(_ctx, getState());
  enterRule(_localctx, 48, ObjectPascalParser::RuleRecordFieldConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    match(ObjectPascalParser::Ident);
    setState(520);
    match(ObjectPascalParser::COLON);
    setState(521);
    typedConstant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

ObjectPascalParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::TypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::TypeContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::TypeContext::strucType() {
  return getRuleContext<ObjectPascalParser::StrucTypeContext>(0);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::TypeContext::pointerType() {
  return getRuleContext<ObjectPascalParser::PointerTypeContext>(0);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::TypeContext::stringType() {
  return getRuleContext<ObjectPascalParser::StringTypeContext>(0);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::TypeContext::procedureType() {
  return getRuleContext<ObjectPascalParser::ProcedureTypeContext>(0);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::TypeContext::variantType() {
  return getRuleContext<ObjectPascalParser::VariantTypeContext>(0);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::TypeContext::classRefType() {
  return getRuleContext<ObjectPascalParser::ClassRefTypeContext>(0);
}


size_t ObjectPascalParser::TypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleType;
}


std::any ObjectPascalParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 50, ObjectPascalParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(531);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(523);
      typeId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(524);
      simpleType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(525);
      strucType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(526);
      pointerType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(527);
      stringType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(528);
      procedureType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(529);
      variantType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(530);
      classRefType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestrictedTypeContext ------------------------------------------------------------------

ObjectPascalParser::RestrictedTypeContext::RestrictedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::RestrictedTypeContext::objectType() {
  return getRuleContext<ObjectPascalParser::ObjectTypeContext>(0);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::RestrictedTypeContext::classType() {
  return getRuleContext<ObjectPascalParser::ClassTypeContext>(0);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::RestrictedTypeContext::interfaceType() {
  return getRuleContext<ObjectPascalParser::InterfaceTypeContext>(0);
}


size_t ObjectPascalParser::RestrictedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRestrictedType;
}


std::any ObjectPascalParser::RestrictedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRestrictedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::restrictedType() {
  RestrictedTypeContext *_localctx = _tracker.createInstance<RestrictedTypeContext>(_ctx, getState());
  enterRule(_localctx, 52, ObjectPascalParser::RuleRestrictedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(536);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::OBJECT: {
        enterOuterAlt(_localctx, 1);
        setState(533);
        objectType();
        break;
      }

      case ObjectPascalParser::CLASS: {
        enterOuterAlt(_localctx, 2);
        setState(534);
        classType();
        break;
      }

      case ObjectPascalParser::INTERFACE: {
        enterOuterAlt(_localctx, 3);
        setState(535);
        interfaceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassRefTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassRefTypeContext::ClassRefTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ClassRefTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::ClassRefTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassRefType;
}


std::any ObjectPascalParser::ClassRefTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassRefType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::classRefType() {
  ClassRefTypeContext *_localctx = _tracker.createInstance<ClassRefTypeContext>(_ctx, getState());
  enterRule(_localctx, 54, ObjectPascalParser::RuleClassRefType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(538);
    match(ObjectPascalParser::CLASS);
    setState(539);
    match(ObjectPascalParser::OF);
    setState(540);
    typeId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

ObjectPascalParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SimpleTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::SimpleTypeContext::realType() {
  return getRuleContext<ObjectPascalParser::RealTypeContext>(0);
}


size_t ObjectPascalParser::SimpleTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleType;
}


std::any ObjectPascalParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 56, ObjectPascalParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::DOT_DOT:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::PLUS:
      case ObjectPascalParser::MINUS:
      case ObjectPascalParser::STAR:
      case ObjectPascalParser::SHARP:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::StringLiteral:
      case ObjectPascalParser::HEXADECIMALDIGIT:
      case ObjectPascalParser::OCTALDIGIT:
      case ObjectPascalParser::DIGIT: {
        setState(542);
        ordinalType();
        break;
      }

      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::REAL48: {
        setState(543);
        realType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RealTypeContext ------------------------------------------------------------------

ObjectPascalParser::RealTypeContext::RealTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL48() {
  return getToken(ObjectPascalParser::REAL48, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::SINGLE() {
  return getToken(ObjectPascalParser::SINGLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::DOUBLE() {
  return getToken(ObjectPascalParser::DOUBLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::EXTENDED() {
  return getToken(ObjectPascalParser::EXTENDED, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::CURRENCY() {
  return getToken(ObjectPascalParser::CURRENCY, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::COMP() {
  return getToken(ObjectPascalParser::COMP, 0);
}


size_t ObjectPascalParser::RealTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRealType;
}


std::any ObjectPascalParser::RealTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRealType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::realType() {
  RealTypeContext *_localctx = _tracker.createInstance<RealTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, ObjectPascalParser::RuleRealType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(546);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::SINGLE)
      | (1ULL << ObjectPascalParser::DOUBLE)
      | (1ULL << ObjectPascalParser::EXTENDED)
      | (1ULL << ObjectPascalParser::CURRENCY)
      | (1ULL << ObjectPascalParser::COMP))) != 0) || _la == ObjectPascalParser::REAL48)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinalTypeContext ------------------------------------------------------------------

ObjectPascalParser::OrdinalTypeContext::OrdinalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::OrdinalTypeContext::subrangeType() {
  return getRuleContext<ObjectPascalParser::SubrangeTypeContext>(0);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::OrdinalTypeContext::enumeratedType() {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeContext>(0);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::OrdinalTypeContext::ordIdent() {
  return getRuleContext<ObjectPascalParser::OrdIdentContext>(0);
}


size_t ObjectPascalParser::OrdinalTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdinalType;
}


std::any ObjectPascalParser::OrdinalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdinalType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ordinalType() {
  OrdinalTypeContext *_localctx = _tracker.createInstance<OrdinalTypeContext>(_ctx, getState());
  enterRule(_localctx, 60, ObjectPascalParser::RuleOrdinalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(551);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::DOT_DOT:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::PLUS:
      case ObjectPascalParser::MINUS:
      case ObjectPascalParser::STAR:
      case ObjectPascalParser::SHARP:
      case ObjectPascalParser::StringLiteral:
      case ObjectPascalParser::HEXADECIMALDIGIT:
      case ObjectPascalParser::OCTALDIGIT:
      case ObjectPascalParser::DIGIT: {
        setState(548);
        subrangeType();
        break;
      }

      case ObjectPascalParser::LEFT_PAREN: {
        setState(549);
        enumeratedType();
        break;
      }

      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD: {
        setState(550);
        ordIdent();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdIdentContext ------------------------------------------------------------------

ObjectPascalParser::OrdIdentContext::OrdIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SHORTINT() {
  return getToken(ObjectPascalParser::SHORTINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SMALLINT() {
  return getToken(ObjectPascalParser::SMALLINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CARDINAL() {
  return getToken(ObjectPascalParser::CARDINAL, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGINT() {
  return getToken(ObjectPascalParser::LONGINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INT64() {
  return getToken(ObjectPascalParser::INT64, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WORD() {
  return getToken(ObjectPascalParser::WORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WIDECHAR() {
  return getToken(ObjectPascalParser::WIDECHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGWORD() {
  return getToken(ObjectPascalParser::LONGWORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::PCHAR() {
  return getToken(ObjectPascalParser::PCHAR, 0);
}


size_t ObjectPascalParser::OrdIdentContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdIdent;
}


std::any ObjectPascalParser::OrdIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdIdent(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::ordIdent() {
  OrdIdentContext *_localctx = _tracker.createInstance<OrdIdentContext>(_ctx, getState());
  enterRule(_localctx, 62, ObjectPascalParser::RuleOrdIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(553);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::SHORTINT)
      | (1ULL << ObjectPascalParser::SMALLINT)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::LONGINT)
      | (1ULL << ObjectPascalParser::WORD)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR)
      | (1ULL << ObjectPascalParser::WIDECHAR)
      | (1ULL << ObjectPascalParser::PCHAR))) != 0) || ((((_la - 170) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 170)) & ((1ULL << (ObjectPascalParser::CARDINAL - 170))
      | (1ULL << (ObjectPascalParser::INT64 - 170))
      | (1ULL << (ObjectPascalParser::LONGWORD - 170)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantTypeContext ------------------------------------------------------------------

ObjectPascalParser::VariantTypeContext::VariantTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::VARIANT() {
  return getToken(ObjectPascalParser::VARIANT, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::OLEVARIANT() {
  return getToken(ObjectPascalParser::OLEVARIANT, 0);
}


size_t ObjectPascalParser::VariantTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantType;
}


std::any ObjectPascalParser::VariantTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::variantType() {
  VariantTypeContext *_localctx = _tracker.createInstance<VariantTypeContext>(_ctx, getState());
  enterRule(_localctx, 64, ObjectPascalParser::RuleVariantType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::VARIANT

    || _la == ObjectPascalParser::OLEVARIANT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubrangeTypeContext ------------------------------------------------------------------

ObjectPascalParser::SubrangeTypeContext::SubrangeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::SubrangeTypeContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::SubrangeTypeContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SubrangeTypeContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::SubrangeTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSubrangeType;
}


std::any ObjectPascalParser::SubrangeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSubrangeType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::subrangeType() {
  SubrangeTypeContext *_localctx = _tracker.createInstance<SubrangeTypeContext>(_ctx, getState());
  enterRule(_localctx, 66, ObjectPascalParser::RuleSubrangeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    constExpr();
    setState(558);
    match(ObjectPascalParser::DOT_DOT);
    setState(559);
    constExpr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeContext::EnumeratedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::EnumeratedTypeElementContext *> ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement() {
  return getRuleContexts<ObjectPascalParser::EnumeratedTypeElementContext>();
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement(size_t i) {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::EnumeratedTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::EnumeratedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedType;
}


std::any ObjectPascalParser::EnumeratedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::enumeratedType() {
  EnumeratedTypeContext *_localctx = _tracker.createInstance<EnumeratedTypeContext>(_ctx, getState());
  enterRule(_localctx, 68, ObjectPascalParser::RuleEnumeratedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(562);
    enumeratedTypeElement();
    setState(567);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(563);
      match(ObjectPascalParser::COMMA);
      setState(564);
      enumeratedTypeElement();
      setState(569);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(570);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeElementContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeElementContext::EnumeratedTypeElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::EnumeratedTypeElementContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::EnumeratedTypeElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedTypeElement;
}


std::any ObjectPascalParser::EnumeratedTypeElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedTypeElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::enumeratedTypeElement() {
  EnumeratedTypeElementContext *_localctx = _tracker.createInstance<EnumeratedTypeElementContext>(_ctx, getState());
  enterRule(_localctx, 70, ObjectPascalParser::RuleEnumeratedTypeElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(572);
    match(ObjectPascalParser::Ident);
    setState(575);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ASSIGN) {
      setState(573);
      match(ObjectPascalParser::ASSIGN);
      setState(574);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringTypeContext ------------------------------------------------------------------

ObjectPascalParser::StringTypeContext::StringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::ANSISTRING() {
  return getToken(ObjectPascalParser::ANSISTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::WIDESTRING() {
  return getToken(ObjectPascalParser::WIDESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::UNICODESTRING() {
  return getToken(ObjectPascalParser::UNICODESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::StringTypeContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}


size_t ObjectPascalParser::StringTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStringType;
}


std::any ObjectPascalParser::StringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStringType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::stringType() {
  StringTypeContext *_localctx = _tracker.createInstance<StringTypeContext>(_ctx, getState());
  enterRule(_localctx, 72, ObjectPascalParser::RuleStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(586);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(577);
      match(ObjectPascalParser::STRING);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(578);
      match(ObjectPascalParser::ANSISTRING);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(579);
      match(ObjectPascalParser::WIDESTRING);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(580);
      match(ObjectPascalParser::UNICODESTRING);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(581);
      match(ObjectPascalParser::STRING);
      setState(582);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(583);
      constExpr();
      setState(584);
      match(ObjectPascalParser::RIGHT_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrucTypeContext ------------------------------------------------------------------

ObjectPascalParser::StrucTypeContext::StrucTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::StrucTypeContext::arrayType() {
  return getRuleContext<ObjectPascalParser::ArrayTypeContext>(0);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::StrucTypeContext::setType() {
  return getRuleContext<ObjectPascalParser::SetTypeContext>(0);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::StrucTypeContext::fileType() {
  return getRuleContext<ObjectPascalParser::FileTypeContext>(0);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::StrucTypeContext::recType() {
  return getRuleContext<ObjectPascalParser::RecTypeContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StrucTypeContext::PACKED() {
  return getTokens(ObjectPascalParser::PACKED);
}

tree::TerminalNode* ObjectPascalParser::StrucTypeContext::PACKED(size_t i) {
  return getToken(ObjectPascalParser::PACKED, i);
}


size_t ObjectPascalParser::StrucTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStrucType;
}


std::any ObjectPascalParser::StrucTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStrucType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::strucType() {
  StrucTypeContext *_localctx = _tracker.createInstance<StrucTypeContext>(_ctx, getState());
  enterRule(_localctx, 74, ObjectPascalParser::RuleStrucType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(589);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::PACKED) {
      setState(588);
      match(ObjectPascalParser::PACKED);
    }
    setState(598);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ARRAY_1:
      case ObjectPascalParser::ARRAY_2: {
        setState(591);
        arrayType();
        break;
      }

      case ObjectPascalParser::SET: {
        setState(592);
        setType();
        break;
      }

      case ObjectPascalParser::FILE: {
        setState(593);
        fileType();
        break;
      }

      case ObjectPascalParser::RECORD: {
        setState(594);
        recType();
        setState(596);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::PACKED) {
          setState(595);
          match(ObjectPascalParser::PACKED);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

ObjectPascalParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ArrayContext* ObjectPascalParser::ArrayTypeContext::array() {
  return getRuleContext<ObjectPascalParser::ArrayContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ArrayTypeContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::OrdinalTypeContext *> ObjectPascalParser::ArrayTypeContext::ordinalType() {
  return getRuleContexts<ObjectPascalParser::OrdinalTypeContext>();
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ArrayTypeContext::ordinalType(size_t i) {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ArrayTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayType;
}


std::any ObjectPascalParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 76, ObjectPascalParser::RuleArrayType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(600);
    array();
    setState(612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(601);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(602);
      ordinalType();
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectPascalParser::COMMA) {
        setState(603);
        match(ObjectPascalParser::COMMA);
        setState(604);
        ordinalType();
        setState(609);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(610);
      match(ObjectPascalParser::RIGHT_BRACKET);
    }
    setState(614);
    match(ObjectPascalParser::OF);
    setState(615);
    type();
    setState(617);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(616);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecTypeContext ------------------------------------------------------------------

ObjectPascalParser::RecTypeContext::RecTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::RECORD() {
  return getToken(ObjectPascalParser::RECORD, 0);
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecTypeContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::RecTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::RecTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecType;
}


std::any ObjectPascalParser::RecTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::recType() {
  RecTypeContext *_localctx = _tracker.createInstance<RecTypeContext>(_ctx, getState());
  enterRule(_localctx, 78, ObjectPascalParser::RuleRecType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(619);
    match(ObjectPascalParser::RECORD);
    setState(621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(620);
      fieldList();
    }
    setState(623);
    match(ObjectPascalParser::END);
    setState(625);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(624);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldListContext ------------------------------------------------------------------

ObjectPascalParser::FieldListContext::FieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FieldDeclContext *> ObjectPascalParser::FieldListContext::fieldDecl() {
  return getRuleContexts<ObjectPascalParser::FieldDeclContext>();
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::FieldListContext::fieldDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::FieldDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FieldListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FieldListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::FieldListContext::variantSection() {
  return getRuleContext<ObjectPascalParser::VariantSectionContext>(0);
}


size_t ObjectPascalParser::FieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldList;
}


std::any ObjectPascalParser::FieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::fieldList() {
  FieldListContext *_localctx = _tracker.createInstance<FieldListContext>(_ctx, getState());
  enterRule(_localctx, 80, ObjectPascalParser::RuleFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(630); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(627);
      fieldDecl();
      setState(628);
      match(ObjectPascalParser::SEMI);
      setState(632); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
    setState(635);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CASE) {
      setState(634);
      variantSection();
    }
    setState(638);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(637);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclContext ------------------------------------------------------------------

ObjectPascalParser::FieldDeclContext::FieldDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::FieldDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FieldDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::FieldDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FieldDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FieldDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldDecl;
}


std::any ObjectPascalParser::FieldDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::fieldDecl() {
  FieldDeclContext *_localctx = _tracker.createInstance<FieldDeclContext>(_ctx, getState());
  enterRule(_localctx, 82, ObjectPascalParser::RuleFieldDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(640);
    identList();
    setState(641);
    match(ObjectPascalParser::COLON);
    setState(642);
    type();
    setState(644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(643);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantSectionContext ------------------------------------------------------------------

ObjectPascalParser::VariantSectionContext::VariantSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::VariantSectionContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

std::vector<ObjectPascalParser::RecVariantContext *> ObjectPascalParser::VariantSectionContext::recVariant() {
  return getRuleContexts<ObjectPascalParser::RecVariantContext>();
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::VariantSectionContext::recVariant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecVariantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VariantSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VariantSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantSection;
}


std::any ObjectPascalParser::VariantSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::variantSection() {
  VariantSectionContext *_localctx = _tracker.createInstance<VariantSectionContext>(_ctx, getState());
  enterRule(_localctx, 84, ObjectPascalParser::RuleVariantSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(646);
    match(ObjectPascalParser::CASE);
    setState(649);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(647);
      match(ObjectPascalParser::Ident);
      setState(648);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(651);
    typeId();
    setState(652);
    match(ObjectPascalParser::OF);
    setState(653);
    recVariant();
    setState(658);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(654);
        match(ObjectPascalParser::SEMI);
        setState(655);
        recVariant(); 
      }
      setState(660);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecVariantContext ------------------------------------------------------------------

ObjectPascalParser::RecVariantContext::RecVariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::RecVariantContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::RecVariantContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecVariantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecVariantContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}


size_t ObjectPascalParser::RecVariantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecVariant;
}


std::any ObjectPascalParser::RecVariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecVariant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::recVariant() {
  RecVariantContext *_localctx = _tracker.createInstance<RecVariantContext>(_ctx, getState());
  enterRule(_localctx, 86, ObjectPascalParser::RuleRecVariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    constExpr();
    setState(666);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(662);
      match(ObjectPascalParser::COMMA);
      setState(663);
      constExpr();
      setState(668);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(669);
    match(ObjectPascalParser::COLON);
    setState(670);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(671);
      fieldList();
    }
    setState(674);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTypeContext ------------------------------------------------------------------

ObjectPascalParser::SetTypeContext::SetTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::SET() {
  return getToken(ObjectPascalParser::SET, 0);
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SetTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::SetTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::SetTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetType;
}


std::any ObjectPascalParser::SetTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::setType() {
  SetTypeContext *_localctx = _tracker.createInstance<SetTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, ObjectPascalParser::RuleSetType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(676);
    match(ObjectPascalParser::SET);
    setState(677);
    match(ObjectPascalParser::OF);
    setState(678);
    ordinalType();
    setState(680);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(679);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileTypeContext ------------------------------------------------------------------

ObjectPascalParser::FileTypeContext::FileTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FileTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FileTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FileTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFileType;
}


std::any ObjectPascalParser::FileTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFileType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::fileType() {
  FileTypeContext *_localctx = _tracker.createInstance<FileTypeContext>(_ctx, getState());
  enterRule(_localctx, 90, ObjectPascalParser::RuleFileType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(682);
    match(ObjectPascalParser::FILE);
    setState(683);
    match(ObjectPascalParser::OF);
    setState(684);
    typeId();
    setState(686);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(685);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerTypeContext ------------------------------------------------------------------

ObjectPascalParser::PointerTypeContext::PointerTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PointerTypeContext::CARET() {
  return getToken(ObjectPascalParser::CARET, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PointerTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PointerTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PointerTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePointerType;
}


std::any ObjectPascalParser::PointerTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPointerType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::pointerType() {
  PointerTypeContext *_localctx = _tracker.createInstance<PointerTypeContext>(_ctx, getState());
  enterRule(_localctx, 92, ObjectPascalParser::RulePointerType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(688);
    match(ObjectPascalParser::CARET);
    setState(689);
    typeId();
    setState(691);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      setState(690);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureTypeContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureTypeContext::ProcedureTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureTypeContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ProcedureTypeContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}


size_t ObjectPascalParser::ProcedureTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureType;
}


std::any ObjectPascalParser::ProcedureTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::procedureType() {
  ProcedureTypeContext *_localctx = _tracker.createInstance<ProcedureTypeContext>(_ctx, getState());
  enterRule(_localctx, 94, ObjectPascalParser::RuleProcedureType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(695);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2: {
        setState(693);
        procedureHeading();
        break;
      }

      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2: {
        setState(694);
        functionHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::OF) {
      setState(697);
      match(ObjectPascalParser::OF);
      setState(698);
      match(ObjectPascalParser::OBJECT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarSectionContext ------------------------------------------------------------------

ObjectPascalParser::VarSectionContext::VarSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::VarContext* ObjectPascalParser::VarSectionContext::var() {
  return getRuleContext<ObjectPascalParser::VarContext>(0);
}

std::vector<ObjectPascalParser::VarDeclContext *> ObjectPascalParser::VarSectionContext::varDecl() {
  return getRuleContexts<ObjectPascalParser::VarDeclContext>();
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::VarSectionContext::varDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::VarDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VarSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VarSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarSection;
}


std::any ObjectPascalParser::VarSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::varSection() {
  VarSectionContext *_localctx = _tracker.createInstance<VarSectionContext>(_ctx, getState());
  enterRule(_localctx, 96, ObjectPascalParser::RuleVarSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(701);
    var();
    setState(702);
    varDecl();
    setState(707);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(703);
      match(ObjectPascalParser::SEMI);
      setState(704);
      varDecl();
      setState(709);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

ObjectPascalParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::VarDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::VarDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::VarDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::VarDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ABSOLUTE() {
  return getToken(ObjectPascalParser::ABSOLUTE, 0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}


size_t ObjectPascalParser::VarDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarDecl;
}


std::any ObjectPascalParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 98, ObjectPascalParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(710);
    identList();
    setState(711);
    match(ObjectPascalParser::COLON);
    setState(712);
    type();
    setState(720);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ABSOLUTE: {
        setState(713);
        match(ObjectPascalParser::ABSOLUTE);
        setState(716);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::Ident: {
            setState(714);
            match(ObjectPascalParser::Ident);
            break;
          }

          case ObjectPascalParser::END:
          case ObjectPascalParser::LIBRARY:
          case ObjectPascalParser::IMPLEMENTATION:
          case ObjectPascalParser::INITIALIZATION:
          case ObjectPascalParser::LABEL:
          case ObjectPascalParser::CONST:
          case ObjectPascalParser::TYPE_:
          case ObjectPascalParser::VAR_1:
          case ObjectPascalParser::VAR_2:
          case ObjectPascalParser::FUNCTION_1:
          case ObjectPascalParser::FUNCTION_2:
          case ObjectPascalParser::PROCEDURE_1:
          case ObjectPascalParser::PROCEDURE_2:
          case ObjectPascalParser::BEGIN_1:
          case ObjectPascalParser::BEGIN_2:
          case ObjectPascalParser::SEMI:
          case ObjectPascalParser::CARET:
          case ObjectPascalParser::PLUS:
          case ObjectPascalParser::MINUS:
          case ObjectPascalParser::STAR:
          case ObjectPascalParser::SHARP:
          case ObjectPascalParser::PLATFORM:
          case ObjectPascalParser::DEPRECATED:
          case ObjectPascalParser::StringLiteral:
          case ObjectPascalParser::HEXADECIMALDIGIT:
          case ObjectPascalParser::OCTALDIGIT:
          case ObjectPascalParser::DIGIT: {
            setState(715);
            constExpr();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::ASSIGN: {
        setState(718);
        match(ObjectPascalParser::ASSIGN);
        setState(719);
        constExpr();
        break;
      }

      case ObjectPascalParser::END:
      case ObjectPascalParser::LIBRARY:
      case ObjectPascalParser::IMPLEMENTATION:
      case ObjectPascalParser::INITIALIZATION:
      case ObjectPascalParser::LABEL:
      case ObjectPascalParser::CONST:
      case ObjectPascalParser::TYPE_:
      case ObjectPascalParser::VAR_1:
      case ObjectPascalParser::VAR_2:
      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2:
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2:
      case ObjectPascalParser::BEGIN_1:
      case ObjectPascalParser::BEGIN_2:
      case ObjectPascalParser::SEMI:
      case ObjectPascalParser::PLATFORM:
      case ObjectPascalParser::DEPRECATED: {
        break;
      }

    default:
      break;
    }
    setState(723);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(722);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

ObjectPascalParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::SimpleGroupedContext *> ObjectPascalParser::ExpressionContext::simpleGrouped() {
  return getRuleContexts<ObjectPascalParser::SimpleGroupedContext>();
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::ExpressionContext::simpleGrouped(size_t i) {
  return getRuleContext<ObjectPascalParser::SimpleGroupedContext>(i);
}

std::vector<ObjectPascalParser::RelOpContext *> ObjectPascalParser::ExpressionContext::relOp() {
  return getRuleContexts<ObjectPascalParser::RelOpContext>();
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::ExpressionContext::relOp(size_t i) {
  return getRuleContext<ObjectPascalParser::RelOpContext>(i);
}


size_t ObjectPascalParser::ExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExpression;
}


std::any ObjectPascalParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 100, ObjectPascalParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(725);
    simpleGrouped();
    setState(731);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::IN || ((((_la - 101) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 101)) & ((1ULL << (ObjectPascalParser::IS - 101))
      | (1ULL << (ObjectPascalParser::AS_1 - 101))
      | (1ULL << (ObjectPascalParser::AS_2 - 101))
      | (1ULL << (ObjectPascalParser::GRATER - 101))
      | (1ULL << (ObjectPascalParser::LESS - 101))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 101))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 101))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 101)))) != 0)) {
      setState(726);
      relOp();
      setState(727);
      simpleGrouped();
      setState(733);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleGroupedContext ------------------------------------------------------------------

ObjectPascalParser::SimpleGroupedContext::SimpleGroupedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::SimpleGroupedContext::simpleExpression() {
  return getRuleContext<ObjectPascalParser::SimpleExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::SimpleGroupedContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleGrouped;
}


std::any ObjectPascalParser::SimpleGroupedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleGrouped(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::simpleGrouped() {
  SimpleGroupedContext *_localctx = _tracker.createInstance<SimpleGroupedContext>(_ctx, getState());
  enterRule(_localctx, 102, ObjectPascalParser::RuleSimpleGrouped);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(734);
      simpleExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(735);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(736);
      simpleExpression();
      setState(737);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleExpressionContext ------------------------------------------------------------------

ObjectPascalParser::SimpleExpressionContext::SimpleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::TermContext *> ObjectPascalParser::SimpleExpressionContext::term() {
  return getRuleContexts<ObjectPascalParser::TermContext>();
}

ObjectPascalParser::TermContext* ObjectPascalParser::SimpleExpressionContext::term(size_t i) {
  return getRuleContext<ObjectPascalParser::TermContext>(i);
}

std::vector<ObjectPascalParser::AddOpContext *> ObjectPascalParser::SimpleExpressionContext::addOp() {
  return getRuleContexts<ObjectPascalParser::AddOpContext>();
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::SimpleExpressionContext::addOp(size_t i) {
  return getRuleContext<ObjectPascalParser::AddOpContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SimpleExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleExpression;
}


std::any ObjectPascalParser::SimpleExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::simpleExpression() {
  SimpleExpressionContext *_localctx = _tracker.createInstance<SimpleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 104, ObjectPascalParser::RuleSimpleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(742);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      setState(741);
      _la = _input->LA(1);
      if (!(_la == ObjectPascalParser::PLUS

      || _la == ObjectPascalParser::MINUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(744);
    term();
    setState(750);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & ((1ULL << (ObjectPascalParser::OR - 102))
      | (1ULL << (ObjectPascalParser::XOR - 102))
      | (1ULL << (ObjectPascalParser::PLUS - 102))
      | (1ULL << (ObjectPascalParser::MINUS - 102)))) != 0)) {
      setState(745);
      addOp();
      setState(746);
      term();
      setState(752);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

ObjectPascalParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FactorContext *> ObjectPascalParser::TermContext::factor() {
  return getRuleContexts<ObjectPascalParser::FactorContext>();
}

ObjectPascalParser::FactorContext* ObjectPascalParser::TermContext::factor(size_t i) {
  return getRuleContext<ObjectPascalParser::FactorContext>(i);
}

std::vector<ObjectPascalParser::MulOpContext *> ObjectPascalParser::TermContext::mulOp() {
  return getRuleContexts<ObjectPascalParser::MulOpContext>();
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::TermContext::mulOp(size_t i) {
  return getRuleContext<ObjectPascalParser::MulOpContext>(i);
}


size_t ObjectPascalParser::TermContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTerm;
}


std::any ObjectPascalParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TermContext* ObjectPascalParser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 106, ObjectPascalParser::RuleTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(753);
    factor();
    setState(759);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 104) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 104)) & ((1ULL << (ObjectPascalParser::DIV_LITTLE - 104))
      | (1ULL << (ObjectPascalParser::MOD - 104))
      | (1ULL << (ObjectPascalParser::AND_LITTLE - 104))
      | (1ULL << (ObjectPascalParser::SHL - 104))
      | (1ULL << (ObjectPascalParser::SHR - 104))
      | (1ULL << (ObjectPascalParser::DIV_BIG - 104))
      | (1ULL << (ObjectPascalParser::AND_BIG - 104))
      | (1ULL << (ObjectPascalParser::STAR - 104))
      | (1ULL << (ObjectPascalParser::DIV_ - 104)))) != 0)) {
      setState(754);
      mulOp();
      setState(755);
      factor();
      setState(761);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

ObjectPascalParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::FactorContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::FactorContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::DOG() {
  return getToken(ObjectPascalParser::DOG, 0);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::FactorContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::FactorContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NIL() {
  return getToken(ObjectPascalParser::NIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::FactorContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

ObjectPascalParser::NotContext* ObjectPascalParser::FactorContext::not_() {
  return getRuleContext<ObjectPascalParser::NotContext>(0);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::FactorContext::factor() {
  return getRuleContext<ObjectPascalParser::FactorContext>(0);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::FactorContext::setConstructor() {
  return getRuleContext<ObjectPascalParser::SetConstructorContext>(0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FactorContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::FactorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFactor;
}


std::any ObjectPascalParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 108, ObjectPascalParser::RuleFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(787);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(762);
      designator();
      setState(767);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LEFT_PAREN) {
        setState(763);
        match(ObjectPascalParser::LEFT_PAREN);
        setState(764);
        exprList();
        setState(765);
        match(ObjectPascalParser::RIGHT_PAREN);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(769);
      match(ObjectPascalParser::DOG);
      setState(770);
      designator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(771);
      number();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(772);
      string();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(773);
      match(ObjectPascalParser::NIL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(774);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(775);
      expression();
      setState(776);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(778);
      not_();
      setState(779);
      factor();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(781);
      setConstructor();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(782);
      typeId();
      setState(783);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(784);
      expression();
      setState(785);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelOpContext ------------------------------------------------------------------

ObjectPascalParser::RelOpContext::RelOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER() {
  return getToken(ObjectPascalParser::GRATER, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS() {
  return getToken(ObjectPascalParser::LESS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS_EQUAL() {
  return getToken(ObjectPascalParser::LESS_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER_EQUAL() {
  return getToken(ObjectPascalParser::GRATER_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::NOT_EQUAL() {
  return getToken(ObjectPascalParser::NOT_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IN() {
  return getToken(ObjectPascalParser::IN, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IS() {
  return getToken(ObjectPascalParser::IS, 0);
}

ObjectPascalParser::AsContext* ObjectPascalParser::RelOpContext::as() {
  return getRuleContext<ObjectPascalParser::AsContext>(0);
}


size_t ObjectPascalParser::RelOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRelOp;
}


std::any ObjectPascalParser::RelOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRelOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::relOp() {
  RelOpContext *_localctx = _tracker.createInstance<RelOpContext>(_ctx, getState());
  enterRule(_localctx, 110, ObjectPascalParser::RuleRelOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(797);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::GRATER: {
        enterOuterAlt(_localctx, 1);
        setState(789);
        match(ObjectPascalParser::GRATER);
        break;
      }

      case ObjectPascalParser::LESS: {
        enterOuterAlt(_localctx, 2);
        setState(790);
        match(ObjectPascalParser::LESS);
        break;
      }

      case ObjectPascalParser::LESS_EQUAL: {
        enterOuterAlt(_localctx, 3);
        setState(791);
        match(ObjectPascalParser::LESS_EQUAL);
        break;
      }

      case ObjectPascalParser::GRATER_EQUAL: {
        enterOuterAlt(_localctx, 4);
        setState(792);
        match(ObjectPascalParser::GRATER_EQUAL);
        break;
      }

      case ObjectPascalParser::NOT_EQUAL: {
        enterOuterAlt(_localctx, 5);
        setState(793);
        match(ObjectPascalParser::NOT_EQUAL);
        break;
      }

      case ObjectPascalParser::IN: {
        enterOuterAlt(_localctx, 6);
        setState(794);
        match(ObjectPascalParser::IN);
        break;
      }

      case ObjectPascalParser::IS: {
        enterOuterAlt(_localctx, 7);
        setState(795);
        match(ObjectPascalParser::IS);
        break;
      }

      case ObjectPascalParser::AS_1:
      case ObjectPascalParser::AS_2: {
        enterOuterAlt(_localctx, 8);
        setState(796);
        as();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddOpContext ------------------------------------------------------------------

ObjectPascalParser::AddOpContext::AddOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::OR() {
  return getToken(ObjectPascalParser::OR, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::XOR() {
  return getToken(ObjectPascalParser::XOR, 0);
}


size_t ObjectPascalParser::AddOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAddOp;
}


std::any ObjectPascalParser::AddOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAddOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::addOp() {
  AddOpContext *_localctx = _tracker.createInstance<AddOpContext>(_ctx, getState());
  enterRule(_localctx, 112, ObjectPascalParser::RuleAddOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(799);
    _la = _input->LA(1);
    if (!(((((_la - 102) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 102)) & ((1ULL << (ObjectPascalParser::OR - 102))
      | (1ULL << (ObjectPascalParser::XOR - 102))
      | (1ULL << (ObjectPascalParser::PLUS - 102))
      | (1ULL << (ObjectPascalParser::MINUS - 102)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulOpContext ------------------------------------------------------------------

ObjectPascalParser::MulOpContext::MulOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::DIV_() {
  return getToken(ObjectPascalParser::DIV_, 0);
}

ObjectPascalParser::DivContext* ObjectPascalParser::MulOpContext::div() {
  return getRuleContext<ObjectPascalParser::DivContext>(0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::MOD() {
  return getToken(ObjectPascalParser::MOD, 0);
}

ObjectPascalParser::AndContext* ObjectPascalParser::MulOpContext::and_() {
  return getRuleContext<ObjectPascalParser::AndContext>(0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHL() {
  return getToken(ObjectPascalParser::SHL, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHR() {
  return getToken(ObjectPascalParser::SHR, 0);
}


size_t ObjectPascalParser::MulOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMulOp;
}


std::any ObjectPascalParser::MulOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMulOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::mulOp() {
  MulOpContext *_localctx = _tracker.createInstance<MulOpContext>(_ctx, getState());
  enterRule(_localctx, 114, ObjectPascalParser::RuleMulOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(808);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(801);
        match(ObjectPascalParser::STAR);
        break;
      }

      case ObjectPascalParser::DIV_: {
        enterOuterAlt(_localctx, 2);
        setState(802);
        match(ObjectPascalParser::DIV_);
        break;
      }

      case ObjectPascalParser::DIV_LITTLE:
      case ObjectPascalParser::DIV_BIG: {
        enterOuterAlt(_localctx, 3);
        setState(803);
        div();
        break;
      }

      case ObjectPascalParser::MOD: {
        enterOuterAlt(_localctx, 4);
        setState(804);
        match(ObjectPascalParser::MOD);
        break;
      }

      case ObjectPascalParser::AND_LITTLE:
      case ObjectPascalParser::AND_BIG: {
        enterOuterAlt(_localctx, 5);
        setState(805);
        and_();
        break;
      }

      case ObjectPascalParser::SHL: {
        enterOuterAlt(_localctx, 6);
        setState(806);
        match(ObjectPascalParser::SHL);
        break;
      }

      case ObjectPascalParser::SHR: {
        enterOuterAlt(_localctx, 7);
        setState(807);
        match(ObjectPascalParser::SHR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveOpContext ------------------------------------------------------------------

ObjectPascalParser::AdditiveOpContext::AdditiveOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}


size_t ObjectPascalParser::AdditiveOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAdditiveOp;
}


std::any ObjectPascalParser::AdditiveOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::additiveOp() {
  AdditiveOpContext *_localctx = _tracker.createInstance<AdditiveOpContext>(_ctx, getState());
  enterRule(_localctx, 116, ObjectPascalParser::RuleAdditiveOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(810);
    _la = _input->LA(1);
    if (!(((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & ((1ULL << (ObjectPascalParser::PLUS - 158))
      | (1ULL << (ObjectPascalParser::MINUS - 158))
      | (1ULL << (ObjectPascalParser::STAR - 158)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

ObjectPascalParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::DesignatorContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::DOT() {
  return getTokens(ObjectPascalParser::DOT);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::DOT(size_t i) {
  return getToken(ObjectPascalParser::DOT, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::LEFT_BRACKET() {
  return getTokens(ObjectPascalParser::LEFT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::LEFT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::LEFT_BRACKET, i);
}

std::vector<ObjectPascalParser::ExprListContext *> ObjectPascalParser::DesignatorContext::exprList() {
  return getRuleContexts<ObjectPascalParser::ExprListContext>();
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::DesignatorContext::exprList(size_t i) {
  return getRuleContext<ObjectPascalParser::ExprListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::RIGHT_BRACKET() {
  return getTokens(ObjectPascalParser::RIGHT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::RIGHT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::DesignatorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDesignator;
}


std::any ObjectPascalParser::DesignatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDesignator(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 118, ObjectPascalParser::RuleDesignator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(812);
    qualId();
    setState(822);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 142) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 142)) & ((1ULL << (ObjectPascalParser::DOT - 142))
      | (1ULL << (ObjectPascalParser::LEFT_BRACKET - 142))
      | (1ULL << (ObjectPascalParser::CARET - 142)))) != 0)) {
      setState(820);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectPascalParser::DOT: {
          setState(813);
          match(ObjectPascalParser::DOT);
          setState(814);
          match(ObjectPascalParser::Ident);
          break;
        }

        case ObjectPascalParser::LEFT_BRACKET: {
          setState(815);
          match(ObjectPascalParser::LEFT_BRACKET);
          setState(816);
          exprList();
          setState(817);
          match(ObjectPascalParser::RIGHT_BRACKET);
          break;
        }

        case ObjectPascalParser::CARET: {
          setState(819);
          match(ObjectPascalParser::CARET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(824);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetConstructorContext ------------------------------------------------------------------

ObjectPascalParser::SetConstructorContext::SetConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::SetElementContext *> ObjectPascalParser::SetConstructorContext::setElement() {
  return getRuleContexts<ObjectPascalParser::SetElementContext>();
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::SetConstructorContext::setElement(size_t i) {
  return getRuleContext<ObjectPascalParser::SetElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::SetConstructorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::SetConstructorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetConstructor;
}


std::any ObjectPascalParser::SetConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetConstructor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::setConstructor() {
  SetConstructorContext *_localctx = _tracker.createInstance<SetConstructorContext>(_ctx, getState());
  enterRule(_localctx, 120, ObjectPascalParser::RuleSetConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    match(ObjectPascalParser::LEFT_BRACKET);
    setState(826);
    setElement();
    setState(831);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(827);
      match(ObjectPascalParser::COMMA);
      setState(828);
      setElement();
      setState(833);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(834);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetElementContext ------------------------------------------------------------------

ObjectPascalParser::SetElementContext::SetElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::SetElementContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::SetElementContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetElementContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::SetElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetElement;
}


std::any ObjectPascalParser::SetElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::setElement() {
  SetElementContext *_localctx = _tracker.createInstance<SetElementContext>(_ctx, getState());
  enterRule(_localctx, 122, ObjectPascalParser::RuleSetElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    expression();
    setState(839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(837);
      match(ObjectPascalParser::DOT_DOT);
      setState(838);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprListContext ------------------------------------------------------------------

ObjectPascalParser::ExprListContext::ExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ExprListContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ExprListContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExprListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExprListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExprListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExprList;
}


std::any ObjectPascalParser::ExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExprList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::exprList() {
  ExprListContext *_localctx = _tracker.createInstance<ExprListContext>(_ctx, getState());
  enterRule(_localctx, 124, ObjectPascalParser::RuleExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(841);
    expression();
    setState(846);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(842);
      match(ObjectPascalParser::COMMA);
      setState(843);
      expression();
      setState(848);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

ObjectPascalParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::StatementContext::simpleStatement() {
  return getRuleContext<ObjectPascalParser::SimpleStatementContext>(0);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::StatementContext::structStmt() {
  return getRuleContext<ObjectPascalParser::StructStmtContext>(0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::StatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StatementContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}


size_t ObjectPascalParser::StatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStatement;
}


std::any ObjectPascalParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 126, ObjectPascalParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(852);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(849);
      labelId();
      setState(850);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(856);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INHERITED:
      case ObjectPascalParser::GOTO:
      case ObjectPascalParser::Ident: {
        setState(854);
        simpleStatement();
        break;
      }

      case ObjectPascalParser::CASE:
      case ObjectPascalParser::BEGIN_1:
      case ObjectPascalParser::BEGIN_2:
      case ObjectPascalParser::IF_1:
      case ObjectPascalParser::IF_2:
      case ObjectPascalParser::REPEAT:
      case ObjectPascalParser::WHILE:
      case ObjectPascalParser::FOR_1:
      case ObjectPascalParser::FOR_2:
      case ObjectPascalParser::WITH:
      case ObjectPascalParser::TRY:
      case ObjectPascalParser::RAISE: {
        setState(855);
        structStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtListContext ------------------------------------------------------------------

ObjectPascalParser::StmtListContext::StmtListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::StmtListContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::StmtListContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StmtListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::StmtListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::StmtListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStmtList;
}


std::any ObjectPascalParser::StmtListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStmtList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::stmtList() {
  StmtListContext *_localctx = _tracker.createInstance<StmtListContext>(_ctx, getState());
  enterRule(_localctx, 128, ObjectPascalParser::RuleStmtList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(858);
    statement();
    setState(863);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(859);
        match(ObjectPascalParser::SEMI);
        setState(860);
        statement(); 
      }
      setState(865);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleStatementContext ------------------------------------------------------------------

ObjectPascalParser::SimpleStatementContext::SimpleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::SimpleStatementContext::assignmentStmt() {
  return getRuleContext<ObjectPascalParser::AssignmentStmtContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::INHERITED() {
  return getToken(ObjectPascalParser::INHERITED, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::GOTO() {
  return getToken(ObjectPascalParser::GOTO, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::SimpleStatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

ObjectPascalParser::ProcedureCallContext* ObjectPascalParser::SimpleStatementContext::procedureCall() {
  return getRuleContext<ObjectPascalParser::ProcedureCallContext>(0);
}


size_t ObjectPascalParser::SimpleStatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleStatement;
}


std::any ObjectPascalParser::SimpleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::simpleStatement() {
  SimpleStatementContext *_localctx = _tracker.createInstance<SimpleStatementContext>(_ctx, getState());
  enterRule(_localctx, 130, ObjectPascalParser::RuleSimpleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(871);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(866);
      assignmentStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(867);
      match(ObjectPascalParser::INHERITED);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(868);
      match(ObjectPascalParser::GOTO);
      setState(869);
      labelId();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(870);
      procedureCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructStmtContext ------------------------------------------------------------------

ObjectPascalParser::StructStmtContext::StructStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::StructStmtContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::StructStmtContext::conditionalStmt() {
  return getRuleContext<ObjectPascalParser::ConditionalStmtContext>(0);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::StructStmtContext::loopStmt() {
  return getRuleContext<ObjectPascalParser::LoopStmtContext>(0);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::StructStmtContext::withStmt() {
  return getRuleContext<ObjectPascalParser::WithStmtContext>(0);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::StructStmtContext::tryExceptStmt() {
  return getRuleContext<ObjectPascalParser::TryExceptStmtContext>(0);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::StructStmtContext::tryFinallyStmt() {
  return getRuleContext<ObjectPascalParser::TryFinallyStmtContext>(0);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::StructStmtContext::raiseStmt() {
  return getRuleContext<ObjectPascalParser::RaiseStmtContext>(0);
}


size_t ObjectPascalParser::StructStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStructStmt;
}


std::any ObjectPascalParser::StructStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStructStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::structStmt() {
  StructStmtContext *_localctx = _tracker.createInstance<StructStmtContext>(_ctx, getState());
  enterRule(_localctx, 132, ObjectPascalParser::RuleStructStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(880);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(873);
      compoundStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(874);
      conditionalStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(875);
      loopStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(876);
      withStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(877);
      tryExceptStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(878);
      tryFinallyStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(879);
      raiseStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BeginContext ------------------------------------------------------------------

ObjectPascalParser::BeginContext::BeginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::BeginContext::BEGIN_1() {
  return getToken(ObjectPascalParser::BEGIN_1, 0);
}

tree::TerminalNode* ObjectPascalParser::BeginContext::BEGIN_2() {
  return getToken(ObjectPascalParser::BEGIN_2, 0);
}


size_t ObjectPascalParser::BeginContext::getRuleIndex() const {
  return ObjectPascalParser::RuleBegin;
}


std::any ObjectPascalParser::BeginContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitBegin(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::BeginContext* ObjectPascalParser::begin() {
  BeginContext *_localctx = _tracker.createInstance<BeginContext>(_ctx, getState());
  enterRule(_localctx, 134, ObjectPascalParser::RuleBegin);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::BEGIN_1

    || _la == ObjectPascalParser::BEGIN_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStmtContext ------------------------------------------------------------------

ObjectPascalParser::CompoundStmtContext::CompoundStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::BeginContext* ObjectPascalParser::CompoundStmtContext::begin() {
  return getRuleContext<ObjectPascalParser::BeginContext>(0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CompoundStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::CompoundStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCompoundStmt;
}


std::any ObjectPascalParser::CompoundStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCompoundStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::compoundStmt() {
  CompoundStmtContext *_localctx = _tracker.createInstance<CompoundStmtContext>(_ctx, getState());
  enterRule(_localctx, 136, ObjectPascalParser::RuleCompoundStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(884);
    begin();
    setState(885);
    stmtList();
    setState(887);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(886);
      match(ObjectPascalParser::SEMI);
    }
    setState(889);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalStmtContext ------------------------------------------------------------------

ObjectPascalParser::ConditionalStmtContext::ConditionalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ConditionalStmtContext::ifStmt() {
  return getRuleContext<ObjectPascalParser::IfStmtContext>(0);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::ConditionalStmtContext::caseStmt() {
  return getRuleContext<ObjectPascalParser::CaseStmtContext>(0);
}


size_t ObjectPascalParser::ConditionalStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConditionalStmt;
}


std::any ObjectPascalParser::ConditionalStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConditionalStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::conditionalStmt() {
  ConditionalStmtContext *_localctx = _tracker.createInstance<ConditionalStmtContext>(_ctx, getState());
  enterRule(_localctx, 138, ObjectPascalParser::RuleConditionalStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(893);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::IF_1:
      case ObjectPascalParser::IF_2: {
        enterOuterAlt(_localctx, 1);
        setState(891);
        ifStmt();
        break;
      }

      case ObjectPascalParser::CASE: {
        enterOuterAlt(_localctx, 2);
        setState(892);
        caseStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureCallContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureCallContext::ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ProcedureCallContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureCallContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureCallContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::ProcedureCallContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}


size_t ObjectPascalParser::ProcedureCallContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureCall;
}


std::any ObjectPascalParser::ProcedureCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureCall(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureCallContext* ObjectPascalParser::procedureCall() {
  ProcedureCallContext *_localctx = _tracker.createInstance<ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 140, ObjectPascalParser::RuleProcedureCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(895);
    qualId();
    setState(896);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(898);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(897);
      exprList();
      break;
    }

    default:
      break;
    }
    setState(900);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentStmtContext ------------------------------------------------------------------

ObjectPascalParser::AssignmentStmtContext::AssignmentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::AssignmentStmtContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::AssignmentStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::AssignmentStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}


size_t ObjectPascalParser::AssignmentStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAssignmentStmt;
}


std::any ObjectPascalParser::AssignmentStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::assignmentStmt() {
  AssignmentStmtContext *_localctx = _tracker.createInstance<AssignmentStmtContext>(_ctx, getState());
  enterRule(_localctx, 142, ObjectPascalParser::RuleAssignmentStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    designator();
    setState(903);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(904);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

ObjectPascalParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IfContext* ObjectPascalParser::IfStmtContext::if_() {
  return getRuleContext<ObjectPascalParser::IfContext>(0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::IfStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::THEN() {
  return getToken(ObjectPascalParser::THEN, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::IfStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}


size_t ObjectPascalParser::IfStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIfStmt;
}


std::any ObjectPascalParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 144, ObjectPascalParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    if_();
    setState(907);
    expression();
    setState(908);
    match(ObjectPascalParser::THEN);
    setState(909);
    statement();
    setState(912);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(910);
      match(ObjectPascalParser::ELSE);
      setState(911);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStmtContext ------------------------------------------------------------------

ObjectPascalParser::CaseStmtContext::CaseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::CaseStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<ObjectPascalParser::CaseSelectorContext *> ObjectPascalParser::CaseStmtContext::caseSelector() {
  return getRuleContexts<ObjectPascalParser::CaseSelectorContext>();
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::CaseStmtContext::caseSelector(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseSelectorContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CaseStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::CaseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseStmt;
}


std::any ObjectPascalParser::CaseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::caseStmt() {
  CaseStmtContext *_localctx = _tracker.createInstance<CaseStmtContext>(_ctx, getState());
  enterRule(_localctx, 146, ObjectPascalParser::RuleCaseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(914);
    match(ObjectPascalParser::CASE);
    setState(915);
    expression();
    setState(916);
    match(ObjectPascalParser::OF);

    setState(917);
    caseSelector();
    setState(922);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(918);
        match(ObjectPascalParser::SEMI);
        setState(919);
        caseSelector(); 
      }
      setState(924);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    }
    setState(927);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ELSE) {
      setState(925);
      match(ObjectPascalParser::ELSE);
      setState(926);
      stmtList();
    }
    setState(930);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(929);
      match(ObjectPascalParser::SEMI);
    }
    setState(932);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseSelectorContext ------------------------------------------------------------------

ObjectPascalParser::CaseSelectorContext::CaseSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::CaseLabelContext *> ObjectPascalParser::CaseSelectorContext::caseLabel() {
  return getRuleContexts<ObjectPascalParser::CaseLabelContext>();
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::CaseSelectorContext::caseLabel(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseLabelContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::CaseSelectorContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseSelectorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::CaseSelectorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseSelector;
}


std::any ObjectPascalParser::CaseSelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseSelector(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::caseSelector() {
  CaseSelectorContext *_localctx = _tracker.createInstance<CaseSelectorContext>(_ctx, getState());
  enterRule(_localctx, 148, ObjectPascalParser::RuleCaseSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(934);
    caseLabel();
    setState(939);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(935);
      match(ObjectPascalParser::COMMA);
      setState(936);
      caseLabel();
      setState(941);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(942);
    match(ObjectPascalParser::COLON);
    setState(943);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseLabelContext ------------------------------------------------------------------

ObjectPascalParser::CaseLabelContext::CaseLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::CaseLabelContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::CaseLabelContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseLabelContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::CaseLabelContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseLabel;
}


std::any ObjectPascalParser::CaseLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseLabel(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::caseLabel() {
  CaseLabelContext *_localctx = _tracker.createInstance<CaseLabelContext>(_ctx, getState());
  enterRule(_localctx, 150, ObjectPascalParser::RuleCaseLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(945);
    constExpr();
    setState(948);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(946);
      match(ObjectPascalParser::DOT_DOT);
      setState(947);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

ObjectPascalParser::LoopStmtContext::LoopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::LoopStmtContext::repeatStmt() {
  return getRuleContext<ObjectPascalParser::RepeatStmtContext>(0);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::LoopStmtContext::whileStmt() {
  return getRuleContext<ObjectPascalParser::WhileStmtContext>(0);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::LoopStmtContext::forStmt() {
  return getRuleContext<ObjectPascalParser::ForStmtContext>(0);
}


size_t ObjectPascalParser::LoopStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLoopStmt;
}


std::any ObjectPascalParser::LoopStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLoopStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::loopStmt() {
  LoopStmtContext *_localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
  enterRule(_localctx, 152, ObjectPascalParser::RuleLoopStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(953);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REPEAT: {
        enterOuterAlt(_localctx, 1);
        setState(950);
        repeatStmt();
        break;
      }

      case ObjectPascalParser::WHILE: {
        enterOuterAlt(_localctx, 2);
        setState(951);
        whileStmt();
        break;
      }

      case ObjectPascalParser::FOR_1:
      case ObjectPascalParser::FOR_2: {
        enterOuterAlt(_localctx, 3);
        setState(952);
        forStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatStmtContext ------------------------------------------------------------------

ObjectPascalParser::RepeatStmtContext::RepeatStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::REPEAT() {
  return getToken(ObjectPascalParser::REPEAT, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::RepeatStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::UNTIL() {
  return getToken(ObjectPascalParser::UNTIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::RepeatStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::RepeatStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRepeatStmt;
}


std::any ObjectPascalParser::RepeatStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRepeatStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::repeatStmt() {
  RepeatStmtContext *_localctx = _tracker.createInstance<RepeatStmtContext>(_ctx, getState());
  enterRule(_localctx, 154, ObjectPascalParser::RuleRepeatStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(955);
    match(ObjectPascalParser::REPEAT);
    setState(956);
    stmtList();
    setState(958);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(957);
      match(ObjectPascalParser::SEMI);
    }
    setState(960);
    match(ObjectPascalParser::UNTIL);
    setState(961);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

ObjectPascalParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::WHILE() {
  return getToken(ObjectPascalParser::WHILE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::WhileStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

ObjectPascalParser::DoContext* ObjectPascalParser::WhileStmtContext::do_() {
  return getRuleContext<ObjectPascalParser::DoContext>(0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WhileStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WhileStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWhileStmt;
}


std::any ObjectPascalParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 156, ObjectPascalParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(963);
    match(ObjectPascalParser::WHILE);
    setState(964);
    expression();
    setState(965);
    do_();
    setState(966);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

ObjectPascalParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ForContext* ObjectPascalParser::ForStmtContext::for_() {
  return getRuleContext<ObjectPascalParser::ForContext>(0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ForStmtContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ForStmtContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

ObjectPascalParser::DoContext* ObjectPascalParser::ForStmtContext::do_() {
  return getRuleContext<ObjectPascalParser::DoContext>(0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ForStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::TO() {
  return getToken(ObjectPascalParser::TO, 0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DOWNTO() {
  return getToken(ObjectPascalParser::DOWNTO, 0);
}


size_t ObjectPascalParser::ForStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleForStmt;
}


std::any ObjectPascalParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 158, ObjectPascalParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(968);
    for_();
    setState(969);
    qualId();
    setState(970);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(971);
    expression();
    setState(972);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::TO

    || _la == ObjectPascalParser::DOWNTO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(973);
    expression();
    setState(974);
    do_();
    setState(975);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStmtContext ------------------------------------------------------------------

ObjectPascalParser::WithStmtContext::WithStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::WITH() {
  return getToken(ObjectPascalParser::WITH, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::WithStmtContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

ObjectPascalParser::DoContext* ObjectPascalParser::WithStmtContext::do_() {
  return getRuleContext<ObjectPascalParser::DoContext>(0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WithStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WithStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWithStmt;
}


std::any ObjectPascalParser::WithStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWithStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::withStmt() {
  WithStmtContext *_localctx = _tracker.createInstance<WithStmtContext>(_ctx, getState());
  enterRule(_localctx, 160, ObjectPascalParser::RuleWithStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(977);
    match(ObjectPascalParser::WITH);
    setState(978);
    qualIdList();
    setState(979);
    do_();
    setState(980);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryExceptStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryExceptStmtContext::TryExceptStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryExceptStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryExceptStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

ObjectPascalParser::ExceptContext* ObjectPascalParser::TryExceptStmtContext::except() {
  return getRuleContext<ObjectPascalParser::ExceptContext>(0);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::TryExceptStmtContext::exceptionBlock() {
  return getRuleContext<ObjectPascalParser::ExceptionBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TryExceptStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TryExceptStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryExceptStmt;
}


std::any ObjectPascalParser::TryExceptStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryExceptStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::tryExceptStmt() {
  TryExceptStmtContext *_localctx = _tracker.createInstance<TryExceptStmtContext>(_ctx, getState());
  enterRule(_localctx, 162, ObjectPascalParser::RuleTryExceptStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(982);
    match(ObjectPascalParser::TRY);
    setState(983);
    statement();
    setState(988);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(984);
      match(ObjectPascalParser::SEMI);
      setState(985);
      statement();
      setState(990);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(991);
    except();
    setState(992);
    exceptionBlock();
    setState(993);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionBlockContext ------------------------------------------------------------------

ObjectPascalParser::ExceptionBlockContext::ExceptionBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::ON() {
  return getTokens(ObjectPascalParser::ON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ON(size_t i) {
  return getToken(ObjectPascalParser::ON, i);
}

std::vector<ObjectPascalParser::TypeIdContext *> ObjectPascalParser::ExceptionBlockContext::typeId() {
  return getRuleContexts<ObjectPascalParser::TypeIdContext>();
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ExceptionBlockContext::typeId(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(i);
}

std::vector<ObjectPascalParser::DoContext *> ObjectPascalParser::ExceptionBlockContext::do_() {
  return getRuleContexts<ObjectPascalParser::DoContext>();
}

ObjectPascalParser::DoContext* ObjectPascalParser::ExceptionBlockContext::do_(size_t i) {
  return getRuleContext<ObjectPascalParser::DoContext>(i);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::ExceptionBlockContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ExceptionBlockContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::COLON() {
  return getTokens(ObjectPascalParser::COLON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::COLON(size_t i) {
  return getToken(ObjectPascalParser::COLON, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ExceptionBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExceptionBlock;
}


std::any ObjectPascalParser::ExceptionBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExceptionBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::exceptionBlock() {
  ExceptionBlockContext *_localctx = _tracker.createInstance<ExceptionBlockContext>(_ctx, getState());
  enterRule(_localctx, 164, ObjectPascalParser::RuleExceptionBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(995);
    match(ObjectPascalParser::ON);
    setState(998);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
    case 1: {
      setState(996);
      match(ObjectPascalParser::Ident);
      setState(997);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(1000);
    typeId();
    setState(1001);
    do_();
    setState(1002);
    statement();
    setState(1015);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(1003);
      match(ObjectPascalParser::SEMI);
      setState(1004);
      match(ObjectPascalParser::ON);
      setState(1007);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
      case 1: {
        setState(1005);
        match(ObjectPascalParser::Ident);
        setState(1006);
        match(ObjectPascalParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(1009);
      typeId();
      setState(1010);
      do_();
      setState(1011);
      statement();
      setState(1017);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(1018);
    match(ObjectPascalParser::ELSE);
    setState(1022);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & ((1ULL << (ObjectPascalParser::CASE - 44))
      | (1ULL << (ObjectPascalParser::INHERITED - 44))
      | (1ULL << (ObjectPascalParser::GOTO - 44))
      | (1ULL << (ObjectPascalParser::BEGIN_1 - 44))
      | (1ULL << (ObjectPascalParser::BEGIN_2 - 44))
      | (1ULL << (ObjectPascalParser::IF_1 - 44))
      | (1ULL << (ObjectPascalParser::IF_2 - 44))
      | (1ULL << (ObjectPascalParser::REPEAT - 44))
      | (1ULL << (ObjectPascalParser::WHILE - 44))
      | (1ULL << (ObjectPascalParser::FOR_1 - 44))
      | (1ULL << (ObjectPascalParser::FOR_2 - 44))
      | (1ULL << (ObjectPascalParser::WITH - 44))
      | (1ULL << (ObjectPascalParser::TRY - 44))
      | (1ULL << (ObjectPascalParser::RAISE - 44)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 149)) & ((1ULL << (ObjectPascalParser::COLON - 149))
      | (1ULL << (ObjectPascalParser::Ident - 149))
      | (1ULL << (ObjectPascalParser::HEXADECIMALDIGIT - 149))
      | (1ULL << (ObjectPascalParser::OCTALDIGIT - 149))
      | (1ULL << (ObjectPascalParser::DIGIT - 149)))) != 0)) {
      setState(1019);
      statement();
      setState(1024);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1026);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(1025);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryFinallyStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryFinallyStmtContext::TryFinallyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryFinallyStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryFinallyStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::FINALLY() {
  return getToken(ObjectPascalParser::FINALLY, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::TryFinallyStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryFinallyStmt;
}


std::any ObjectPascalParser::TryFinallyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryFinallyStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::tryFinallyStmt() {
  TryFinallyStmtContext *_localctx = _tracker.createInstance<TryFinallyStmtContext>(_ctx, getState());
  enterRule(_localctx, 166, ObjectPascalParser::RuleTryFinallyStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    match(ObjectPascalParser::TRY);
    setState(1029);
    statement();
    setState(1030);
    match(ObjectPascalParser::FINALLY);
    setState(1031);
    statement();
    setState(1033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(1032);
      match(ObjectPascalParser::SEMI);
    }
    setState(1035);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RaiseStmtContext ------------------------------------------------------------------

ObjectPascalParser::RaiseStmtContext::RaiseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::RAISE() {
  return getToken(ObjectPascalParser::RAISE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RaiseStmtContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::AT() {
  return getToken(ObjectPascalParser::AT, 0);
}


size_t ObjectPascalParser::RaiseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRaiseStmt;
}


std::any ObjectPascalParser::RaiseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRaiseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::raiseStmt() {
  RaiseStmtContext *_localctx = _tracker.createInstance<RaiseStmtContext>(_ctx, getState());
  enterRule(_localctx, 168, ObjectPascalParser::RuleRaiseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    match(ObjectPascalParser::RAISE);
    setState(1039);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(1038);
      match(ObjectPascalParser::Ident);
      break;
    }

    default:
      break;
    }
    setState(1043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::AT) {
      setState(1041);
      match(ObjectPascalParser::AT);
      setState(1042);
      match(ObjectPascalParser::Ident);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclSectionContext::ProcedureDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::procedureDecl() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclContext>(0);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::functionDecl() {
  return getRuleContext<ObjectPascalParser::FunctionDeclContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDeclSection;
}


std::any ObjectPascalParser::ProcedureDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::procedureDeclSection() {
  ProcedureDeclSectionContext *_localctx = _tracker.createInstance<ProcedureDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 170, ObjectPascalParser::RuleProcedureDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1047);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2: {
        enterOuterAlt(_localctx, 1);
        setState(1045);
        procedureDecl();
        break;
      }

      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2: {
        enterOuterAlt(_localctx, 2);
        setState(1046);
        functionDecl();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclContext::ProcedureDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureDeclContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ProcedureDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ProcedureDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::ProcedureDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ProcedureDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ProcedureDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDecl;
}


std::any ObjectPascalParser::ProcedureDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::procedureDecl() {
  ProcedureDeclContext *_localctx = _tracker.createInstance<ProcedureDeclContext>(_ctx, getState());
  enterRule(_localctx, 172, ObjectPascalParser::RuleProcedureDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1049);
    procedureHeading();
    setState(1050);
    match(ObjectPascalParser::SEMI);
    setState(1052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::VIRTUAL

    || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
      | (1ULL << (ObjectPascalParser::REGISTER - 123))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
      | (1ULL << (ObjectPascalParser::EXPORT - 123))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
      | (1ULL << (ObjectPascalParser::FAR - 123))
      | (1ULL << (ObjectPascalParser::FORWARD - 123))
      | (1ULL << (ObjectPascalParser::MESSAGE - 123))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
      | (1ULL << (ObjectPascalParser::PASCAL - 123))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
      | (1ULL << (ObjectPascalParser::SAFECALL - 123))
      | (1ULL << (ObjectPascalParser::STDCALL - 123))
      | (1ULL << (ObjectPascalParser::VARARGS - 123))
      | (1ULL << (ObjectPascalParser::LOCAL - 123))
      | (1ULL << (ObjectPascalParser::NEAR - 123))
      | (1ULL << (ObjectPascalParser::INLINE - 123))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
      setState(1051);
      directive();
    }
    setState(1055);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1054);
      portabilityDirective();
    }
    setState(1057);
    block();
    setState(1058);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclContext ------------------------------------------------------------------

ObjectPascalParser::FunctionDeclContext::FunctionDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::FunctionDeclContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FunctionDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FunctionDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::FunctionDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::FunctionDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FunctionDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FunctionDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionDecl;
}


std::any ObjectPascalParser::FunctionDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::functionDecl() {
  FunctionDeclContext *_localctx = _tracker.createInstance<FunctionDeclContext>(_ctx, getState());
  enterRule(_localctx, 174, ObjectPascalParser::RuleFunctionDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1060);
    functionHeading();
    setState(1061);
    match(ObjectPascalParser::SEMI);
    setState(1063);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::VIRTUAL

    || _la == ObjectPascalParser::ABSTRACT || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & ((1ULL << (ObjectPascalParser::CDECL - 123))
      | (1ULL << (ObjectPascalParser::REGISTER - 123))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 123))
      | (1ULL << (ObjectPascalParser::EXPORT - 123))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 123))
      | (1ULL << (ObjectPascalParser::FAR - 123))
      | (1ULL << (ObjectPascalParser::FORWARD - 123))
      | (1ULL << (ObjectPascalParser::MESSAGE - 123))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 123))
      | (1ULL << (ObjectPascalParser::PASCAL - 123))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 123))
      | (1ULL << (ObjectPascalParser::SAFECALL - 123))
      | (1ULL << (ObjectPascalParser::STDCALL - 123))
      | (1ULL << (ObjectPascalParser::VARARGS - 123))
      | (1ULL << (ObjectPascalParser::LOCAL - 123))
      | (1ULL << (ObjectPascalParser::NEAR - 123))
      | (1ULL << (ObjectPascalParser::INLINE - 123))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 123)))) != 0) || _la == ObjectPascalParser::OVERRIDE) {
      setState(1062);
      directive();
    }
    setState(1066);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1065);
      portabilityDirective();
    }
    setState(1068);
    block();
    setState(1069);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionHeadingContext ------------------------------------------------------------------

ObjectPascalParser::FunctionHeadingContext::FunctionHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::FunctionContext* ObjectPascalParser::FunctionHeadingContext::function() {
  return getRuleContext<ObjectPascalParser::FunctionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::FunctionHeadingContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::FunctionHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::FunctionHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionHeading;
}


std::any ObjectPascalParser::FunctionHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::functionHeading() {
  FunctionHeadingContext *_localctx = _tracker.createInstance<FunctionHeadingContext>(_ctx, getState());
  enterRule(_localctx, 176, ObjectPascalParser::RuleFunctionHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1071);
    function();
    setState(1072);
    match(ObjectPascalParser::Ident);
    setState(1074);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1073);
      formalParameters();
    }
    setState(1076);
    match(ObjectPascalParser::COLON);
    setState(1079);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::REAL48:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::DOT_DOT:
      case ObjectPascalParser::CARET:
      case ObjectPascalParser::PLUS:
      case ObjectPascalParser::MINUS:
      case ObjectPascalParser::STAR:
      case ObjectPascalParser::SHARP:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::StringLiteral:
      case ObjectPascalParser::HEXADECIMALDIGIT:
      case ObjectPascalParser::OCTALDIGIT:
      case ObjectPascalParser::DIGIT: {
        setState(1077);
        simpleType();
        break;
      }

      case ObjectPascalParser::STRING: {
        setState(1078);
        match(ObjectPascalParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureHeadingContext::ProcedureHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureContext* ObjectPascalParser::ProcedureHeadingContext::procedure() {
  return getRuleContext<ObjectPascalParser::ProcedureContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ProcedureHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ProcedureHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureHeading;
}


std::any ObjectPascalParser::ProcedureHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::procedureHeading() {
  ProcedureHeadingContext *_localctx = _tracker.createInstance<ProcedureHeadingContext>(_ctx, getState());
  enterRule(_localctx, 178, ObjectPascalParser::RuleProcedureHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1081);
    procedure();
    setState(1082);
    match(ObjectPascalParser::Ident);
    setState(1084);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1083);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

ObjectPascalParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::FormalParmContext *> ObjectPascalParser::FormalParametersContext::formalParm() {
  return getRuleContexts<ObjectPascalParser::FormalParmContext>();
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::FormalParametersContext::formalParm(size_t i) {
  return getRuleContext<ObjectPascalParser::FormalParmContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FormalParametersContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::FormalParametersContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParameters;
}


std::any ObjectPascalParser::FormalParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameters(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 180, ObjectPascalParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1092);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::VAR_1 - 14))
      | (1ULL << (ObjectPascalParser::VAR_2 - 14))
      | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0) || _la == ObjectPascalParser::Ident) {
      setState(1087);
      formalParm();
      setState(1088);
      match(ObjectPascalParser::SEMI);
      setState(1094);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1095);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParmContext ------------------------------------------------------------------

ObjectPascalParser::FormalParmContext::FormalParmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::FormalParmContext::parameter() {
  return getRuleContext<ObjectPascalParser::ParameterContext>(0);
}

ObjectPascalParser::VarContext* ObjectPascalParser::FormalParmContext::var() {
  return getRuleContext<ObjectPascalParser::VarContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::OUT() {
  return getToken(ObjectPascalParser::OUT, 0);
}


size_t ObjectPascalParser::FormalParmContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParm;
}


std::any ObjectPascalParser::FormalParmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::formalParm() {
  FormalParmContext *_localctx = _tracker.createInstance<FormalParmContext>(_ctx, getState());
  enterRule(_localctx, 182, ObjectPascalParser::RuleFormalParm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::VAR_1:
      case ObjectPascalParser::VAR_2: {
        setState(1097);
        var();
        break;
      }

      case ObjectPascalParser::CONST: {
        setState(1098);
        match(ObjectPascalParser::CONST);
        break;
      }

      case ObjectPascalParser::OUT: {
        setState(1099);
        match(ObjectPascalParser::OUT);
        break;
      }

      case ObjectPascalParser::Ident: {
        break;
      }

    default:
      break;
    }
    setState(1102);
    parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

ObjectPascalParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ParameterContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::ParameterContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

ObjectPascalParser::ArrayContext* ObjectPascalParser::ParameterContext::array() {
  return getRuleContext<ObjectPascalParser::ArrayContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ParameterContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ParameterContext::getRuleIndex() const {
  return ObjectPascalParser::RuleParameter;
}


std::any ObjectPascalParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 184, ObjectPascalParser::RuleParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1124);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1104);
      identList();
      setState(1116);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::COLON) {
        setState(1105);
        match(ObjectPascalParser::COLON);
        setState(1114);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::REAL:
          case ObjectPascalParser::SINGLE:
          case ObjectPascalParser::DOUBLE:
          case ObjectPascalParser::EXTENDED:
          case ObjectPascalParser::CURRENCY:
          case ObjectPascalParser::COMP:
          case ObjectPascalParser::SHORTINT:
          case ObjectPascalParser::SMALLINT:
          case ObjectPascalParser::INTEGER:
          case ObjectPascalParser::BYTE:
          case ObjectPascalParser::LONGINT:
          case ObjectPascalParser::WORD:
          case ObjectPascalParser::BOOLEAN:
          case ObjectPascalParser::CHAR:
          case ObjectPascalParser::WIDECHAR:
          case ObjectPascalParser::PCHAR:
          case ObjectPascalParser::ARRAY_1:
          case ObjectPascalParser::ARRAY_2:
          case ObjectPascalParser::REAL48:
          case ObjectPascalParser::LEFT_PAREN:
          case ObjectPascalParser::DOT_DOT:
          case ObjectPascalParser::CARET:
          case ObjectPascalParser::PLUS:
          case ObjectPascalParser::MINUS:
          case ObjectPascalParser::STAR:
          case ObjectPascalParser::SHARP:
          case ObjectPascalParser::CARDINAL:
          case ObjectPascalParser::INT64:
          case ObjectPascalParser::LONGWORD:
          case ObjectPascalParser::StringLiteral:
          case ObjectPascalParser::HEXADECIMALDIGIT:
          case ObjectPascalParser::OCTALDIGIT:
          case ObjectPascalParser::DIGIT: {
            setState(1109);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == ObjectPascalParser::ARRAY_1

            || _la == ObjectPascalParser::ARRAY_2) {
              setState(1106);
              array();
              setState(1107);
              match(ObjectPascalParser::OF);
            }
            setState(1111);
            simpleType();
            break;
          }

          case ObjectPascalParser::STRING: {
            setState(1112);
            match(ObjectPascalParser::STRING);
            break;
          }

          case ObjectPascalParser::FILE: {
            setState(1113);
            match(ObjectPascalParser::FILE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1118);
      match(ObjectPascalParser::Ident);
      setState(1119);
      match(ObjectPascalParser::COLON);
      setState(1120);
      simpleType();
      setState(1121);
      match(ObjectPascalParser::ASSIGN);
      setState(1122);
      constExpr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveContext ------------------------------------------------------------------

ObjectPascalParser::DirectiveContext::DirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::CDECL() {
  return getToken(ObjectPascalParser::CDECL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REGISTER() {
  return getToken(ObjectPascalParser::REGISTER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::DYNAMIC() {
  return getToken(ObjectPascalParser::DYNAMIC, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VIRTUAL() {
  return getToken(ObjectPascalParser::VIRTUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::DirectiveContext::externalDirective() {
  return getRuleContext<ObjectPascalParser::ExternalDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::NEAR() {
  return getToken(ObjectPascalParser::NEAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FAR() {
  return getToken(ObjectPascalParser::FAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FORWARD() {
  return getToken(ObjectPascalParser::FORWARD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::INLINE() {
  return getToken(ObjectPascalParser::INLINE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ASSEMBLER() {
  return getToken(ObjectPascalParser::ASSEMBLER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::MESSAGE() {
  return getToken(ObjectPascalParser::MESSAGE, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::DirectiveContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERRIDE() {
  return getToken(ObjectPascalParser::OVERRIDE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERLOAD() {
  return getToken(ObjectPascalParser::OVERLOAD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::PASCAL() {
  return getToken(ObjectPascalParser::PASCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REINTRODUCE() {
  return getToken(ObjectPascalParser::REINTRODUCE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::SAFECALL() {
  return getToken(ObjectPascalParser::SAFECALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::STDCALL() {
  return getToken(ObjectPascalParser::STDCALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VARARGS() {
  return getToken(ObjectPascalParser::VARARGS, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::LOCAL() {
  return getToken(ObjectPascalParser::LOCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ABSTRACT() {
  return getToken(ObjectPascalParser::ABSTRACT, 0);
}


size_t ObjectPascalParser::DirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDirective;
}


std::any ObjectPascalParser::DirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::directive() {
  DirectiveContext *_localctx = _tracker.createInstance<DirectiveContext>(_ctx, getState());
  enterRule(_localctx, 186, ObjectPascalParser::RuleDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1148);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CDECL: {
        enterOuterAlt(_localctx, 1);
        setState(1126);
        match(ObjectPascalParser::CDECL);
        break;
      }

      case ObjectPascalParser::REGISTER: {
        enterOuterAlt(_localctx, 2);
        setState(1127);
        match(ObjectPascalParser::REGISTER);
        break;
      }

      case ObjectPascalParser::DYNAMIC: {
        enterOuterAlt(_localctx, 3);
        setState(1128);
        match(ObjectPascalParser::DYNAMIC);
        break;
      }

      case ObjectPascalParser::VIRTUAL: {
        enterOuterAlt(_localctx, 4);
        setState(1129);
        match(ObjectPascalParser::VIRTUAL);
        break;
      }

      case ObjectPascalParser::EXPORT: {
        enterOuterAlt(_localctx, 5);
        setState(1130);
        match(ObjectPascalParser::EXPORT);
        break;
      }

      case ObjectPascalParser::EXTERNAL: {
        enterOuterAlt(_localctx, 6);
        setState(1131);
        externalDirective();
        break;
      }

      case ObjectPascalParser::NEAR: {
        enterOuterAlt(_localctx, 7);
        setState(1132);
        match(ObjectPascalParser::NEAR);
        break;
      }

      case ObjectPascalParser::FAR: {
        enterOuterAlt(_localctx, 8);
        setState(1133);
        match(ObjectPascalParser::FAR);
        break;
      }

      case ObjectPascalParser::FORWARD: {
        enterOuterAlt(_localctx, 9);
        setState(1134);
        match(ObjectPascalParser::FORWARD);
        break;
      }

      case ObjectPascalParser::INLINE: {
        enterOuterAlt(_localctx, 10);
        setState(1135);
        match(ObjectPascalParser::INLINE);
        break;
      }

      case ObjectPascalParser::ASSEMBLER: {
        enterOuterAlt(_localctx, 11);
        setState(1136);
        match(ObjectPascalParser::ASSEMBLER);
        break;
      }

      case ObjectPascalParser::MESSAGE: {
        enterOuterAlt(_localctx, 12);
        setState(1137);
        match(ObjectPascalParser::MESSAGE);
        setState(1138);
        constExpr();
        break;
      }

      case ObjectPascalParser::OVERRIDE: {
        enterOuterAlt(_localctx, 13);
        setState(1139);
        match(ObjectPascalParser::OVERRIDE);
        break;
      }

      case ObjectPascalParser::OVERLOAD: {
        enterOuterAlt(_localctx, 14);
        setState(1140);
        match(ObjectPascalParser::OVERLOAD);
        break;
      }

      case ObjectPascalParser::PASCAL: {
        enterOuterAlt(_localctx, 15);
        setState(1141);
        match(ObjectPascalParser::PASCAL);
        break;
      }

      case ObjectPascalParser::REINTRODUCE: {
        enterOuterAlt(_localctx, 16);
        setState(1142);
        match(ObjectPascalParser::REINTRODUCE);
        break;
      }

      case ObjectPascalParser::SAFECALL: {
        enterOuterAlt(_localctx, 17);
        setState(1143);
        match(ObjectPascalParser::SAFECALL);
        break;
      }

      case ObjectPascalParser::STDCALL: {
        enterOuterAlt(_localctx, 18);
        setState(1144);
        match(ObjectPascalParser::STDCALL);
        break;
      }

      case ObjectPascalParser::VARARGS: {
        enterOuterAlt(_localctx, 19);
        setState(1145);
        match(ObjectPascalParser::VARARGS);
        break;
      }

      case ObjectPascalParser::LOCAL: {
        enterOuterAlt(_localctx, 20);
        setState(1146);
        match(ObjectPascalParser::LOCAL);
        break;
      }

      case ObjectPascalParser::ABSTRACT: {
        enterOuterAlt(_localctx, 21);
        setState(1147);
        match(ObjectPascalParser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::ExternalDirectiveContext::ExternalDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::EXTERNAL() {
  return getToken(ObjectPascalParser::EXTERNAL, 0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ExternalDirectiveContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExternalDirectiveContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}


size_t ObjectPascalParser::ExternalDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExternalDirective;
}


std::any ObjectPascalParser::ExternalDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExternalDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::externalDirective() {
  ExternalDirectiveContext *_localctx = _tracker.createInstance<ExternalDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 188, ObjectPascalParser::RuleExternalDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1150);
    match(ObjectPascalParser::EXTERNAL);
    setState(1161);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::StringLiteral) {
      setState(1151);
      string();
      setState(1159);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::NAME) {
        setState(1152);
        match(ObjectPascalParser::NAME);
        setState(1156);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ObjectPascalParser::Ident) {
          setState(1153);
          match(ObjectPascalParser::Ident);
          setState(1158);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectTypeContext ------------------------------------------------------------------

ObjectPascalParser::ObjectTypeContext::ObjectTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::ObjectTypeContext::objHeritage() {
  return getRuleContext<ObjectPascalParser::ObjHeritageContext>(0);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ObjectTypeContext::objFieldList() {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(0);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ObjectTypeContext::methodList() {
  return getRuleContext<ObjectPascalParser::MethodListContext>(0);
}


size_t ObjectPascalParser::ObjectTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjectType;
}


std::any ObjectPascalParser::ObjectTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjectType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::objectType() {
  ObjectTypeContext *_localctx = _tracker.createInstance<ObjectTypeContext>(_ctx, getState());
  enterRule(_localctx, 190, ObjectPascalParser::RuleObjectType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1163);
    match(ObjectPascalParser::OBJECT);
    setState(1165);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1164);
      objHeritage();
    }
    setState(1168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(1167);
      objFieldList();
    }
    setState(1171);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      setState(1170);
      methodList();
      break;
    }

    default:
      break;
    }
    setState(1173);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ObjHeritageContext::ObjHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ObjHeritageContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ObjHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjHeritage;
}


std::any ObjectPascalParser::ObjHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::objHeritage() {
  ObjHeritageContext *_localctx = _tracker.createInstance<ObjHeritageContext>(_ctx, getState());
  enterRule(_localctx, 192, ObjectPascalParser::RuleObjHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1175);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1176);
    qualId();
    setState(1177);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodListContext ------------------------------------------------------------------

ObjectPascalParser::MethodListContext::MethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

std::vector<ObjectPascalParser::MethodHeadingContext *> ObjectPascalParser::MethodListContext::methodHeading() {
  return getRuleContexts<ObjectPascalParser::MethodHeadingContext>();
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::MethodListContext::methodHeading(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodHeadingContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::VIRTUAL() {
  return getTokens(ObjectPascalParser::VIRTUAL);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::VIRTUAL(size_t i) {
  return getToken(ObjectPascalParser::VIRTUAL, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::ABSTRACT() {
  return getTokens(ObjectPascalParser::ABSTRACT);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::ABSTRACT(size_t i) {
  return getToken(ObjectPascalParser::ABSTRACT, i);
}


size_t ObjectPascalParser::MethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodList;
}


std::any ObjectPascalParser::MethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::methodList() {
  MethodListContext *_localctx = _tracker.createInstance<MethodListContext>(_ctx, getState());
  enterRule(_localctx, 194, ObjectPascalParser::RuleMethodList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1192);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 16) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 16)) & ((1ULL << (ObjectPascalParser::CLASS - 16))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::FUNCTION_1 - 16))
      | (1ULL << (ObjectPascalParser::FUNCTION_2 - 16))
      | (1ULL << (ObjectPascalParser::PROCEDURE_1 - 16))
      | (1ULL << (ObjectPascalParser::PROCEDURE_2 - 16)))) != 0)) {
      setState(1179);
      methodHeading();
      setState(1186);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
      case 1: {
        setState(1180);
        match(ObjectPascalParser::SEMI);
        setState(1181);
        match(ObjectPascalParser::VIRTUAL);
        setState(1184);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
        case 1: {
          setState(1182);
          match(ObjectPascalParser::SEMI);
          setState(1183);
          match(ObjectPascalParser::ABSTRACT);
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      setState(1188);
      match(ObjectPascalParser::SEMI);
      setState(1194);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeadingContext ------------------------------------------------------------------

ObjectPascalParser::MethodHeadingContext::MethodHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::MethodHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::MethodHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::MethodHeadingContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::MethodHeadingContext::constructorHeading() {
  return getRuleContext<ObjectPascalParser::ConstructorHeadingContext>(0);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::MethodHeadingContext::destructorHeading() {
  return getRuleContext<ObjectPascalParser::DestructorHeadingContext>(0);
}


size_t ObjectPascalParser::MethodHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodHeading;
}


std::any ObjectPascalParser::MethodHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::methodHeading() {
  MethodHeadingContext *_localctx = _tracker.createInstance<MethodHeadingContext>(_ctx, getState());
  enterRule(_localctx, 196, ObjectPascalParser::RuleMethodHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1204);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CLASS:
      case ObjectPascalParser::FUNCTION_1:
      case ObjectPascalParser::FUNCTION_2:
      case ObjectPascalParser::PROCEDURE_1:
      case ObjectPascalParser::PROCEDURE_2: {
        enterOuterAlt(_localctx, 1);
        setState(1196);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::CLASS) {
          setState(1195);
          match(ObjectPascalParser::CLASS);
        }
        setState(1200);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::PROCEDURE_1:
          case ObjectPascalParser::PROCEDURE_2: {
            setState(1198);
            procedureHeading();
            break;
          }

          case ObjectPascalParser::FUNCTION_1:
          case ObjectPascalParser::FUNCTION_2: {
            setState(1199);
            functionHeading();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR: {
        enterOuterAlt(_localctx, 2);
        setState(1202);
        constructorHeading();
        break;
      }

      case ObjectPascalParser::DESTRUCTOR: {
        enterOuterAlt(_localctx, 3);
        setState(1203);
        destructorHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ConstructorHeadingContext::ConstructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::CONSTRUCTOR() {
  return getToken(ObjectPascalParser::CONSTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ConstructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ConstructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstructorHeading;
}


std::any ObjectPascalParser::ConstructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::constructorHeading() {
  ConstructorHeadingContext *_localctx = _tracker.createInstance<ConstructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 198, ObjectPascalParser::RuleConstructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1206);
    match(ObjectPascalParser::CONSTRUCTOR);
    setState(1207);
    match(ObjectPascalParser::Ident);
    setState(1209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1208);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::DestructorHeadingContext::DestructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::DESTRUCTOR() {
  return getToken(ObjectPascalParser::DESTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::DestructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::DestructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDestructorHeading;
}


std::any ObjectPascalParser::DestructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDestructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::destructorHeading() {
  DestructorHeadingContext *_localctx = _tracker.createInstance<DestructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 200, ObjectPascalParser::RuleDestructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    match(ObjectPascalParser::DESTRUCTOR);
    setState(1212);
    match(ObjectPascalParser::Ident);
    setState(1214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1213);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ObjFieldListContext::ObjFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ObjFieldListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ObjFieldListContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}


size_t ObjectPascalParser::ObjFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjFieldList;
}


std::any ObjectPascalParser::ObjFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::objFieldList() {
  ObjFieldListContext *_localctx = _tracker.createInstance<ObjFieldListContext>(_ctx, getState());
  enterRule(_localctx, 202, ObjectPascalParser::RuleObjFieldList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1216);
    identList();
    setState(1217);
    match(ObjectPascalParser::COLON);
    setState(1218);
    type();
    setState(1220);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitSectionContext ------------------------------------------------------------------

ObjectPascalParser::InitSectionContext::InitSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::INITIALIZATION() {
  return getToken(ObjectPascalParser::INITIALIZATION, 0);
}

std::vector<ObjectPascalParser::StmtListContext *> ObjectPascalParser::InitSectionContext::stmtList() {
  return getRuleContexts<ObjectPascalParser::StmtListContext>();
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::InitSectionContext::stmtList(size_t i) {
  return getRuleContext<ObjectPascalParser::StmtListContext>(i);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::FINALIZATION() {
  return getToken(ObjectPascalParser::FINALIZATION, 0);
}

ObjectPascalParser::BeginContext* ObjectPascalParser::InitSectionContext::begin() {
  return getRuleContext<ObjectPascalParser::BeginContext>(0);
}


size_t ObjectPascalParser::InitSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInitSection;
}


std::any ObjectPascalParser::InitSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInitSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::initSection() {
  InitSectionContext *_localctx = _tracker.createInstance<InitSectionContext>(_ctx, getState());
  enterRule(_localctx, 204, ObjectPascalParser::RuleInitSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1235);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INITIALIZATION: {
        enterOuterAlt(_localctx, 1);
        setState(1222);
        match(ObjectPascalParser::INITIALIZATION);
        setState(1223);
        stmtList();
        setState(1226);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::FINALIZATION) {
          setState(1224);
          match(ObjectPascalParser::FINALIZATION);
          setState(1225);
          stmtList();
        }
        setState(1228);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::BEGIN_1:
      case ObjectPascalParser::BEGIN_2: {
        enterOuterAlt(_localctx, 2);
        setState(1230);
        begin();
        setState(1231);
        stmtList();
        setState(1232);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::END: {
        enterOuterAlt(_localctx, 3);
        setState(1234);
        match(ObjectPascalParser::END);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::ClassTypeContext::classHeritage() {
  return getRuleContext<ObjectPascalParser::ClassHeritageContext>(0);
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassTypeContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::ClassTypeContext::classFieldList() {
  return getRuleContext<ObjectPascalParser::ClassFieldListContext>(0);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::ClassTypeContext::classMethodList() {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(0);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::ClassTypeContext::classPropertyList() {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(0);
}


size_t ObjectPascalParser::ClassTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassType;
}


std::any ObjectPascalParser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 206, ObjectPascalParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1237);
    match(ObjectPascalParser::CLASS);
    setState(1239);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1238);
      classHeritage();
    }
    setState(1242);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      setState(1241);
      classVisibility();
      break;
    }

    default:
      break;
    }
    setState(1245);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      setState(1244);
      classFieldList();
      break;
    }

    default:
      break;
    }
    setState(1248);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      setState(1247);
      classMethodList();
      break;
    }

    default:
      break;
    }
    setState(1251);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      setState(1250);
      classPropertyList();
      break;
    }

    default:
      break;
    }
    setState(1253);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ClassHeritageContext::ClassHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ClassHeritageContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ClassHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassHeritage;
}


std::any ObjectPascalParser::ClassHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::classHeritage() {
  ClassHeritageContext *_localctx = _tracker.createInstance<ClassHeritageContext>(_ctx, getState());
  enterRule(_localctx, 208, ObjectPascalParser::RuleClassHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1255);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1256);
    identList();
    setState(1257);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVisibilityContext ------------------------------------------------------------------

ObjectPascalParser::ClassVisibilityContext::ClassVisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLIC() {
  return getToken(ObjectPascalParser::PUBLIC, 0);
}

ObjectPascalParser::ProtectedContext* ObjectPascalParser::ClassVisibilityContext::protected_() {
  return getRuleContext<ObjectPascalParser::ProtectedContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PRIVATE() {
  return getToken(ObjectPascalParser::PRIVATE, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLISHED() {
  return getToken(ObjectPascalParser::PUBLISHED, 0);
}


size_t ObjectPascalParser::ClassVisibilityContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassVisibility;
}


std::any ObjectPascalParser::ClassVisibilityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassVisibility(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::classVisibility() {
  ClassVisibilityContext *_localctx = _tracker.createInstance<ClassVisibilityContext>(_ctx, getState());
  enterRule(_localctx, 210, ObjectPascalParser::RuleClassVisibility);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1263);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      setState(1259);
      match(ObjectPascalParser::PUBLIC);
      break;
    }

    case 2: {
      setState(1260);
      protected_();
      break;
    }

    case 3: {
      setState(1261);
      match(ObjectPascalParser::PRIVATE);
      break;
    }

    case 4: {
      setState(1262);
      match(ObjectPascalParser::PUBLISHED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ClassFieldListContext::ClassFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ClassVisibilityContext *> ObjectPascalParser::ClassFieldListContext::classVisibility() {
  return getRuleContexts<ObjectPascalParser::ClassVisibilityContext>();
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassFieldListContext::classVisibility(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(i);
}

std::vector<ObjectPascalParser::ObjFieldListContext *> ObjectPascalParser::ClassFieldListContext::objFieldList() {
  return getRuleContexts<ObjectPascalParser::ObjFieldListContext>();
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ClassFieldListContext::objFieldList(size_t i) {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ClassFieldListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ClassFieldListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ClassFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassFieldList;
}


std::any ObjectPascalParser::ClassFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::classFieldList() {
  ClassFieldListContext *_localctx = _tracker.createInstance<ClassFieldListContext>(_ctx, getState());
  enterRule(_localctx, 212, ObjectPascalParser::RuleClassFieldList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1271);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1265);
        classVisibility();
        setState(1266);
        objFieldList();
        setState(1267);
        match(ObjectPascalParser::SEMI); 
      }
      setState(1273);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 142, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMethodListContext ------------------------------------------------------------------

ObjectPascalParser::ClassMethodListContext::ClassMethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ClassVisibilityContext *> ObjectPascalParser::ClassMethodListContext::classVisibility() {
  return getRuleContexts<ObjectPascalParser::ClassVisibilityContext>();
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassMethodListContext::classVisibility(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(i);
}

std::vector<ObjectPascalParser::MethodListContext *> ObjectPascalParser::ClassMethodListContext::methodList() {
  return getRuleContexts<ObjectPascalParser::MethodListContext>();
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ClassMethodListContext::methodList(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ClassMethodListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ClassMethodListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ClassMethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassMethodList;
}


std::any ObjectPascalParser::ClassMethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::classMethodList() {
  ClassMethodListContext *_localctx = _tracker.createInstance<ClassMethodListContext>(_ctx, getState());
  enterRule(_localctx, 214, ObjectPascalParser::RuleClassMethodList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1280);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1274);
        classVisibility();
        setState(1275);
        methodList();
        setState(1276);
        match(ObjectPascalParser::SEMI); 
      }
      setState(1282);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassPropertyListContext ------------------------------------------------------------------

ObjectPascalParser::ClassPropertyListContext::ClassPropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ClassVisibilityContext *> ObjectPascalParser::ClassPropertyListContext::classVisibility() {
  return getRuleContexts<ObjectPascalParser::ClassVisibilityContext>();
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassPropertyListContext::classVisibility(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(i);
}

std::vector<ObjectPascalParser::PropertyListContext *> ObjectPascalParser::ClassPropertyListContext::propertyList() {
  return getRuleContexts<ObjectPascalParser::PropertyListContext>();
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::ClassPropertyListContext::propertyList(size_t i) {
  return getRuleContext<ObjectPascalParser::PropertyListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ClassPropertyListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ClassPropertyListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ClassPropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassPropertyList;
}


std::any ObjectPascalParser::ClassPropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::classPropertyList() {
  ClassPropertyListContext *_localctx = _tracker.createInstance<ClassPropertyListContext>(_ctx, getState());
  enterRule(_localctx, 216, ObjectPascalParser::RuleClassPropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1289);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED_1)
      | (1ULL << ObjectPascalParser::PROTECTED_2)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED)
      | (1ULL << ObjectPascalParser::PROPERTY_1))) != 0)) {
      setState(1283);
      classVisibility();
      setState(1284);
      propertyList();
      setState(1285);
      match(ObjectPascalParser::SEMI);
      setState(1291);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyListContext::PropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::PROPERTY_1() {
  return getToken(ObjectPascalParser::PROPERTY_1, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::PropertyListContext::propertyInterface() {
  return getRuleContext<ObjectPascalParser::PropertyInterfaceContext>(0);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::PropertyListContext::propertySpecifiers() {
  return getRuleContext<ObjectPascalParser::PropertySpecifiersContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PropertyListContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyList;
}


std::any ObjectPascalParser::PropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::propertyList() {
  PropertyListContext *_localctx = _tracker.createInstance<PropertyListContext>(_ctx, getState());
  enterRule(_localctx, 218, ObjectPascalParser::RulePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    match(ObjectPascalParser::PROPERTY_1);
    setState(1293);
    match(ObjectPascalParser::Ident);
    setState(1295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET

    || _la == ObjectPascalParser::COLON) {
      setState(1294);
      propertyInterface();
    }
    setState(1298);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      setState(1297);
      propertySpecifiers();
      break;
    }

    default:
      break;
    }
    setState(1301);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1300);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyInterfaceContext ------------------------------------------------------------------

ObjectPascalParser::PropertyInterfaceContext::PropertyInterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::PropertyInterfaceContext::propertyParameterList() {
  return getRuleContext<ObjectPascalParser::PropertyParameterListContext>(0);
}


size_t ObjectPascalParser::PropertyInterfaceContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyInterface;
}


std::any ObjectPascalParser::PropertyInterfaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyInterface(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::propertyInterface() {
  PropertyInterfaceContext *_localctx = _tracker.createInstance<PropertyInterfaceContext>(_ctx, getState());
  enterRule(_localctx, 220, ObjectPascalParser::RulePropertyInterface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(1303);
      propertyParameterList();
    }
    setState(1306);
    match(ObjectPascalParser::COLON);
    setState(1307);
    match(ObjectPascalParser::Ident);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyParameterListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyParameterListContext::PropertyParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::PropertyParameterListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertyParameterListContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::PropertyParameterListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::PropertyParameterListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyParameterList;
}


std::any ObjectPascalParser::PropertyParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyParameterList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::propertyParameterList() {
  PropertyParameterListContext *_localctx = _tracker.createInstance<PropertyParameterListContext>(_ctx, getState());
  enterRule(_localctx, 222, ObjectPascalParser::RulePropertyParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    match(ObjectPascalParser::LEFT_BRACKET);

    setState(1310);
    identList();
    setState(1311);
    match(ObjectPascalParser::COLON);
    setState(1312);
    typeId();
    setState(1317);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(1314);
      match(ObjectPascalParser::SEMI);
      setState(1319);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1320);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySpecifiersContext ------------------------------------------------------------------

ObjectPascalParser::PropertySpecifiersContext::PropertySpecifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::PropertySpecifiersContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::PropertySpecifiersContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::READ() {
  return getToken(ObjectPascalParser::READ, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::PropertySpecifiersContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::WRITE() {
  return getToken(ObjectPascalParser::WRITE, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::STORED() {
  return getToken(ObjectPascalParser::STORED, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::NODEFAULT() {
  return getToken(ObjectPascalParser::NODEFAULT, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::IMPLEMENTS() {
  return getToken(ObjectPascalParser::IMPLEMENTS, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertySpecifiersContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::DEFAULT() {
  return getToken(ObjectPascalParser::DEFAULT, 0);
}


size_t ObjectPascalParser::PropertySpecifiersContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertySpecifiers;
}


std::any ObjectPascalParser::PropertySpecifiersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertySpecifiers(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::propertySpecifiers() {
  PropertySpecifiersContext *_localctx = _tracker.createInstance<PropertySpecifiersContext>(_ctx, getState());
  enterRule(_localctx, 224, ObjectPascalParser::RulePropertySpecifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1324);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::INDEX) {
      setState(1322);
      match(ObjectPascalParser::INDEX);
      setState(1323);
      constExpr();
    }
    setState(1328);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::READ) {
      setState(1326);
      match(ObjectPascalParser::READ);
      setState(1327);
      match(ObjectPascalParser::Ident);
    }
    setState(1332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::WRITE) {
      setState(1330);
      match(ObjectPascalParser::WRITE);
      setState(1331);
      match(ObjectPascalParser::Ident);
    }
    setState(1339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::STORED) {
      setState(1334);
      match(ObjectPascalParser::STORED);
      setState(1337);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectPascalParser::Ident: {
          setState(1335);
          match(ObjectPascalParser::Ident);
          break;
        }

        case ObjectPascalParser::LIBRARY:
        case ObjectPascalParser::DEFAULT:
        case ObjectPascalParser::NODEFAULT:
        case ObjectPascalParser::IMPLEMENTS:
        case ObjectPascalParser::SEMI:
        case ObjectPascalParser::CARET:
        case ObjectPascalParser::PLUS:
        case ObjectPascalParser::MINUS:
        case ObjectPascalParser::STAR:
        case ObjectPascalParser::SHARP:
        case ObjectPascalParser::PLATFORM:
        case ObjectPascalParser::DEPRECATED:
        case ObjectPascalParser::StringLiteral:
        case ObjectPascalParser::HEXADECIMALDIGIT:
        case ObjectPascalParser::OCTALDIGIT:
        case ObjectPascalParser::DIGIT: {
          setState(1336);
          constExpr();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
    }
    setState(1344);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::DEFAULT: {
        setState(1341);
        match(ObjectPascalParser::DEFAULT);
        setState(1342);
        constExpr();
        break;
      }

      case ObjectPascalParser::NODEFAULT: {
        setState(1343);
        match(ObjectPascalParser::NODEFAULT);
        break;
      }

      case ObjectPascalParser::LIBRARY:
      case ObjectPascalParser::IMPLEMENTS:
      case ObjectPascalParser::SEMI:
      case ObjectPascalParser::PLATFORM:
      case ObjectPascalParser::DEPRECATED: {
        break;
      }

    default:
      break;
    }
    setState(1348);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::IMPLEMENTS) {
      setState(1346);
      match(ObjectPascalParser::IMPLEMENTS);
      setState(1347);
      typeId();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::InterfaceTypeContext::interfaceHeritage() {
  return getRuleContext<ObjectPascalParser::InterfaceHeritageContext>(0);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::InterfaceTypeContext::classMethodList() {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(0);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::InterfaceTypeContext::classPropertyList() {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(0);
}


size_t ObjectPascalParser::InterfaceTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceType;
}


std::any ObjectPascalParser::InterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 226, ObjectPascalParser::RuleInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1350);
    match(ObjectPascalParser::INTERFACE);
    setState(1352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1351);
      interfaceHeritage();
    }
    setState(1355);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
    case 1: {
      setState(1354);
      classMethodList();
      break;
    }

    default:
      break;
    }
    setState(1358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      setState(1357);
      classPropertyList();
      break;
    }

    default:
      break;
    }
    setState(1360);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceHeritageContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceHeritageContext::InterfaceHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::InterfaceHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceHeritage;
}


std::any ObjectPascalParser::InterfaceHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::interfaceHeritage() {
  InterfaceHeritageContext *_localctx = _tracker.createInstance<InterfaceHeritageContext>(_ctx, getState());
  enterRule(_localctx, 228, ObjectPascalParser::RuleInterfaceHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1362);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1363);
    match(ObjectPascalParser::Ident);
    setState(1364);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresClauseContext ------------------------------------------------------------------

ObjectPascalParser::RequiresClauseContext::RequiresClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::REQUIRES() {
  return getToken(ObjectPascalParser::REQUIRES, 0);
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::RequiresClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::RequiresClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::RequiresClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRequiresClause;
}


std::any ObjectPascalParser::RequiresClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRequiresClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::requiresClause() {
  RequiresClauseContext *_localctx = _tracker.createInstance<RequiresClauseContext>(_ctx, getState());
  enterRule(_localctx, 230, ObjectPascalParser::RuleRequiresClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1366);
    match(ObjectPascalParser::REQUIRES);
    setState(1368); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1367);
      identList();
      setState(1370); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
    setState(1372);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContainsClauseContext ------------------------------------------------------------------

ObjectPascalParser::ContainsClauseContext::ContainsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::CONTAINS() {
  return getToken(ObjectPascalParser::CONTAINS, 0);
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::ContainsClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ContainsClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::ContainsClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleContainsClause;
}


std::any ObjectPascalParser::ContainsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitContainsClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::containsClause() {
  ContainsClauseContext *_localctx = _tracker.createInstance<ContainsClauseContext>(_ctx, getState());
  enterRule(_localctx, 232, ObjectPascalParser::RuleContainsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1374);
    match(ObjectPascalParser::CONTAINS);
    setState(1376); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1375);
      identList();
      setState(1378); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Ident);
    setState(1380);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentListContext ------------------------------------------------------------------

ObjectPascalParser::IdentListContext::IdentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::IdentListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIdentList;
}


std::any ObjectPascalParser::IdentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIdentList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::identList() {
  IdentListContext *_localctx = _tracker.createInstance<IdentListContext>(_ctx, getState());
  enterRule(_localctx, 234, ObjectPascalParser::RuleIdentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1382);
    match(ObjectPascalParser::Ident);
    setState(1385); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1383);
      match(ObjectPascalParser::COMMA);
      setState(1384);
      match(ObjectPascalParser::Ident);
      setState(1387); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdListContext ------------------------------------------------------------------

ObjectPascalParser::QualIdListContext::QualIdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::QualIdContext *> ObjectPascalParser::QualIdListContext::qualId() {
  return getRuleContexts<ObjectPascalParser::QualIdContext>();
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::QualIdListContext::qualId(size_t i) {
  return getRuleContext<ObjectPascalParser::QualIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::QualIdListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::QualIdListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualIdList;
}


std::any ObjectPascalParser::QualIdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualIdList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::qualIdList() {
  QualIdListContext *_localctx = _tracker.createInstance<QualIdListContext>(_ctx, getState());
  enterRule(_localctx, 236, ObjectPascalParser::RuleQualIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1389);
    qualId();
    setState(1392); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1390);
      match(ObjectPascalParser::COMMA);
      setState(1391);
      qualId();
      setState(1394); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdContext ------------------------------------------------------------------

ObjectPascalParser::QualIdContext::QualIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::QualIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::QualIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualId;
}


std::any ObjectPascalParser::QualIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::qualId() {
  QualIdContext *_localctx = _tracker.createInstance<QualIdContext>(_ctx, getState());
  enterRule(_localctx, 238, ObjectPascalParser::RuleQualId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1396);
    unitId();
    setState(1404);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1397);
      match(ObjectPascalParser::DOT);
      setState(1398);
      match(ObjectPascalParser::Ident);
      setState(1400); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1399);
                match(ObjectPascalParser::CARET);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1402); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdContext ------------------------------------------------------------------

ObjectPascalParser::TypeIdContext::TypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::PredefinedTypeContext* ObjectPascalParser::TypeIdContext::predefinedType() {
  return getRuleContext<ObjectPascalParser::PredefinedTypeContext>(0);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::TypeIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::TypeIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeId;
}


std::any ObjectPascalParser::TypeIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::typeId() {
  TypeIdContext *_localctx = _tracker.createInstance<TypeIdContext>(_ctx, getState());
  enterRule(_localctx, 240, ObjectPascalParser::RuleTypeId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Ident) {
      setState(1406);
      unitId();
      setState(1407);
      match(ObjectPascalParser::DOT);
    }
    setState(1411);
    predefinedType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedTypeContext ------------------------------------------------------------------

ObjectPascalParser::PredefinedTypeContext::PredefinedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::PredefinedTypeContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}


size_t ObjectPascalParser::PredefinedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePredefinedType;
}


std::any ObjectPascalParser::PredefinedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPredefinedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PredefinedTypeContext* ObjectPascalParser::predefinedType() {
  PredefinedTypeContext *_localctx = _tracker.createInstance<PredefinedTypeContext>(_ctx, getState());
  enterRule(_localctx, 242, ObjectPascalParser::RulePredefinedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1413);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharExprContext ------------------------------------------------------------------

ObjectPascalParser::CharExprContext::CharExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::CARET() {
  return getToken(ObjectPascalParser::CARET, 0);
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::UPPERCASE() {
  return getToken(ObjectPascalParser::UPPERCASE, 0);
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::LOWERCASE() {
  return getToken(ObjectPascalParser::LOWERCASE, 0);
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::SHARP() {
  return getToken(ObjectPascalParser::SHARP, 0);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::CharExprContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::CharExprContext::radixNumber() {
  return getRuleContext<ObjectPascalParser::RadixNumberContext>(0);
}


size_t ObjectPascalParser::CharExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCharExpr;
}


std::any ObjectPascalParser::CharExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCharExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::charExpr() {
  CharExprContext *_localctx = _tracker.createInstance<CharExprContext>(_ctx, getState());
  enterRule(_localctx, 244, ObjectPascalParser::RuleCharExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1422);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CARET: {
        enterOuterAlt(_localctx, 1);
        setState(1415);
        match(ObjectPascalParser::CARET);
        setState(1416);
        _la = _input->LA(1);
        if (!(_la == ObjectPascalParser::UPPERCASE

        || _la == ObjectPascalParser::LOWERCASE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case ObjectPascalParser::SHARP: {
        enterOuterAlt(_localctx, 2);
        setState(1417);
        match(ObjectPascalParser::SHARP);
        setState(1420);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
        case 1: {
          setState(1418);
          integer();
          break;
        }

        case 2: {
          setState(1419);
          radixNumber();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstExprContext ------------------------------------------------------------------

ObjectPascalParser::ConstExprContext::ConstExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::NumberContext* ObjectPascalParser::ConstExprContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ConstExprContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::ConstExprContext::charExpr() {
  return getRuleContext<ObjectPascalParser::CharExprContext>(0);
}

std::vector<ObjectPascalParser::IntegerContext *> ObjectPascalParser::ConstExprContext::integer() {
  return getRuleContexts<ObjectPascalParser::IntegerContext>();
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::ConstExprContext::integer(size_t i) {
  return getRuleContext<ObjectPascalParser::IntegerContext>(i);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::ConstExprContext::additiveOp() {
  return getRuleContext<ObjectPascalParser::AdditiveOpContext>(0);
}


size_t ObjectPascalParser::ConstExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstExpr;
}


std::any ObjectPascalParser::ConstExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::constExpr() {
  ConstExprContext *_localctx = _tracker.createInstance<ConstExprContext>(_ctx, getState());
  enterRule(_localctx, 246, ObjectPascalParser::RuleConstExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1431);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1424);
      number();
      break;
    }

    case 2: {
      setState(1425);
      string();
      break;
    }

    case 3: {
      setState(1426);
      charExpr();
      break;
    }

    case 4: {
      setState(1427);
      integer();
      setState(1428);
      additiveOp();
      setState(1429);
      integer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitIdContext ------------------------------------------------------------------

ObjectPascalParser::UnitIdContext::UnitIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::UnitIdContext::Ident() {
  return getTokens(ObjectPascalParser::Ident);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::Ident(size_t i) {
  return getToken(ObjectPascalParser::Ident, i);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::UnitIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnitId;
}


std::any ObjectPascalParser::UnitIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnitId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::unitId() {
  UnitIdContext *_localctx = _tracker.createInstance<UnitIdContext>(_ctx, getState());
  enterRule(_localctx, 248, ObjectPascalParser::RuleUnitId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1437);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1433);
      match(ObjectPascalParser::Ident);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1434);
      match(ObjectPascalParser::Ident);
      setState(1435);
      match(ObjectPascalParser::DOT);
      setState(1436);
      match(ObjectPascalParser::Ident);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelIdContext ------------------------------------------------------------------

ObjectPascalParser::LabelIdContext::LabelIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelIdContext::Ident() {
  return getToken(ObjectPascalParser::Ident, 0);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::LabelIdContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}


size_t ObjectPascalParser::LabelIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelId;
}


std::any ObjectPascalParser::LabelIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::labelId() {
  LabelIdContext *_localctx = _tracker.createInstance<LabelIdContext>(_ctx, getState());
  enterRule(_localctx, 250, ObjectPascalParser::RuleLabelId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1439);
      match(ObjectPascalParser::Ident);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1440);
      integer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

ObjectPascalParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringContext::StringLiteral() {
  return getToken(ObjectPascalParser::StringLiteral, 0);
}


size_t ObjectPascalParser::StringContext::getRuleIndex() const {
  return ObjectPascalParser::RuleString;
}


std::any ObjectPascalParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringContext* ObjectPascalParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 252, ObjectPascalParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1443);
    match(ObjectPascalParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

ObjectPascalParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::SignedIntegerContext *> ObjectPascalParser::NumberContext::signedInteger() {
  return getRuleContexts<ObjectPascalParser::SignedIntegerContext>();
}

ObjectPascalParser::SignedIntegerContext* ObjectPascalParser::NumberContext::signedInteger(size_t i) {
  return getRuleContext<ObjectPascalParser::SignedIntegerContext>(i);
}

tree::TerminalNode* ObjectPascalParser::NumberContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::NumberContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}

tree::TerminalNode* ObjectPascalParser::NumberContext::E() {
  return getToken(ObjectPascalParser::E, 0);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::NumberContext::radixNumber() {
  return getRuleContext<ObjectPascalParser::RadixNumberContext>(0);
}


size_t ObjectPascalParser::NumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleNumber;
}


std::any ObjectPascalParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 254, ObjectPascalParser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1455);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1445);
      signedInteger();
      setState(1452);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::DOT) {
        setState(1446);
        match(ObjectPascalParser::DOT);
        setState(1447);
        integer();
        setState(1450);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::E) {
          setState(1448);
          match(ObjectPascalParser::E);
          setState(1449);
          signedInteger();
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1454);
      radixNumber();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RadixNumberContext ------------------------------------------------------------------

ObjectPascalParser::RadixNumberContext::RadixNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::HexNumberContext* ObjectPascalParser::RadixNumberContext::hexNumber() {
  return getRuleContext<ObjectPascalParser::HexNumberContext>(0);
}

ObjectPascalParser::OctalNumberContext* ObjectPascalParser::RadixNumberContext::octalNumber() {
  return getRuleContext<ObjectPascalParser::OctalNumberContext>(0);
}


size_t ObjectPascalParser::RadixNumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRadixNumber;
}


std::any ObjectPascalParser::RadixNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRadixNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::radixNumber() {
  RadixNumberContext *_localctx = _tracker.createInstance<RadixNumberContext>(_ctx, getState());
  enterRule(_localctx, 256, ObjectPascalParser::RuleRadixNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1459);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1457);
      hexNumber();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1458);
      octalNumber();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HexNumberContext ------------------------------------------------------------------

ObjectPascalParser::HexNumberContext::HexNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::HexNumberContext::HEXADECIMALDIGIT() {
  return getTokens(ObjectPascalParser::HEXADECIMALDIGIT);
}

tree::TerminalNode* ObjectPascalParser::HexNumberContext::HEXADECIMALDIGIT(size_t i) {
  return getToken(ObjectPascalParser::HEXADECIMALDIGIT, i);
}


size_t ObjectPascalParser::HexNumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleHexNumber;
}


std::any ObjectPascalParser::HexNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitHexNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::HexNumberContext* ObjectPascalParser::hexNumber() {
  HexNumberContext *_localctx = _tracker.createInstance<HexNumberContext>(_ctx, getState());
  enterRule(_localctx, 258, ObjectPascalParser::RuleHexNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1464);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1461);
        match(ObjectPascalParser::HEXADECIMALDIGIT); 
      }
      setState(1466);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OctalNumberContext ------------------------------------------------------------------

ObjectPascalParser::OctalNumberContext::OctalNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::OctalNumberContext::OCTALDIGIT() {
  return getTokens(ObjectPascalParser::OCTALDIGIT);
}

tree::TerminalNode* ObjectPascalParser::OctalNumberContext::OCTALDIGIT(size_t i) {
  return getToken(ObjectPascalParser::OCTALDIGIT, i);
}


size_t ObjectPascalParser::OctalNumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOctalNumber;
}


std::any ObjectPascalParser::OctalNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOctalNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OctalNumberContext* ObjectPascalParser::octalNumber() {
  OctalNumberContext *_localctx = _tracker.createInstance<OctalNumberContext>(_ctx, getState());
  enterRule(_localctx, 260, ObjectPascalParser::RuleOctalNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1470);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1467);
        match(ObjectPascalParser::OCTALDIGIT); 
      }
      setState(1472);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerContext ------------------------------------------------------------------

ObjectPascalParser::IntegerContext::IntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IntegerContext::DIGIT() {
  return getTokens(ObjectPascalParser::DIGIT);
}

tree::TerminalNode* ObjectPascalParser::IntegerContext::DIGIT(size_t i) {
  return getToken(ObjectPascalParser::DIGIT, i);
}

ObjectPascalParser::RadixNumberContext* ObjectPascalParser::IntegerContext::radixNumber() {
  return getRuleContext<ObjectPascalParser::RadixNumberContext>(0);
}


size_t ObjectPascalParser::IntegerContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInteger;
}


std::any ObjectPascalParser::IntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInteger(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::integer() {
  IntegerContext *_localctx = _tracker.createInstance<IntegerContext>(_ctx, getState());
  enterRule(_localctx, 262, ObjectPascalParser::RuleInteger);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1480);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1476);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1473);
          match(ObjectPascalParser::DIGIT); 
        }
        setState(1478);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1479);
      radixNumber();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignedIntegerContext ------------------------------------------------------------------

ObjectPascalParser::SignedIntegerContext::SignedIntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IntegerContext* ObjectPascalParser::SignedIntegerContext::integer() {
  return getRuleContext<ObjectPascalParser::IntegerContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SignedIntegerContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SignedIntegerContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSignedInteger;
}


std::any ObjectPascalParser::SignedIntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSignedInteger(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SignedIntegerContext* ObjectPascalParser::signedInteger() {
  SignedIntegerContext *_localctx = _tracker.createInstance<SignedIntegerContext>(_ctx, getState());
  enterRule(_localctx, 264, ObjectPascalParser::RuleSignedInteger);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1482);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::PLUS

    || _la == ObjectPascalParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1483);
    integer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayContext ------------------------------------------------------------------

ObjectPascalParser::ArrayContext::ArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayContext::ARRAY_1() {
  return getToken(ObjectPascalParser::ARRAY_1, 0);
}

tree::TerminalNode* ObjectPascalParser::ArrayContext::ARRAY_2() {
  return getToken(ObjectPascalParser::ARRAY_2, 0);
}


size_t ObjectPascalParser::ArrayContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArray;
}


std::any ObjectPascalParser::ArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArray(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayContext* ObjectPascalParser::array() {
  ArrayContext *_localctx = _tracker.createInstance<ArrayContext>(_ctx, getState());
  enterRule(_localctx, 266, ObjectPascalParser::RuleArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1485);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::ARRAY_1

    || _la == ObjectPascalParser::ARRAY_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarContext ------------------------------------------------------------------

ObjectPascalParser::VarContext::VarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VarContext::VAR_1() {
  return getToken(ObjectPascalParser::VAR_1, 0);
}

tree::TerminalNode* ObjectPascalParser::VarContext::VAR_2() {
  return getToken(ObjectPascalParser::VAR_2, 0);
}


size_t ObjectPascalParser::VarContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVar;
}


std::any ObjectPascalParser::VarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVar(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarContext* ObjectPascalParser::var() {
  VarContext *_localctx = _tracker.createInstance<VarContext>(_ctx, getState());
  enterRule(_localctx, 268, ObjectPascalParser::RuleVar);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1487);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::VAR_1

    || _la == ObjectPascalParser::VAR_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotContext ------------------------------------------------------------------

ObjectPascalParser::NotContext::NotContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::NotContext::NOT_1() {
  return getToken(ObjectPascalParser::NOT_1, 0);
}

tree::TerminalNode* ObjectPascalParser::NotContext::NOT_2() {
  return getToken(ObjectPascalParser::NOT_2, 0);
}

tree::TerminalNode* ObjectPascalParser::NotContext::NOT_3() {
  return getToken(ObjectPascalParser::NOT_3, 0);
}


size_t ObjectPascalParser::NotContext::getRuleIndex() const {
  return ObjectPascalParser::RuleNot;
}


std::any ObjectPascalParser::NotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitNot(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::NotContext* ObjectPascalParser::not_() {
  NotContext *_localctx = _tracker.createInstance<NotContext>(_ctx, getState());
  enterRule(_localctx, 270, ObjectPascalParser::RuleNot);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1489);
    _la = _input->LA(1);
    if (!(((((_la - 112) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 112)) & ((1ULL << (ObjectPascalParser::NOT_1 - 112))
      | (1ULL << (ObjectPascalParser::NOT_2 - 112))
      | (1ULL << (ObjectPascalParser::NOT_3 - 112)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DivContext ------------------------------------------------------------------

ObjectPascalParser::DivContext::DivContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DivContext::DIV_BIG() {
  return getToken(ObjectPascalParser::DIV_BIG, 0);
}

tree::TerminalNode* ObjectPascalParser::DivContext::DIV_LITTLE() {
  return getToken(ObjectPascalParser::DIV_LITTLE, 0);
}


size_t ObjectPascalParser::DivContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDiv;
}


std::any ObjectPascalParser::DivContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDiv(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DivContext* ObjectPascalParser::div() {
  DivContext *_localctx = _tracker.createInstance<DivContext>(_ctx, getState());
  enterRule(_localctx, 272, ObjectPascalParser::RuleDiv);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1491);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::DIV_LITTLE

    || _la == ObjectPascalParser::DIV_BIG)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndContext ------------------------------------------------------------------

ObjectPascalParser::AndContext::AndContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AndContext::AND_BIG() {
  return getToken(ObjectPascalParser::AND_BIG, 0);
}

tree::TerminalNode* ObjectPascalParser::AndContext::AND_LITTLE() {
  return getToken(ObjectPascalParser::AND_LITTLE, 0);
}


size_t ObjectPascalParser::AndContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAnd;
}


std::any ObjectPascalParser::AndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAnd(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AndContext* ObjectPascalParser::and_() {
  AndContext *_localctx = _tracker.createInstance<AndContext>(_ctx, getState());
  enterRule(_localctx, 274, ObjectPascalParser::RuleAnd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1493);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::AND_LITTLE

    || _la == ObjectPascalParser::AND_BIG)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsContext ------------------------------------------------------------------

ObjectPascalParser::AsContext::AsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AsContext::AS_1() {
  return getToken(ObjectPascalParser::AS_1, 0);
}

tree::TerminalNode* ObjectPascalParser::AsContext::AS_2() {
  return getToken(ObjectPascalParser::AS_2, 0);
}


size_t ObjectPascalParser::AsContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAs;
}


std::any ObjectPascalParser::AsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAs(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AsContext* ObjectPascalParser::as() {
  AsContext *_localctx = _tracker.createInstance<AsContext>(_ctx, getState());
  enterRule(_localctx, 276, ObjectPascalParser::RuleAs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1495);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::AS_1

    || _la == ObjectPascalParser::AS_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

ObjectPascalParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::IfContext::IF_1() {
  return getToken(ObjectPascalParser::IF_1, 0);
}

tree::TerminalNode* ObjectPascalParser::IfContext::IF_2() {
  return getToken(ObjectPascalParser::IF_2, 0);
}


size_t ObjectPascalParser::IfContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIf;
}


std::any ObjectPascalParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IfContext* ObjectPascalParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 278, ObjectPascalParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1497);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::IF_1

    || _la == ObjectPascalParser::IF_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DoContext ------------------------------------------------------------------

ObjectPascalParser::DoContext::DoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DoContext::DO_1() {
  return getToken(ObjectPascalParser::DO_1, 0);
}

tree::TerminalNode* ObjectPascalParser::DoContext::DO_2() {
  return getToken(ObjectPascalParser::DO_2, 0);
}

tree::TerminalNode* ObjectPascalParser::DoContext::DO_3() {
  return getToken(ObjectPascalParser::DO_3, 0);
}


size_t ObjectPascalParser::DoContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDo;
}


std::any ObjectPascalParser::DoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDo(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DoContext* ObjectPascalParser::do_() {
  DoContext *_localctx = _tracker.createInstance<DoContext>(_ctx, getState());
  enterRule(_localctx, 280, ObjectPascalParser::RuleDo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1499);
    _la = _input->LA(1);
    if (!(((((_la - 90) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 90)) & ((1ULL << (ObjectPascalParser::DO_1 - 90))
      | (1ULL << (ObjectPascalParser::DO_2 - 90))
      | (1ULL << (ObjectPascalParser::DO_3 - 90)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForContext ------------------------------------------------------------------

ObjectPascalParser::ForContext::ForContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ForContext::FOR_1() {
  return getToken(ObjectPascalParser::FOR_1, 0);
}

tree::TerminalNode* ObjectPascalParser::ForContext::FOR_2() {
  return getToken(ObjectPascalParser::FOR_2, 0);
}


size_t ObjectPascalParser::ForContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFor;
}


std::any ObjectPascalParser::ForContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ForContext* ObjectPascalParser::for_() {
  ForContext *_localctx = _tracker.createInstance<ForContext>(_ctx, getState());
  enterRule(_localctx, 282, ObjectPascalParser::RuleFor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1501);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::FOR_1

    || _la == ObjectPascalParser::FOR_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptContext ------------------------------------------------------------------

ObjectPascalParser::ExceptContext::ExceptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExceptContext::EXCEPT_1() {
  return getToken(ObjectPascalParser::EXCEPT_1, 0);
}

tree::TerminalNode* ObjectPascalParser::ExceptContext::EXCEPT_2() {
  return getToken(ObjectPascalParser::EXCEPT_2, 0);
}


size_t ObjectPascalParser::ExceptContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExcept;
}


std::any ObjectPascalParser::ExceptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExcept(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExceptContext* ObjectPascalParser::except() {
  ExceptContext *_localctx = _tracker.createInstance<ExceptContext>(_ctx, getState());
  enterRule(_localctx, 284, ObjectPascalParser::RuleExcept);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1503);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::EXCEPT_1

    || _la == ObjectPascalParser::EXCEPT_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionContext ------------------------------------------------------------------

ObjectPascalParser::FunctionContext::FunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FunctionContext::FUNCTION_1() {
  return getToken(ObjectPascalParser::FUNCTION_1, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionContext::FUNCTION_2() {
  return getToken(ObjectPascalParser::FUNCTION_2, 0);
}


size_t ObjectPascalParser::FunctionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunction;
}


std::any ObjectPascalParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionContext* ObjectPascalParser::function() {
  FunctionContext *_localctx = _tracker.createInstance<FunctionContext>(_ctx, getState());
  enterRule(_localctx, 286, ObjectPascalParser::RuleFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1505);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::FUNCTION_1

    || _la == ObjectPascalParser::FUNCTION_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureContext::ProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProcedureContext::PROCEDURE_1() {
  return getToken(ObjectPascalParser::PROCEDURE_1, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureContext::PROCEDURE_2() {
  return getToken(ObjectPascalParser::PROCEDURE_2, 0);
}


size_t ObjectPascalParser::ProcedureContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedure;
}


std::any ObjectPascalParser::ProcedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedure(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureContext* ObjectPascalParser::procedure() {
  ProcedureContext *_localctx = _tracker.createInstance<ProcedureContext>(_ctx, getState());
  enterRule(_localctx, 288, ObjectPascalParser::RuleProcedure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::PROCEDURE_1

    || _la == ObjectPascalParser::PROCEDURE_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OverrideContext ------------------------------------------------------------------

ObjectPascalParser::OverrideContext::OverrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::OverrideContext::OVERRIDE_1() {
  return getToken(ObjectPascalParser::OVERRIDE_1, 0);
}

tree::TerminalNode* ObjectPascalParser::OverrideContext::OVERRIDE_2() {
  return getToken(ObjectPascalParser::OVERRIDE_2, 0);
}


size_t ObjectPascalParser::OverrideContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOverride;
}


std::any ObjectPascalParser::OverrideContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOverride(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OverrideContext* ObjectPascalParser::override() {
  OverrideContext *_localctx = _tracker.createInstance<OverrideContext>(_ctx, getState());
  enterRule(_localctx, 290, ObjectPascalParser::RuleOverride);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::OVERRIDE_1

    || _la == ObjectPascalParser::OVERRIDE_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProtectedContext ------------------------------------------------------------------

ObjectPascalParser::ProtectedContext::ProtectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProtectedContext::PROTECTED_1() {
  return getToken(ObjectPascalParser::PROTECTED_1, 0);
}

tree::TerminalNode* ObjectPascalParser::ProtectedContext::PROTECTED_2() {
  return getToken(ObjectPascalParser::PROTECTED_2, 0);
}


size_t ObjectPascalParser::ProtectedContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProtected;
}


std::any ObjectPascalParser::ProtectedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProtected(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProtectedContext* ObjectPascalParser::protected_() {
  ProtectedContext *_localctx = _tracker.createInstance<ProtectedContext>(_ctx, getState());
  enterRule(_localctx, 292, ObjectPascalParser::RuleProtected);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1511);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::PROTECTED_1

    || _la == ObjectPascalParser::PROTECTED_2)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void ObjectPascalParser::initialize() {
  std::call_once(objectpascalparserParserOnceFlag, objectpascalparserParserInitialize);
}
