
// Generated from ObjectPascalParser.g4 by ANTLR 4.10.1


#include "ObjectPascalParserVisitor.h"

#include "ObjectPascalParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ObjectPascalParserStaticData final {
  ObjectPascalParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ObjectPascalParserStaticData(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData(ObjectPascalParserStaticData&&) = delete;
  ObjectPascalParserStaticData& operator=(const ObjectPascalParserStaticData&) = delete;
  ObjectPascalParserStaticData& operator=(ObjectPascalParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag objectpascalparserParserOnceFlag;
ObjectPascalParserStaticData *objectpascalparserParserStaticData = nullptr;

void objectpascalparserParserInitialize() {
  assert(objectpascalparserParserStaticData == nullptr);
  auto staticData = std::make_unique<ObjectPascalParserStaticData>(
    std::vector<std::string>{
      "goal", "program", "unit", "package", "library", "usesClause", "portabilityDirective", 
      "interfaceSection", "interfaceDecl", "exportedHeading", "implementationSection", 
      "block", "exportsStmt", "exportsItem", "declSection", "labelDeclSection", 
      "constSection", "constantDecl", "typeSection", "typeDecl", "typedConstant", 
      "arrayConstant", "recordConstant", "recordFieldConstant", "type", 
      "restrictedType", "classRefType", "simpleType", "ordinalType", "subrangeType", 
      "enumeratedType", "enumeratedTypeElement", "stringType", "strucType", 
      "arrayType", "recType", "fieldList", "fieldDecl", "variantSection", 
      "recVariant", "setType", "fileType", "pointerType", "procedureType", 
      "varSection", "varDecl", "expression", "simpleGrouped", "simpleExpression", 
      "term", "factor", "designator", "setConstructor", "setElement", "exprList", 
      "statement", "stmtList", "simpleStatement", "structStmt", "compoundStmt", 
      "conditionalStmt", "procedureCall", "assignmentStmt", "ifStmt", "caseStmt", 
      "caseSelector", "caseLabel", "loopStmt", "repeatStmt", "whileStmt", 
      "forStmt", "withStmt", "tryExceptStmt", "exceptionBlock", "tryFinallyStmt", 
      "raiseStmt", "procedureDeclSection", "procedureDecl", "functionDecl", 
      "constructorDecl", "destructorDecl", "functionHeading", "procedureHeading", 
      "formalParameters", "formalParm", "parameter", "directive", "externalDirective", 
      "objectType", "objHeritage", "methodList", "methodHeading", "constructorHeading", 
      "destructorHeading", "objFieldList", "initSection", "classType", "classHeritage", 
      "classFieldList", "classMethodList", "classPropertyList", "propertyList", 
      "propertyInterface", "propertyParameterList", "propertySpecifiers", 
      "interfaceType", "interfaceHeritage", "requiresClause", "containsClause", 
      "identList", "qualIdList", "qualId", "typeId", "charExpr", "unitId", 
      "labelId", "string", "number", "constExpr", "realType", "ordIdent", 
      "variantType", "relOp", "addOp", "mulOp", "additiveOp", "classVisibility"
    },
    std::vector<std::string>{
      "", "'program'", "'package'", "'end'", "'requires'", "'contains'", 
      "'library'", "'unit'", "'interface'", "'implementation'", "'intitialization'", 
      "'uses'", "'in'", "'label'", "'const'", "'type'", "'class'", "'of'", 
      "'real'", "'single'", "'double'", "'extended'", "'currency'", "'comp'", 
      "'shortint'", "'smallint'", "'integer'", "'byte'", "'longint'", "'word'", 
      "'boolean'", "'char'", "'widechar'", "'longchar'", "'pchar'", "'variant'", 
      "'olevariant'", "'string'", "'ansistring'", "'widestring'", "'packed'", 
      "'array'", "'record'", "'case'", "'set'", "'file'", "'object'", "'virtual'", 
      "'constructor'", "'destructor'", "'finalization'", "'public'", "'protected'", 
      "'private'", "'published'", "'property'", "'index'", "'read'", "'write'", 
      "'stored'", "'default'", "'nodefault'", "'implements'", "'var'", "'absolute'", 
      "'absctuct'", "'function'", "'procedure'", "'out'", "'inherited'", 
      "'goto'", "'begin'", "'then'", "'else'", "'if'", "'repeat'", "'until'", 
      "'while'", "'to'", "'downto'", "'for'", "'do'", "'with'", "'try'", 
      "'finally'", "'except'", "'on'", "'raise'", "'at'", "'is'", "'or'", 
      "'xor'", "'div'", "'mod'", "'and'", "'shl'", "'shr'", "'nil'", "'not'", 
      "'true'", "'false'", "'UID'", "'NAME'", "'as'", "'cdecl'", "'register'", 
      "'dynamic'", "'export'", "'external'", "'far'", "'forward'", "'message'", 
      "'override'", "'overload'", "'pascal'", "'reintroduce'", "'safecall'", 
      "'stdcall'", "'varargs'", "'local'", "'real48'", "';'", "'.'", "'..'", 
      "'('", "')'", "'['", "']'", "','", "'='", "':'", "'^'", "':='", "'>'", 
      "'<'", "'>='", "'<='", "'<>'", "'+'", "'-'", "'*'", "'/'", "'@'", 
      "'#'", "'</'", "'near'", "'inline'", "'assembler'", "'platform'", 
      "'deprecated'", "'cardinal'", "'int64'", "'longword'", "'unicodestring'", 
      "'\"'", "'E'", "'''"
    },
    std::vector<std::string>{
      "", "PROGRAM", "PACKAGE", "END", "REQUIRES", "CONTAINS", "LIBRARY", 
      "UNIT", "INTERFACE", "IMPLEMENTATION", "INITIALIZATION", "USES", "IN", 
      "LABEL", "CONST", "TYPE_", "CLASS", "OF", "REAL", "SINGLE", "DOUBLE", 
      "EXTENDED", "CURRENCY", "COMP", "SHORTINT", "SMALLINT", "INTEGER", 
      "BYTE", "LONGINT", "WORD", "BOOLEAN", "CHAR", "WIDECHAR", "LONGCHAR", 
      "PCHAR", "VARIANT", "OLEVARIANT", "STRING", "ANSISTRING", "WIDESTRING", 
      "PACKED", "ARRAY", "RECORD", "CASE", "SET", "FILE", "OBJECT", "VIRTUAL", 
      "CONSTRUCTOR", "DESTRUCTOR", "FINALIZATION", "PUBLIC", "PROTECTED", 
      "PRIVATE", "PUBLISHED", "PROPERTY", "INDEX", "READ", "WRITE", "STORED", 
      "DEFAULT", "NODEFAULT", "IMPLEMENTS", "VAR", "ABSOLUTE", "ABSTRACT", 
      "FUNCTION", "PROCEDURE", "OUT", "INHERITED", "GOTO", "BEGIN", "THEN", 
      "ELSE", "IF", "REPEAT", "UNTIL", "WHILE", "TO", "DOWNTO", "FOR", "DO", 
      "WITH", "TRY", "FINALLY", "EXCEPT", "ON", "RAISE", "AT", "IS", "OR", 
      "XOR", "DIV", "MOD", "AND", "SHL", "SHR", "NIL", "NOT", "TRUE", "FALSE", 
      "UID", "NAME", "AS", "CDECL", "REGISTER", "DYNAMIC", "EXPORT", "EXTERNAL", 
      "FAR", "FORWARD", "MESSAGE", "OVERRIDE", "OVERLOAD", "PASCAL", "REINTRODUCE", 
      "SAFECALL", "STDCALL", "VARARGS", "LOCAL", "REAL48", "SEMI", "DOT", 
      "DOT_DOT", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
      "COMMA", "ASSIGN", "COLON", "CARET", "COLON_ASSIGN", "GRATER", "LESS", 
      "GRATER_EQUAL", "LESS_EQUAL", "NOT_EQUAL", "PLUS", "MINUS", "STAR", 
      "DIV_", "DOG", "SHARP", "LESS_DIV", "NEAR", "INLINE", "ASSEMBLER", 
      "PLATFORM", "DEPRECATED", "CARDINAL", "INT64", "LONGWORD", "UNICODESTRING", 
      "QUOTE", "E", "SINGLE_QUOTE", "Identifier", "Integer", "IntegerLiteral", 
      "OctLiteral", "HexLiteral", "Float", "Whitespace", "Newline", "BlockComment", 
      "LineComment", "CharacterLiteral", "StringLiteral", "BooleanLiteral", 
      "MultiLineMacro"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,170,1394,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,1,0,1,0,1,0,1,0,
  	3,0,259,8,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,267,8,1,1,1,1,1,3,1,271,8,1,1,
  	1,5,1,274,8,1,10,1,12,1,277,9,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,285,8,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,297,8,3,1,3,3,3,300,8,3,1,3,
  	1,3,1,3,1,4,1,4,1,4,1,4,3,4,309,8,4,1,4,5,4,312,8,4,10,4,12,4,315,9,4,
  	1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,3,7,328,8,7,1,7,5,7,331,8,
  	7,10,7,12,7,334,9,7,1,8,1,8,1,8,1,8,3,8,340,8,8,1,9,1,9,1,9,3,9,345,8,
  	9,1,9,1,9,1,9,3,9,350,8,9,3,9,352,8,9,1,10,1,10,3,10,356,8,10,1,10,5,
  	10,359,8,10,10,10,12,10,362,9,10,1,11,3,11,365,8,11,1,11,1,11,1,12,1,
  	12,1,12,1,12,5,12,373,8,12,10,12,12,12,376,9,12,1,13,1,13,1,13,1,13,1,
  	13,1,13,1,13,3,13,385,8,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,393,8,13,
  	3,13,395,8,13,1,14,1,14,1,14,1,14,1,14,3,14,402,8,14,1,15,1,15,1,15,1,
  	16,1,16,1,16,1,16,5,16,411,8,16,10,16,12,16,414,9,16,1,17,1,17,1,17,1,
  	17,3,17,420,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,428,8,17,3,17,430,
  	8,17,1,18,1,18,1,18,1,18,4,18,436,8,18,11,18,12,18,437,1,19,1,19,1,19,
  	3,19,443,8,19,1,19,1,19,3,19,447,8,19,1,19,1,19,1,19,3,19,452,8,19,1,
  	19,1,19,3,19,456,8,19,3,19,458,8,19,1,20,1,20,1,20,3,20,463,8,20,1,21,
  	1,21,1,21,1,21,5,21,469,8,21,10,21,12,21,472,9,21,1,21,1,21,1,22,1,22,
  	1,22,1,22,5,22,480,8,22,10,22,12,22,483,9,22,1,22,1,22,1,23,1,23,1,23,
  	1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,499,8,24,1,25,1,25,
  	1,25,3,25,504,8,25,1,26,1,26,1,26,1,26,1,27,1,27,3,27,512,8,27,1,28,1,
  	28,1,28,3,28,517,8,28,1,29,1,29,3,29,521,8,29,1,29,1,29,1,29,3,29,526,
  	8,29,1,30,1,30,1,30,1,30,5,30,532,8,30,10,30,12,30,535,9,30,1,30,1,30,
  	1,31,1,31,1,31,3,31,542,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,3,32,553,8,32,1,33,3,33,556,8,33,1,33,1,33,1,33,1,33,1,33,3,33,563,
  	8,33,3,33,565,8,33,1,34,1,34,1,34,1,34,1,34,5,34,572,8,34,10,34,12,34,
  	575,9,34,1,34,1,34,3,34,579,8,34,1,34,1,34,1,34,3,34,584,8,34,1,35,1,
  	35,3,35,588,8,35,1,35,1,35,3,35,592,8,35,1,36,1,36,1,36,4,36,597,8,36,
  	11,36,12,36,598,1,36,3,36,602,8,36,1,36,3,36,605,8,36,1,37,1,37,1,37,
  	1,37,3,37,611,8,37,1,38,1,38,1,38,3,38,616,8,38,1,38,1,38,1,38,1,38,1,
  	38,5,38,623,8,38,10,38,12,38,626,9,38,1,39,1,39,1,39,5,39,631,8,39,10,
  	39,12,39,634,9,39,1,39,1,39,1,39,3,39,639,8,39,1,39,1,39,1,40,1,40,1,
  	40,1,40,3,40,647,8,40,1,41,1,41,1,41,1,41,3,41,653,8,41,1,42,1,42,1,42,
  	3,42,658,8,42,1,43,1,43,3,43,662,8,43,1,43,1,43,3,43,666,8,43,1,44,1,
  	44,1,44,1,44,4,44,672,8,44,11,44,12,44,673,1,45,1,45,1,45,1,45,1,45,1,
  	45,3,45,682,8,45,1,45,1,45,3,45,686,8,45,1,45,3,45,689,8,45,1,46,1,46,
  	1,46,1,46,5,46,695,8,46,10,46,12,46,698,9,46,1,47,1,47,1,47,1,47,1,47,
  	3,47,705,8,47,1,48,3,48,708,8,48,1,48,1,48,1,48,1,48,5,48,714,8,48,10,
  	48,12,48,717,9,48,1,49,1,49,1,49,1,49,5,49,723,8,49,10,49,12,49,726,9,
  	49,1,50,1,50,1,50,1,50,1,50,3,50,733,8,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,752,8,
  	50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,762,8,51,10,51,12,51,
  	765,9,51,1,52,1,52,1,52,1,52,5,52,771,8,52,10,52,12,52,774,9,52,1,52,
  	1,52,1,53,1,53,1,53,3,53,781,8,53,1,54,1,54,1,54,5,54,786,8,54,10,54,
  	12,54,789,9,54,1,55,1,55,1,55,3,55,794,8,55,1,55,1,55,3,55,798,8,55,1,
  	56,1,56,1,56,4,56,803,8,56,11,56,12,56,804,1,57,1,57,1,57,1,57,1,57,3,
  	57,812,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,821,8,58,1,59,1,59,
  	1,59,3,59,826,8,59,1,59,1,59,1,60,1,60,3,60,832,8,60,1,61,1,61,1,61,1,
  	61,1,61,3,61,839,8,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,
  	63,3,63,851,8,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,859,8,64,10,64,12,
  	64,862,9,64,1,64,1,64,3,64,866,8,64,1,64,3,64,869,8,64,1,64,1,64,1,65,
  	1,65,1,65,5,65,876,8,65,10,65,12,65,879,9,65,1,65,1,65,1,65,1,66,1,66,
  	1,66,3,66,887,8,66,1,67,1,67,1,67,3,67,892,8,67,1,68,1,68,1,68,3,68,897,
  	8,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,
  	1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,5,72,
  	925,8,72,10,72,12,72,928,9,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,3,73,
  	937,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,946,8,73,1,73,1,73,1,
  	73,1,73,5,73,952,8,73,10,73,12,73,955,9,73,1,73,1,73,5,73,959,8,73,10,
  	73,12,73,962,9,73,1,73,3,73,965,8,73,1,74,1,74,1,74,1,74,1,74,3,74,972,
  	8,74,1,74,1,74,1,75,1,75,3,75,978,8,75,1,75,1,75,3,75,982,8,75,1,76,1,
  	76,1,76,1,76,3,76,988,8,76,1,77,1,77,1,77,3,77,993,8,77,1,77,3,77,996,
  	8,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,1004,8,78,1,78,3,78,1007,8,78,
  	1,78,1,78,1,78,1,79,1,79,1,79,3,79,1015,8,79,1,79,3,79,1018,8,79,1,79,
  	1,79,1,79,1,80,1,80,1,80,3,80,1026,8,80,1,80,3,80,1029,8,80,1,80,1,80,
  	1,80,1,81,1,81,1,81,3,81,1037,8,81,1,81,1,81,1,81,3,81,1042,8,81,1,82,
  	1,82,1,82,3,82,1047,8,82,1,83,1,83,3,83,1051,8,83,1,83,1,83,5,83,1055,
  	8,83,10,83,12,83,1058,9,83,1,83,1,83,1,84,3,84,1063,8,84,1,84,1,84,1,
  	85,1,85,1,85,1,85,3,85,1071,8,85,1,85,1,85,1,85,3,85,1076,8,85,3,85,1078,
  	8,85,1,85,1,85,1,85,1,85,1,85,3,85,1085,8,85,3,85,1087,8,85,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,3,86,1111,8,86,1,87,1,87,1,87,1,87,5,87,
  	1117,8,87,10,87,12,87,1120,9,87,3,87,1122,8,87,3,87,1124,8,87,1,88,1,
  	88,3,88,1128,8,88,1,88,3,88,1131,8,88,1,88,3,88,1134,8,88,1,88,1,88,1,
  	89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,3,90,1147,8,90,3,90,1149,8,
  	90,1,90,1,90,4,90,1153,8,90,11,90,12,90,1154,1,91,3,91,1158,8,91,1,91,
  	1,91,3,91,1162,8,91,1,91,1,91,3,91,1166,8,91,1,92,1,92,1,92,3,92,1171,
  	8,92,1,93,1,93,1,93,3,93,1176,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,95,
  	1,95,1,95,1,95,3,95,1188,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,
  	1197,8,95,1,96,1,96,3,96,1201,8,96,1,96,1,96,1,96,5,96,1206,8,96,10,96,
  	12,96,1209,9,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,3,98,1218,8,98,1,98,
  	4,98,1221,8,98,11,98,12,98,1222,1,99,3,99,1226,8,99,1,99,4,99,1229,8,
  	99,11,99,12,99,1230,1,100,3,100,1234,8,100,1,100,4,100,1237,8,100,11,
  	100,12,100,1238,1,101,1,101,1,101,3,101,1244,8,101,1,101,3,101,1247,8,
  	101,1,101,3,101,1250,8,101,1,102,3,102,1253,8,102,1,102,1,102,1,102,1,
  	103,1,103,1,103,1,103,1,103,1,103,5,103,1264,8,103,10,103,12,103,1267,
  	9,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	3,104,1280,8,104,1,104,1,104,1,104,3,104,1285,8,104,1,104,1,104,3,104,
  	1289,8,104,1,105,1,105,3,105,1293,8,105,1,105,3,105,1296,8,105,1,105,
  	3,105,1299,8,105,1,105,1,105,1,106,1,106,1,106,1,106,1,107,1,107,4,107,
  	1309,8,107,11,107,12,107,1310,1,107,1,107,1,108,1,108,4,108,1317,8,108,
  	11,108,12,108,1318,1,108,1,108,1,109,1,109,1,109,5,109,1326,8,109,10,
  	109,12,109,1329,9,109,1,110,1,110,1,110,4,110,1334,8,110,11,110,12,110,
  	1335,1,111,1,111,1,111,1,111,4,111,1342,8,111,11,111,12,111,1343,3,111,
  	1346,8,111,1,112,1,112,1,112,3,112,1351,8,112,1,112,1,112,1,113,1,113,
  	1,114,1,114,1,114,1,114,3,114,1361,8,114,1,115,1,115,1,116,1,116,1,117,
  	1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1376,8,118,1,119,
  	1,119,1,120,1,120,1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,125,
  	1,125,1,126,1,126,1,126,0,0,127,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
  	28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
  	74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
  	116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
  	152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
  	188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,
  	224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,0,14,2,0,
  	6,6,148,149,1,0,138,139,1,0,78,79,3,0,14,14,63,63,68,68,2,0,157,157,159,
  	159,2,0,158,158,162,162,2,0,18,23,120,120,3,0,24,32,34,34,150,152,1,0,
  	35,36,5,0,12,12,89,89,103,103,129,129,133,137,2,0,90,91,138,139,2,0,92,
  	96,140,140,1,0,138,140,1,0,51,54,1510,0,258,1,0,0,0,2,260,1,0,0,0,4,281,
  	1,0,0,0,6,292,1,0,0,0,8,304,1,0,0,0,10,319,1,0,0,0,12,323,1,0,0,0,14,
  	325,1,0,0,0,16,339,1,0,0,0,18,351,1,0,0,0,20,353,1,0,0,0,22,364,1,0,0,
  	0,24,368,1,0,0,0,26,394,1,0,0,0,28,401,1,0,0,0,30,403,1,0,0,0,32,406,
  	1,0,0,0,34,429,1,0,0,0,36,431,1,0,0,0,38,457,1,0,0,0,40,462,1,0,0,0,42,
  	464,1,0,0,0,44,475,1,0,0,0,46,486,1,0,0,0,48,498,1,0,0,0,50,503,1,0,0,
  	0,52,505,1,0,0,0,54,511,1,0,0,0,56,516,1,0,0,0,58,520,1,0,0,0,60,527,
  	1,0,0,0,62,538,1,0,0,0,64,552,1,0,0,0,66,555,1,0,0,0,68,566,1,0,0,0,70,
  	585,1,0,0,0,72,596,1,0,0,0,74,606,1,0,0,0,76,612,1,0,0,0,78,627,1,0,0,
  	0,80,642,1,0,0,0,82,648,1,0,0,0,84,654,1,0,0,0,86,661,1,0,0,0,88,667,
  	1,0,0,0,90,675,1,0,0,0,92,690,1,0,0,0,94,704,1,0,0,0,96,707,1,0,0,0,98,
  	718,1,0,0,0,100,751,1,0,0,0,102,753,1,0,0,0,104,766,1,0,0,0,106,777,1,
  	0,0,0,108,782,1,0,0,0,110,793,1,0,0,0,112,802,1,0,0,0,114,811,1,0,0,0,
  	116,820,1,0,0,0,118,822,1,0,0,0,120,831,1,0,0,0,122,833,1,0,0,0,124,840,
  	1,0,0,0,126,844,1,0,0,0,128,852,1,0,0,0,130,872,1,0,0,0,132,883,1,0,0,
  	0,134,891,1,0,0,0,136,893,1,0,0,0,138,901,1,0,0,0,140,906,1,0,0,0,142,
  	915,1,0,0,0,144,920,1,0,0,0,146,933,1,0,0,0,148,966,1,0,0,0,150,975,1,
  	0,0,0,152,987,1,0,0,0,154,989,1,0,0,0,156,1000,1,0,0,0,158,1011,1,0,0,
  	0,160,1022,1,0,0,0,162,1033,1,0,0,0,164,1043,1,0,0,0,166,1048,1,0,0,0,
  	168,1062,1,0,0,0,170,1086,1,0,0,0,172,1110,1,0,0,0,174,1112,1,0,0,0,176,
  	1125,1,0,0,0,178,1137,1,0,0,0,180,1152,1,0,0,0,182,1165,1,0,0,0,184,1167,
  	1,0,0,0,186,1172,1,0,0,0,188,1177,1,0,0,0,190,1196,1,0,0,0,192,1198,1,
  	0,0,0,194,1212,1,0,0,0,196,1217,1,0,0,0,198,1225,1,0,0,0,200,1233,1,0,
  	0,0,202,1240,1,0,0,0,204,1252,1,0,0,0,206,1257,1,0,0,0,208,1288,1,0,0,
  	0,210,1290,1,0,0,0,212,1302,1,0,0,0,214,1306,1,0,0,0,216,1314,1,0,0,0,
  	218,1322,1,0,0,0,220,1330,1,0,0,0,222,1337,1,0,0,0,224,1350,1,0,0,0,226,
  	1354,1,0,0,0,228,1360,1,0,0,0,230,1362,1,0,0,0,232,1364,1,0,0,0,234,1366,
  	1,0,0,0,236,1375,1,0,0,0,238,1377,1,0,0,0,240,1379,1,0,0,0,242,1381,1,
  	0,0,0,244,1383,1,0,0,0,246,1385,1,0,0,0,248,1387,1,0,0,0,250,1389,1,0,
  	0,0,252,1391,1,0,0,0,254,259,3,2,1,0,255,259,3,6,3,0,256,259,3,8,4,0,
  	257,259,3,4,2,0,258,254,1,0,0,0,258,255,1,0,0,0,258,256,1,0,0,0,258,257,
  	1,0,0,0,259,1,1,0,0,0,260,261,5,1,0,0,261,266,5,157,0,0,262,263,5,124,
  	0,0,263,264,3,218,109,0,264,265,5,125,0,0,265,267,1,0,0,0,266,262,1,0,
  	0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,270,5,121,0,0,269,271,3,10,5,
  	0,270,269,1,0,0,0,270,271,1,0,0,0,271,275,1,0,0,0,272,274,3,28,14,0,273,
  	272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,
  	0,0,0,277,275,1,0,0,0,278,279,3,118,59,0,279,280,5,122,0,0,280,3,1,0,
  	0,0,281,282,5,7,0,0,282,284,3,222,111,0,283,285,3,12,6,0,284,283,1,0,
  	0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,287,5,121,0,0,287,288,3,14,7,
  	0,288,289,3,20,10,0,289,290,3,190,95,0,290,291,5,122,0,0,291,5,1,0,0,
  	0,292,293,5,2,0,0,293,294,5,157,0,0,294,296,5,121,0,0,295,297,3,214,107,
  	0,296,295,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,300,3,216,108,0,
  	299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,5,3,0,0,302,303,
  	5,122,0,0,303,7,1,0,0,0,304,305,5,6,0,0,305,306,5,157,0,0,306,308,5,121,
  	0,0,307,309,3,10,5,0,308,307,1,0,0,0,308,309,1,0,0,0,309,313,1,0,0,0,
  	310,312,3,28,14,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,
  	314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,317,3,118,59,0,317,318,
  	5,122,0,0,318,9,1,0,0,0,319,320,5,11,0,0,320,321,3,220,110,0,321,322,
  	5,121,0,0,322,11,1,0,0,0,323,324,7,0,0,0,324,13,1,0,0,0,325,327,5,8,0,
  	0,326,328,3,10,5,0,327,326,1,0,0,0,327,328,1,0,0,0,328,332,1,0,0,0,329,
  	331,3,16,8,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,
  	1,0,0,0,333,15,1,0,0,0,334,332,1,0,0,0,335,340,3,32,16,0,336,340,3,36,
  	18,0,337,340,3,88,44,0,338,340,3,18,9,0,339,335,1,0,0,0,339,336,1,0,0,
  	0,339,337,1,0,0,0,339,338,1,0,0,0,340,17,1,0,0,0,341,342,3,164,82,0,342,
  	344,5,121,0,0,343,345,3,172,86,0,344,343,1,0,0,0,344,345,1,0,0,0,345,
  	352,1,0,0,0,346,347,3,162,81,0,347,349,5,121,0,0,348,350,3,172,86,0,349,
  	348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,341,1,0,0,0,351,346,1,
  	0,0,0,352,19,1,0,0,0,353,355,5,9,0,0,354,356,3,10,5,0,355,354,1,0,0,0,
  	355,356,1,0,0,0,356,360,1,0,0,0,357,359,3,28,14,0,358,357,1,0,0,0,359,
  	362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,21,1,0,0,0,362,360,1,
  	0,0,0,363,365,3,28,14,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,
  	0,366,367,3,118,59,0,367,23,1,0,0,0,368,369,5,107,0,0,369,374,3,26,13,
  	0,370,371,5,128,0,0,371,373,3,26,13,0,372,370,1,0,0,0,373,376,1,0,0,0,
  	374,372,1,0,0,0,374,375,1,0,0,0,375,25,1,0,0,0,376,374,1,0,0,0,377,384,
  	5,157,0,0,378,385,5,102,0,0,379,380,5,56,0,0,380,381,5,156,0,0,381,382,
  	3,236,118,0,382,383,5,156,0,0,383,385,1,0,0,0,384,378,1,0,0,0,384,379,
  	1,0,0,0,384,385,1,0,0,0,385,395,1,0,0,0,386,393,5,56,0,0,387,388,5,102,
  	0,0,388,389,5,156,0,0,389,390,3,236,118,0,390,391,5,156,0,0,391,393,1,
  	0,0,0,392,386,1,0,0,0,392,387,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,
  	394,377,1,0,0,0,394,392,1,0,0,0,395,27,1,0,0,0,396,402,3,30,15,0,397,
  	402,3,32,16,0,398,402,3,36,18,0,399,402,3,88,44,0,400,402,3,152,76,0,
  	401,396,1,0,0,0,401,397,1,0,0,0,401,398,1,0,0,0,401,399,1,0,0,0,401,400,
  	1,0,0,0,402,29,1,0,0,0,403,404,5,13,0,0,404,405,3,230,115,0,405,31,1,
  	0,0,0,406,412,5,14,0,0,407,408,3,34,17,0,408,409,5,121,0,0,409,411,1,
  	0,0,0,410,407,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,
  	413,33,1,0,0,0,414,412,1,0,0,0,415,416,5,157,0,0,416,417,5,129,0,0,417,
  	419,3,236,118,0,418,420,3,12,6,0,419,418,1,0,0,0,419,420,1,0,0,0,420,
  	430,1,0,0,0,421,422,5,157,0,0,422,423,5,130,0,0,423,424,3,224,112,0,424,
  	425,5,129,0,0,425,427,3,40,20,0,426,428,3,12,6,0,427,426,1,0,0,0,427,
  	428,1,0,0,0,428,430,1,0,0,0,429,415,1,0,0,0,429,421,1,0,0,0,430,35,1,
  	0,0,0,431,435,5,15,0,0,432,433,3,38,19,0,433,434,5,121,0,0,434,436,1,
  	0,0,0,435,432,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,
  	438,37,1,0,0,0,439,440,5,157,0,0,440,442,5,129,0,0,441,443,5,15,0,0,442,
  	441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,446,3,48,24,0,445,447,
  	3,12,6,0,446,445,1,0,0,0,446,447,1,0,0,0,447,458,1,0,0,0,448,449,5,157,
  	0,0,449,451,5,129,0,0,450,452,5,15,0,0,451,450,1,0,0,0,451,452,1,0,0,
  	0,452,453,1,0,0,0,453,455,3,50,25,0,454,456,3,12,6,0,455,454,1,0,0,0,
  	455,456,1,0,0,0,456,458,1,0,0,0,457,439,1,0,0,0,457,448,1,0,0,0,458,39,
  	1,0,0,0,459,463,3,236,118,0,460,463,3,42,21,0,461,463,3,44,22,0,462,459,
  	1,0,0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,41,1,0,0,0,464,465,5,124,
  	0,0,465,470,3,40,20,0,466,467,5,128,0,0,467,469,3,40,20,0,468,466,1,0,
  	0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,
  	470,1,0,0,0,473,474,5,125,0,0,474,43,1,0,0,0,475,481,5,124,0,0,476,477,
  	3,46,23,0,477,478,5,121,0,0,478,480,1,0,0,0,479,476,1,0,0,0,480,483,1,
  	0,0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,
  	484,485,5,125,0,0,485,45,1,0,0,0,486,487,5,157,0,0,487,488,5,130,0,0,
  	488,489,3,40,20,0,489,47,1,0,0,0,490,499,3,224,112,0,491,499,3,54,27,
  	0,492,499,3,66,33,0,493,499,3,84,42,0,494,499,3,64,32,0,495,499,3,86,
  	43,0,496,499,3,242,121,0,497,499,3,52,26,0,498,490,1,0,0,0,498,491,1,
  	0,0,0,498,492,1,0,0,0,498,493,1,0,0,0,498,494,1,0,0,0,498,495,1,0,0,0,
  	498,496,1,0,0,0,498,497,1,0,0,0,499,49,1,0,0,0,500,504,3,176,88,0,501,
  	504,3,192,96,0,502,504,3,210,105,0,503,500,1,0,0,0,503,501,1,0,0,0,503,
  	502,1,0,0,0,504,51,1,0,0,0,505,506,5,16,0,0,506,507,5,17,0,0,507,508,
  	3,224,112,0,508,53,1,0,0,0,509,512,3,56,28,0,510,512,3,238,119,0,511,
  	509,1,0,0,0,511,510,1,0,0,0,512,55,1,0,0,0,513,517,3,58,29,0,514,517,
  	3,60,30,0,515,517,3,240,120,0,516,513,1,0,0,0,516,514,1,0,0,0,516,515,
  	1,0,0,0,517,57,1,0,0,0,518,521,3,236,118,0,519,521,5,157,0,0,520,518,
  	1,0,0,0,520,519,1,0,0,0,521,522,1,0,0,0,522,525,5,123,0,0,523,526,3,236,
  	118,0,524,526,5,157,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,59,1,0,0,
  	0,527,528,5,124,0,0,528,533,3,62,31,0,529,530,5,128,0,0,530,532,3,62,
  	31,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,
  	534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,125,0,0,537,61,1,0,0,0,538,
  	541,5,157,0,0,539,540,5,129,0,0,540,542,3,236,118,0,541,539,1,0,0,0,541,
  	542,1,0,0,0,542,63,1,0,0,0,543,553,5,37,0,0,544,553,5,38,0,0,545,553,
  	5,39,0,0,546,553,5,153,0,0,547,548,5,37,0,0,548,549,5,126,0,0,549,550,
  	3,236,118,0,550,551,5,127,0,0,551,553,1,0,0,0,552,543,1,0,0,0,552,544,
  	1,0,0,0,552,545,1,0,0,0,552,546,1,0,0,0,552,547,1,0,0,0,553,65,1,0,0,
  	0,554,556,5,40,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,564,1,0,0,0,557,
  	565,3,68,34,0,558,565,3,80,40,0,559,565,3,82,41,0,560,562,3,70,35,0,561,
  	563,5,40,0,0,562,561,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,557,
  	1,0,0,0,564,558,1,0,0,0,564,559,1,0,0,0,564,560,1,0,0,0,565,67,1,0,0,
  	0,566,578,5,41,0,0,567,568,5,126,0,0,568,573,3,56,28,0,569,570,5,128,
  	0,0,570,572,3,56,28,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,
  	573,574,1,0,0,0,574,576,1,0,0,0,575,573,1,0,0,0,576,577,5,127,0,0,577,
  	579,1,0,0,0,578,567,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,5,
  	17,0,0,581,583,3,48,24,0,582,584,3,12,6,0,583,582,1,0,0,0,583,584,1,0,
  	0,0,584,69,1,0,0,0,585,587,5,42,0,0,586,588,3,72,36,0,587,586,1,0,0,0,
  	587,588,1,0,0,0,588,589,1,0,0,0,589,591,5,3,0,0,590,592,3,12,6,0,591,
  	590,1,0,0,0,591,592,1,0,0,0,592,71,1,0,0,0,593,594,3,74,37,0,594,595,
  	5,121,0,0,595,597,1,0,0,0,596,593,1,0,0,0,597,598,1,0,0,0,598,596,1,0,
  	0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,602,3,76,38,0,601,600,1,0,0,0,
  	601,602,1,0,0,0,602,604,1,0,0,0,603,605,5,121,0,0,604,603,1,0,0,0,604,
  	605,1,0,0,0,605,73,1,0,0,0,606,607,3,218,109,0,607,608,5,130,0,0,608,
  	610,3,48,24,0,609,611,3,12,6,0,610,609,1,0,0,0,610,611,1,0,0,0,611,75,
  	1,0,0,0,612,615,5,43,0,0,613,614,5,157,0,0,614,616,5,130,0,0,615,613,
  	1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,618,3,224,112,0,618,619,5,
  	17,0,0,619,624,3,78,39,0,620,621,5,121,0,0,621,623,3,78,39,0,622,620,
  	1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,77,1,0,0,
  	0,626,624,1,0,0,0,627,632,3,236,118,0,628,629,5,128,0,0,629,631,3,236,
  	118,0,630,628,1,0,0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,
  	633,635,1,0,0,0,634,632,1,0,0,0,635,636,5,130,0,0,636,638,5,124,0,0,637,
  	639,3,72,36,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,
  	5,125,0,0,641,79,1,0,0,0,642,643,5,44,0,0,643,644,5,17,0,0,644,646,3,
  	56,28,0,645,647,3,12,6,0,646,645,1,0,0,0,646,647,1,0,0,0,647,81,1,0,0,
  	0,648,649,5,45,0,0,649,650,5,17,0,0,650,652,3,224,112,0,651,653,3,12,
  	6,0,652,651,1,0,0,0,652,653,1,0,0,0,653,83,1,0,0,0,654,655,5,131,0,0,
  	655,657,3,224,112,0,656,658,3,12,6,0,657,656,1,0,0,0,657,658,1,0,0,0,
  	658,85,1,0,0,0,659,662,3,164,82,0,660,662,3,162,81,0,661,659,1,0,0,0,
  	661,660,1,0,0,0,662,665,1,0,0,0,663,664,5,17,0,0,664,666,5,46,0,0,665,
  	663,1,0,0,0,665,666,1,0,0,0,666,87,1,0,0,0,667,671,5,63,0,0,668,669,3,
  	90,45,0,669,670,5,121,0,0,670,672,1,0,0,0,671,668,1,0,0,0,672,673,1,0,
  	0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,89,1,0,0,0,675,676,3,218,109,
  	0,676,677,5,130,0,0,677,685,3,48,24,0,678,681,5,64,0,0,679,682,5,157,
  	0,0,680,682,3,236,118,0,681,679,1,0,0,0,681,680,1,0,0,0,682,686,1,0,0,
  	0,683,684,5,129,0,0,684,686,3,236,118,0,685,678,1,0,0,0,685,683,1,0,0,
  	0,685,686,1,0,0,0,686,688,1,0,0,0,687,689,3,12,6,0,688,687,1,0,0,0,688,
  	689,1,0,0,0,689,91,1,0,0,0,690,696,3,94,47,0,691,692,3,244,122,0,692,
  	693,3,94,47,0,693,695,1,0,0,0,694,691,1,0,0,0,695,698,1,0,0,0,696,694,
  	1,0,0,0,696,697,1,0,0,0,697,93,1,0,0,0,698,696,1,0,0,0,699,705,3,96,48,
  	0,700,701,5,124,0,0,701,702,3,96,48,0,702,703,5,125,0,0,703,705,1,0,0,
  	0,704,699,1,0,0,0,704,700,1,0,0,0,705,95,1,0,0,0,706,708,7,1,0,0,707,
  	706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,715,3,98,49,0,710,711,
  	3,246,123,0,711,712,3,98,49,0,712,714,1,0,0,0,713,710,1,0,0,0,714,717,
  	1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,97,1,0,0,0,717,715,1,0,0,
  	0,718,724,3,100,50,0,719,720,3,248,124,0,720,721,3,100,50,0,721,723,1,
  	0,0,0,722,719,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,
  	725,99,1,0,0,0,726,724,1,0,0,0,727,732,3,102,51,0,728,729,5,124,0,0,729,
  	730,3,108,54,0,730,731,5,125,0,0,731,733,1,0,0,0,732,728,1,0,0,0,732,
  	733,1,0,0,0,733,752,1,0,0,0,734,735,5,142,0,0,735,752,3,102,51,0,736,
  	752,3,234,117,0,737,752,3,232,116,0,738,752,5,97,0,0,739,740,5,124,0,
  	0,740,741,3,92,46,0,741,742,5,125,0,0,742,752,1,0,0,0,743,744,5,98,0,
  	0,744,752,3,100,50,0,745,752,3,104,52,0,746,747,3,224,112,0,747,748,5,
  	124,0,0,748,749,3,92,46,0,749,750,5,125,0,0,750,752,1,0,0,0,751,727,1,
  	0,0,0,751,734,1,0,0,0,751,736,1,0,0,0,751,737,1,0,0,0,751,738,1,0,0,0,
  	751,739,1,0,0,0,751,743,1,0,0,0,751,745,1,0,0,0,751,746,1,0,0,0,752,101,
  	1,0,0,0,753,763,3,222,111,0,754,755,5,122,0,0,755,762,5,157,0,0,756,757,
  	5,126,0,0,757,758,3,108,54,0,758,759,5,127,0,0,759,762,1,0,0,0,760,762,
  	5,131,0,0,761,754,1,0,0,0,761,756,1,0,0,0,761,760,1,0,0,0,762,765,1,0,
  	0,0,763,761,1,0,0,0,763,764,1,0,0,0,764,103,1,0,0,0,765,763,1,0,0,0,766,
  	767,5,126,0,0,767,772,3,106,53,0,768,769,5,128,0,0,769,771,3,106,53,0,
  	770,768,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,775,
  	1,0,0,0,774,772,1,0,0,0,775,776,5,127,0,0,776,105,1,0,0,0,777,780,3,92,
  	46,0,778,779,5,123,0,0,779,781,3,92,46,0,780,778,1,0,0,0,780,781,1,0,
  	0,0,781,107,1,0,0,0,782,787,3,92,46,0,783,784,5,128,0,0,784,786,3,92,
  	46,0,785,783,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,
  	788,109,1,0,0,0,789,787,1,0,0,0,790,791,3,230,115,0,791,792,5,130,0,0,
  	792,794,1,0,0,0,793,790,1,0,0,0,793,794,1,0,0,0,794,797,1,0,0,0,795,798,
  	3,114,57,0,796,798,3,116,58,0,797,795,1,0,0,0,797,796,1,0,0,0,798,111,
  	1,0,0,0,799,800,3,110,55,0,800,801,5,121,0,0,801,803,1,0,0,0,802,799,
  	1,0,0,0,803,804,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,113,1,0,0,
  	0,806,812,3,124,62,0,807,812,5,69,0,0,808,809,5,70,0,0,809,812,3,230,
  	115,0,810,812,3,122,61,0,811,806,1,0,0,0,811,807,1,0,0,0,811,808,1,0,
  	0,0,811,810,1,0,0,0,812,115,1,0,0,0,813,821,3,118,59,0,814,821,3,120,
  	60,0,815,821,3,134,67,0,816,821,3,142,71,0,817,821,3,144,72,0,818,821,
  	3,148,74,0,819,821,3,150,75,0,820,813,1,0,0,0,820,814,1,0,0,0,820,815,
  	1,0,0,0,820,816,1,0,0,0,820,817,1,0,0,0,820,818,1,0,0,0,820,819,1,0,0,
  	0,821,117,1,0,0,0,822,823,5,71,0,0,823,825,3,112,56,0,824,826,5,121,0,
  	0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,1,0,0,0,827,828,5,3,0,0,828,
  	119,1,0,0,0,829,832,3,126,63,0,830,832,3,128,64,0,831,829,1,0,0,0,831,
  	830,1,0,0,0,832,121,1,0,0,0,833,838,3,222,111,0,834,835,5,124,0,0,835,
  	836,3,108,54,0,836,837,5,125,0,0,837,839,1,0,0,0,838,834,1,0,0,0,838,
  	839,1,0,0,0,839,123,1,0,0,0,840,841,3,102,51,0,841,842,5,132,0,0,842,
  	843,3,92,46,0,843,125,1,0,0,0,844,845,5,74,0,0,845,846,3,92,46,0,846,
  	847,5,72,0,0,847,850,3,110,55,0,848,849,5,73,0,0,849,851,3,110,55,0,850,
  	848,1,0,0,0,850,851,1,0,0,0,851,127,1,0,0,0,852,853,5,43,0,0,853,854,
  	3,92,46,0,854,855,5,17,0,0,855,860,3,130,65,0,856,857,5,121,0,0,857,859,
  	3,130,65,0,858,856,1,0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,
  	0,0,0,861,865,1,0,0,0,862,860,1,0,0,0,863,864,5,73,0,0,864,866,3,112,
  	56,0,865,863,1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,869,5,121,0,
  	0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,871,5,3,0,0,871,
  	129,1,0,0,0,872,877,3,132,66,0,873,874,5,128,0,0,874,876,3,132,66,0,875,
  	873,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,880,1,
  	0,0,0,879,877,1,0,0,0,880,881,5,130,0,0,881,882,3,110,55,0,882,131,1,
  	0,0,0,883,886,3,236,118,0,884,885,5,123,0,0,885,887,3,236,118,0,886,884,
  	1,0,0,0,886,887,1,0,0,0,887,133,1,0,0,0,888,892,3,136,68,0,889,892,3,
  	138,69,0,890,892,3,140,70,0,891,888,1,0,0,0,891,889,1,0,0,0,891,890,1,
  	0,0,0,892,135,1,0,0,0,893,894,5,75,0,0,894,896,3,112,56,0,895,897,5,121,
  	0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,5,76,0,0,
  	899,900,3,92,46,0,900,137,1,0,0,0,901,902,5,77,0,0,902,903,3,92,46,0,
  	903,904,5,81,0,0,904,905,3,110,55,0,905,139,1,0,0,0,906,907,5,80,0,0,
  	907,908,3,222,111,0,908,909,5,132,0,0,909,910,3,92,46,0,910,911,7,2,0,
  	0,911,912,3,92,46,0,912,913,5,81,0,0,913,914,3,110,55,0,914,141,1,0,0,
  	0,915,916,5,82,0,0,916,917,3,220,110,0,917,918,5,81,0,0,918,919,3,110,
  	55,0,919,143,1,0,0,0,920,921,5,83,0,0,921,926,3,110,55,0,922,923,5,121,
  	0,0,923,925,3,110,55,0,924,922,1,0,0,0,925,928,1,0,0,0,926,924,1,0,0,
  	0,926,927,1,0,0,0,927,929,1,0,0,0,928,926,1,0,0,0,929,930,5,85,0,0,930,
  	931,3,146,73,0,931,932,5,3,0,0,932,145,1,0,0,0,933,936,5,86,0,0,934,935,
  	5,157,0,0,935,937,5,130,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,938,1,
  	0,0,0,938,939,3,224,112,0,939,940,5,81,0,0,940,953,3,110,55,0,941,942,
  	5,121,0,0,942,945,5,86,0,0,943,944,5,157,0,0,944,946,5,130,0,0,945,943,
  	1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,948,3,224,112,0,948,949,5,
  	81,0,0,949,950,3,110,55,0,950,952,1,0,0,0,951,941,1,0,0,0,952,955,1,0,
  	0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,956,1,0,0,0,955,953,1,0,0,0,956,
  	960,5,73,0,0,957,959,3,110,55,0,958,957,1,0,0,0,959,962,1,0,0,0,960,958,
  	1,0,0,0,960,961,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,963,965,5,121,
  	0,0,964,963,1,0,0,0,964,965,1,0,0,0,965,147,1,0,0,0,966,967,5,83,0,0,
  	967,968,3,110,55,0,968,969,5,84,0,0,969,971,3,110,55,0,970,972,5,121,
  	0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,974,5,3,0,0,974,
  	149,1,0,0,0,975,977,5,87,0,0,976,978,5,157,0,0,977,976,1,0,0,0,977,978,
  	1,0,0,0,978,981,1,0,0,0,979,980,5,88,0,0,980,982,5,157,0,0,981,979,1,
  	0,0,0,981,982,1,0,0,0,982,151,1,0,0,0,983,988,3,154,77,0,984,988,3,156,
  	78,0,985,988,3,158,79,0,986,988,3,160,80,0,987,983,1,0,0,0,987,984,1,
  	0,0,0,987,985,1,0,0,0,987,986,1,0,0,0,988,153,1,0,0,0,989,990,3,164,82,
  	0,990,992,5,121,0,0,991,993,3,172,86,0,992,991,1,0,0,0,992,993,1,0,0,
  	0,993,995,1,0,0,0,994,996,3,12,6,0,995,994,1,0,0,0,995,996,1,0,0,0,996,
  	997,1,0,0,0,997,998,3,22,11,0,998,999,5,121,0,0,999,155,1,0,0,0,1000,
  	1001,3,162,81,0,1001,1003,5,121,0,0,1002,1004,3,172,86,0,1003,1002,1,
  	0,0,0,1003,1004,1,0,0,0,1004,1006,1,0,0,0,1005,1007,3,12,6,0,1006,1005,
  	1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1009,3,22,11,0,1009,
  	1010,5,121,0,0,1010,157,1,0,0,0,1011,1012,3,184,92,0,1012,1014,5,121,
  	0,0,1013,1015,3,172,86,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1017,
  	1,0,0,0,1016,1018,3,12,6,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,
  	1,0,0,0,1019,1020,3,22,11,0,1020,1021,5,121,0,0,1021,159,1,0,0,0,1022,
  	1023,3,186,93,0,1023,1025,5,121,0,0,1024,1026,3,172,86,0,1025,1024,1,
  	0,0,0,1025,1026,1,0,0,0,1026,1028,1,0,0,0,1027,1029,3,12,6,0,1028,1027,
  	1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1031,3,22,11,0,1031,
  	1032,5,121,0,0,1032,161,1,0,0,0,1033,1034,5,66,0,0,1034,1036,5,157,0,
  	0,1035,1037,3,166,83,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1038,
  	1,0,0,0,1038,1041,5,130,0,0,1039,1042,3,54,27,0,1040,1042,5,37,0,0,1041,
  	1039,1,0,0,0,1041,1040,1,0,0,0,1042,163,1,0,0,0,1043,1044,5,67,0,0,1044,
  	1046,5,157,0,0,1045,1047,3,166,83,0,1046,1045,1,0,0,0,1046,1047,1,0,0,
  	0,1047,165,1,0,0,0,1048,1050,5,124,0,0,1049,1051,3,168,84,0,1050,1049,
  	1,0,0,0,1050,1051,1,0,0,0,1051,1056,1,0,0,0,1052,1053,5,128,0,0,1053,
  	1055,3,168,84,0,1054,1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,
  	1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,1056,1,0,0,0,1059,1060,5,125,
  	0,0,1060,167,1,0,0,0,1061,1063,7,3,0,0,1062,1061,1,0,0,0,1062,1063,1,
  	0,0,0,1063,1064,1,0,0,0,1064,1065,3,170,85,0,1065,169,1,0,0,0,1066,1077,
  	3,218,109,0,1067,1075,5,130,0,0,1068,1069,5,41,0,0,1069,1071,5,17,0,0,
  	1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1076,3,54,
  	27,0,1073,1076,5,37,0,0,1074,1076,5,45,0,0,1075,1070,1,0,0,0,1075,1073,
  	1,0,0,0,1075,1074,1,0,0,0,1076,1078,1,0,0,0,1077,1067,1,0,0,0,1077,1078,
  	1,0,0,0,1078,1087,1,0,0,0,1079,1080,5,157,0,0,1080,1081,5,130,0,0,1081,
  	1084,3,54,27,0,1082,1083,5,129,0,0,1083,1085,3,236,118,0,1084,1082,1,
  	0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,1066,1,0,0,0,1086,1079,
  	1,0,0,0,1087,171,1,0,0,0,1088,1111,5,104,0,0,1089,1111,5,105,0,0,1090,
  	1111,5,106,0,0,1091,1111,5,47,0,0,1092,1111,5,107,0,0,1093,1111,3,174,
  	87,0,1094,1111,5,145,0,0,1095,1111,5,109,0,0,1096,1111,5,110,0,0,1097,
  	1111,5,146,0,0,1098,1111,5,147,0,0,1099,1100,5,111,0,0,1100,1111,3,236,
  	118,0,1101,1111,5,112,0,0,1102,1111,5,113,0,0,1103,1111,5,114,0,0,1104,
  	1111,5,115,0,0,1105,1111,5,116,0,0,1106,1111,5,117,0,0,1107,1111,5,118,
  	0,0,1108,1111,5,119,0,0,1109,1111,5,65,0,0,1110,1088,1,0,0,0,1110,1089,
  	1,0,0,0,1110,1090,1,0,0,0,1110,1091,1,0,0,0,1110,1092,1,0,0,0,1110,1093,
  	1,0,0,0,1110,1094,1,0,0,0,1110,1095,1,0,0,0,1110,1096,1,0,0,0,1110,1097,
  	1,0,0,0,1110,1098,1,0,0,0,1110,1099,1,0,0,0,1110,1101,1,0,0,0,1110,1102,
  	1,0,0,0,1110,1103,1,0,0,0,1110,1104,1,0,0,0,1110,1105,1,0,0,0,1110,1106,
  	1,0,0,0,1110,1107,1,0,0,0,1110,1108,1,0,0,0,1110,1109,1,0,0,0,1111,173,
  	1,0,0,0,1112,1123,5,108,0,0,1113,1121,3,232,116,0,1114,1118,5,102,0,0,
  	1115,1117,5,157,0,0,1116,1115,1,0,0,0,1117,1120,1,0,0,0,1118,1116,1,0,
  	0,0,1118,1119,1,0,0,0,1119,1122,1,0,0,0,1120,1118,1,0,0,0,1121,1114,1,
  	0,0,0,1121,1122,1,0,0,0,1122,1124,1,0,0,0,1123,1113,1,0,0,0,1123,1124,
  	1,0,0,0,1124,175,1,0,0,0,1125,1127,5,46,0,0,1126,1128,3,178,89,0,1127,
  	1126,1,0,0,0,1127,1128,1,0,0,0,1128,1130,1,0,0,0,1129,1131,3,188,94,0,
  	1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1133,1,0,0,0,1132,1134,3,180,
  	90,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1136,
  	5,3,0,0,1136,177,1,0,0,0,1137,1138,5,124,0,0,1138,1139,3,222,111,0,1139,
  	1140,5,125,0,0,1140,179,1,0,0,0,1141,1148,3,182,91,0,1142,1143,5,121,
  	0,0,1143,1146,5,47,0,0,1144,1145,5,121,0,0,1145,1147,5,65,0,0,1146,1144,
  	1,0,0,0,1146,1147,1,0,0,0,1147,1149,1,0,0,0,1148,1142,1,0,0,0,1148,1149,
  	1,0,0,0,1149,1150,1,0,0,0,1150,1151,5,121,0,0,1151,1153,1,0,0,0,1152,
  	1141,1,0,0,0,1153,1154,1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,
  	181,1,0,0,0,1156,1158,5,16,0,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,
  	1161,1,0,0,0,1159,1162,3,164,82,0,1160,1162,3,162,81,0,1161,1159,1,0,
  	0,0,1161,1160,1,0,0,0,1162,1166,1,0,0,0,1163,1166,3,184,92,0,1164,1166,
  	3,186,93,0,1165,1157,1,0,0,0,1165,1163,1,0,0,0,1165,1164,1,0,0,0,1166,
  	183,1,0,0,0,1167,1168,5,48,0,0,1168,1170,5,157,0,0,1169,1171,3,166,83,
  	0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,185,1,0,0,0,1172,1173,5,49,
  	0,0,1173,1175,5,157,0,0,1174,1176,3,166,83,0,1175,1174,1,0,0,0,1175,1176,
  	1,0,0,0,1176,187,1,0,0,0,1177,1178,3,218,109,0,1178,1179,5,130,0,0,1179,
  	1180,3,48,24,0,1180,1181,1,0,0,0,1181,1182,5,121,0,0,1182,189,1,0,0,0,
  	1183,1184,5,10,0,0,1184,1187,3,112,56,0,1185,1186,5,50,0,0,1186,1188,
  	3,112,56,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,
  	1190,5,3,0,0,1190,1197,1,0,0,0,1191,1192,5,71,0,0,1192,1193,3,112,56,
  	0,1193,1194,5,3,0,0,1194,1197,1,0,0,0,1195,1197,5,3,0,0,1196,1183,1,0,
  	0,0,1196,1191,1,0,0,0,1196,1195,1,0,0,0,1197,191,1,0,0,0,1198,1200,5,
  	16,0,0,1199,1201,3,194,97,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,
  	1207,1,0,0,0,1202,1206,3,196,98,0,1203,1206,3,198,99,0,1204,1206,3,200,
  	100,0,1205,1202,1,0,0,0,1205,1203,1,0,0,0,1205,1204,1,0,0,0,1206,1209,
  	1,0,0,0,1207,1205,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,1209,1207,
  	1,0,0,0,1210,1211,5,3,0,0,1211,193,1,0,0,0,1212,1213,5,124,0,0,1213,1214,
  	3,218,109,0,1214,1215,5,125,0,0,1215,195,1,0,0,0,1216,1218,3,252,126,
  	0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1220,1,0,0,0,1219,1221,3,188,
  	94,0,1220,1219,1,0,0,0,1221,1222,1,0,0,0,1222,1220,1,0,0,0,1222,1223,
  	1,0,0,0,1223,197,1,0,0,0,1224,1226,3,252,126,0,1225,1224,1,0,0,0,1225,
  	1226,1,0,0,0,1226,1228,1,0,0,0,1227,1229,3,180,90,0,1228,1227,1,0,0,0,
  	1229,1230,1,0,0,0,1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,199,1,0,0,
  	0,1232,1234,3,252,126,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1236,
  	1,0,0,0,1235,1237,3,202,101,0,1236,1235,1,0,0,0,1237,1238,1,0,0,0,1238,
  	1236,1,0,0,0,1238,1239,1,0,0,0,1239,201,1,0,0,0,1240,1241,5,55,0,0,1241,
  	1243,5,157,0,0,1242,1244,3,204,102,0,1243,1242,1,0,0,0,1243,1244,1,0,
  	0,0,1244,1246,1,0,0,0,1245,1247,3,208,104,0,1246,1245,1,0,0,0,1246,1247,
  	1,0,0,0,1247,1249,1,0,0,0,1248,1250,3,12,6,0,1249,1248,1,0,0,0,1249,1250,
  	1,0,0,0,1250,203,1,0,0,0,1251,1253,3,206,103,0,1252,1251,1,0,0,0,1252,
  	1253,1,0,0,0,1253,1254,1,0,0,0,1254,1255,5,130,0,0,1255,1256,5,157,0,
  	0,1256,205,1,0,0,0,1257,1258,5,126,0,0,1258,1259,3,218,109,0,1259,1260,
  	5,130,0,0,1260,1261,3,224,112,0,1261,1265,1,0,0,0,1262,1264,5,121,0,0,
  	1263,1262,1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,
  	0,1266,1268,1,0,0,0,1267,1265,1,0,0,0,1268,1269,5,127,0,0,1269,207,1,
  	0,0,0,1270,1271,5,56,0,0,1271,1289,3,236,118,0,1272,1273,5,57,0,0,1273,
  	1289,5,157,0,0,1274,1275,5,58,0,0,1275,1289,5,157,0,0,1276,1279,5,59,
  	0,0,1277,1280,5,157,0,0,1278,1280,3,236,118,0,1279,1277,1,0,0,0,1279,
  	1278,1,0,0,0,1280,1289,1,0,0,0,1281,1282,5,60,0,0,1282,1285,3,236,118,
  	0,1283,1285,5,61,0,0,1284,1281,1,0,0,0,1284,1283,1,0,0,0,1285,1289,1,
  	0,0,0,1286,1287,5,62,0,0,1287,1289,3,224,112,0,1288,1270,1,0,0,0,1288,
  	1272,1,0,0,0,1288,1274,1,0,0,0,1288,1276,1,0,0,0,1288,1284,1,0,0,0,1288,
  	1286,1,0,0,0,1289,209,1,0,0,0,1290,1292,5,8,0,0,1291,1293,3,212,106,0,
  	1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,0,0,0,1294,1296,3,198,
  	99,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,0,0,1297,1299,
  	3,200,100,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,0,1300,
  	1301,5,3,0,0,1301,211,1,0,0,0,1302,1303,5,124,0,0,1303,1304,5,157,0,0,
  	1304,1305,5,125,0,0,1305,213,1,0,0,0,1306,1308,5,4,0,0,1307,1309,3,218,
  	109,0,1308,1307,1,0,0,0,1309,1310,1,0,0,0,1310,1308,1,0,0,0,1310,1311,
  	1,0,0,0,1311,1312,1,0,0,0,1312,1313,5,121,0,0,1313,215,1,0,0,0,1314,1316,
  	5,5,0,0,1315,1317,3,218,109,0,1316,1315,1,0,0,0,1317,1318,1,0,0,0,1318,
  	1316,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,5,121,0,0,
  	1321,217,1,0,0,0,1322,1327,5,157,0,0,1323,1324,5,128,0,0,1324,1326,5,
  	157,0,0,1325,1323,1,0,0,0,1326,1329,1,0,0,0,1327,1325,1,0,0,0,1327,1328,
  	1,0,0,0,1328,219,1,0,0,0,1329,1327,1,0,0,0,1330,1333,3,222,111,0,1331,
  	1332,5,128,0,0,1332,1334,3,222,111,0,1333,1331,1,0,0,0,1334,1335,1,0,
  	0,0,1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,221,1,0,0,0,1337,1345,3,
  	228,114,0,1338,1339,5,122,0,0,1339,1341,5,157,0,0,1340,1342,5,131,0,0,
  	1341,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1341,1,0,0,0,1343,1344,1,0,0,
  	0,1344,1346,1,0,0,0,1345,1338,1,0,0,0,1345,1346,1,0,0,0,1346,223,1,0,
  	0,0,1347,1348,3,228,114,0,1348,1349,5,122,0,0,1349,1351,1,0,0,0,1350,
  	1347,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,5,157,0,0,
  	1353,225,1,0,0,0,1354,1355,5,168,0,0,1355,227,1,0,0,0,1356,1361,5,157,
  	0,0,1357,1358,5,157,0,0,1358,1359,5,122,0,0,1359,1361,5,157,0,0,1360,
  	1356,1,0,0,0,1360,1357,1,0,0,0,1361,229,1,0,0,0,1362,1363,7,4,0,0,1363,
  	231,1,0,0,0,1364,1365,5,168,0,0,1365,233,1,0,0,0,1366,1367,7,5,0,0,1367,
  	235,1,0,0,0,1368,1376,3,234,117,0,1369,1376,3,232,116,0,1370,1376,3,226,
  	113,0,1371,1372,3,234,117,0,1372,1373,3,250,125,0,1373,1374,3,234,117,
  	0,1374,1376,1,0,0,0,1375,1368,1,0,0,0,1375,1369,1,0,0,0,1375,1370,1,0,
  	0,0,1375,1371,1,0,0,0,1376,237,1,0,0,0,1377,1378,7,6,0,0,1378,239,1,0,
  	0,0,1379,1380,7,7,0,0,1380,241,1,0,0,0,1381,1382,7,8,0,0,1382,243,1,0,
  	0,0,1383,1384,7,9,0,0,1384,245,1,0,0,0,1385,1386,7,10,0,0,1386,247,1,
  	0,0,0,1387,1388,7,11,0,0,1388,249,1,0,0,0,1389,1390,7,12,0,0,1390,251,
  	1,0,0,0,1391,1392,7,13,0,0,1392,253,1,0,0,0,173,258,266,270,275,284,296,
  	299,308,313,327,332,339,344,349,351,355,360,364,374,384,392,394,401,412,
  	419,427,429,437,442,446,451,455,457,462,470,481,498,503,511,516,520,525,
  	533,541,552,555,562,564,573,578,583,587,591,598,601,604,610,615,624,632,
  	638,646,652,657,661,665,673,681,685,688,696,704,707,715,724,732,751,761,
  	763,772,780,787,793,797,804,811,820,825,831,838,850,860,865,868,877,886,
  	891,896,926,936,945,953,960,964,971,977,981,987,992,995,1003,1006,1014,
  	1017,1025,1028,1036,1041,1046,1050,1056,1062,1070,1075,1077,1084,1086,
  	1110,1118,1121,1123,1127,1130,1133,1146,1148,1154,1157,1161,1165,1170,
  	1175,1187,1196,1200,1205,1207,1217,1222,1225,1230,1233,1238,1243,1246,
  	1249,1252,1265,1279,1284,1288,1292,1295,1298,1310,1318,1327,1335,1343,
  	1345,1350,1360,1375
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  objectpascalparserParserStaticData = staticData.release();
}

}

ObjectPascalParser::ObjectPascalParser(TokenStream *input) : ObjectPascalParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ObjectPascalParser::ObjectPascalParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ObjectPascalParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *objectpascalparserParserStaticData->atn, objectpascalparserParserStaticData->decisionToDFA, objectpascalparserParserStaticData->sharedContextCache, options);
}

ObjectPascalParser::~ObjectPascalParser() {
  delete _interpreter;
}

const atn::ATN& ObjectPascalParser::getATN() const {
  return *objectpascalparserParserStaticData->atn;
}

std::string ObjectPascalParser::getGrammarFileName() const {
  return "ObjectPascalParser.g4";
}

const std::vector<std::string>& ObjectPascalParser::getRuleNames() const {
  return objectpascalparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& ObjectPascalParser::getVocabulary() const {
  return objectpascalparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ObjectPascalParser::getSerializedATN() const {
  return objectpascalparserParserStaticData->serializedATN;
}


//----------------- GoalContext ------------------------------------------------------------------

ObjectPascalParser::GoalContext::GoalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::GoalContext::program() {
  return getRuleContext<ObjectPascalParser::ProgramContext>(0);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::GoalContext::package() {
  return getRuleContext<ObjectPascalParser::PackageContext>(0);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::GoalContext::library() {
  return getRuleContext<ObjectPascalParser::LibraryContext>(0);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::GoalContext::unit() {
  return getRuleContext<ObjectPascalParser::UnitContext>(0);
}


size_t ObjectPascalParser::GoalContext::getRuleIndex() const {
  return ObjectPascalParser::RuleGoal;
}


std::any ObjectPascalParser::GoalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitGoal(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::GoalContext* ObjectPascalParser::goal() {
  GoalContext *_localctx = _tracker.createInstance<GoalContext>(_ctx, getState());
  enterRule(_localctx, 0, ObjectPascalParser::RuleGoal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(258);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROGRAM: {
        enterOuterAlt(_localctx, 1);
        setState(254);
        program();
        break;
      }

      case ObjectPascalParser::PACKAGE: {
        enterOuterAlt(_localctx, 2);
        setState(255);
        package();
        break;
      }

      case ObjectPascalParser::LIBRARY: {
        enterOuterAlt(_localctx, 3);
        setState(256);
        library();
        break;
      }

      case ObjectPascalParser::UNIT: {
        enterOuterAlt(_localctx, 4);
        setState(257);
        unit();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

ObjectPascalParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::PROGRAM() {
  return getToken(ObjectPascalParser::PROGRAM, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::ProgramContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ProgramContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProgramContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ProgramContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ProgramContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ProgramContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ProgramContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProgram;
}


std::any ObjectPascalParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProgramContext* ObjectPascalParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, ObjectPascalParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(260);
    match(ObjectPascalParser::PROGRAM);
    setState(261);
    match(ObjectPascalParser::Identifier);
    setState(266);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(262);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(263);
      identList();
      setState(264);
      match(ObjectPascalParser::RIGHT_PAREN);
    }
    setState(268);
    match(ObjectPascalParser::SEMI);
    setState(270);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(269);
      usesClause();
    }
    setState(275);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(272);
      declSection();
      setState(277);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(278);
    compoundStmt();
    setState(279);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitContext ------------------------------------------------------------------

ObjectPascalParser::UnitContext::UnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UnitContext::UNIT() {
  return getToken(ObjectPascalParser::UNIT, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::UnitContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::UnitContext::interfaceSection() {
  return getRuleContext<ObjectPascalParser::InterfaceSectionContext>(0);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::UnitContext::implementationSection() {
  return getRuleContext<ObjectPascalParser::ImplementationSectionContext>(0);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::UnitContext::initSection() {
  return getRuleContext<ObjectPascalParser::InitSectionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UnitContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::UnitContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::UnitContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnit;
}


std::any ObjectPascalParser::UnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnit(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitContext* ObjectPascalParser::unit() {
  UnitContext *_localctx = _tracker.createInstance<UnitContext>(_ctx, getState());
  enterRule(_localctx, 4, ObjectPascalParser::RuleUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(281);
    match(ObjectPascalParser::UNIT);
    setState(282);
    qualId();
    setState(284);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(283);
      portabilityDirective();
    }
    setState(286);
    match(ObjectPascalParser::SEMI);
    setState(287);
    interfaceSection();
    setState(288);
    implementationSection();
    setState(289);
    initSection();
    setState(290);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageContext ------------------------------------------------------------------

ObjectPascalParser::PackageContext::PackageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PackageContext::PACKAGE() {
  return getToken(ObjectPascalParser::PACKAGE, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::PackageContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::PackageContext::requiresClause() {
  return getRuleContext<ObjectPascalParser::RequiresClauseContext>(0);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::PackageContext::containsClause() {
  return getRuleContext<ObjectPascalParser::ContainsClauseContext>(0);
}


size_t ObjectPascalParser::PackageContext::getRuleIndex() const {
  return ObjectPascalParser::RulePackage;
}


std::any ObjectPascalParser::PackageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPackage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PackageContext* ObjectPascalParser::package() {
  PackageContext *_localctx = _tracker.createInstance<PackageContext>(_ctx, getState());
  enterRule(_localctx, 6, ObjectPascalParser::RulePackage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(292);
    match(ObjectPascalParser::PACKAGE);
    setState(293);
    match(ObjectPascalParser::Identifier);
    setState(294);
    match(ObjectPascalParser::SEMI);
    setState(296);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::REQUIRES) {
      setState(295);
      requiresClause();
    }
    setState(299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CONTAINS) {
      setState(298);
      containsClause();
    }
    setState(301);
    match(ObjectPascalParser::END);
    setState(302);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LibraryContext ------------------------------------------------------------------

ObjectPascalParser::LibraryContext::LibraryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::LibraryContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

tree::TerminalNode* ObjectPascalParser::LibraryContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::LibraryContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::LibraryContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::LibraryContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::LibraryContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLibrary;
}


std::any ObjectPascalParser::LibraryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLibrary(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LibraryContext* ObjectPascalParser::library() {
  LibraryContext *_localctx = _tracker.createInstance<LibraryContext>(_ctx, getState());
  enterRule(_localctx, 8, ObjectPascalParser::RuleLibrary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(304);
    match(ObjectPascalParser::LIBRARY);
    setState(305);
    match(ObjectPascalParser::Identifier);
    setState(306);
    match(ObjectPascalParser::SEMI);
    setState(308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(307);
      usesClause();
    }
    setState(313);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(310);
      declSection();
      setState(315);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(316);
    compoundStmt();
    setState(317);
    match(ObjectPascalParser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsesClauseContext ------------------------------------------------------------------

ObjectPascalParser::UsesClauseContext::UsesClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::USES() {
  return getToken(ObjectPascalParser::USES, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::UsesClauseContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::UsesClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::UsesClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUsesClause;
}


std::any ObjectPascalParser::UsesClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUsesClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::usesClause() {
  UsesClauseContext *_localctx = _tracker.createInstance<UsesClauseContext>(_ctx, getState());
  enterRule(_localctx, 10, ObjectPascalParser::RuleUsesClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(319);
    match(ObjectPascalParser::USES);
    setState(320);
    qualIdList();
    setState(321);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PortabilityDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::PortabilityDirectiveContext::PortabilityDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::PLATFORM() {
  return getToken(ObjectPascalParser::PLATFORM, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::DEPRECATED() {
  return getToken(ObjectPascalParser::DEPRECATED, 0);
}

tree::TerminalNode* ObjectPascalParser::PortabilityDirectiveContext::LIBRARY() {
  return getToken(ObjectPascalParser::LIBRARY, 0);
}


size_t ObjectPascalParser::PortabilityDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RulePortabilityDirective;
}


std::any ObjectPascalParser::PortabilityDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPortabilityDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::portabilityDirective() {
  PortabilityDirectiveContext *_localctx = _tracker.createInstance<PortabilityDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 12, ObjectPascalParser::RulePortabilityDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(323);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceSectionContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceSectionContext::InterfaceSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceSectionContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::InterfaceSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::InterfaceDeclContext *> ObjectPascalParser::InterfaceSectionContext::interfaceDecl() {
  return getRuleContexts<ObjectPascalParser::InterfaceDeclContext>();
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::InterfaceSectionContext::interfaceDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::InterfaceDeclContext>(i);
}


size_t ObjectPascalParser::InterfaceSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceSection;
}


std::any ObjectPascalParser::InterfaceSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceSectionContext* ObjectPascalParser::interfaceSection() {
  InterfaceSectionContext *_localctx = _tracker.createInstance<InterfaceSectionContext>(_ctx, getState());
  enterRule(_localctx, 14, ObjectPascalParser::RuleInterfaceSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(325);
    match(ObjectPascalParser::INTERFACE);
    setState(327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(326);
      usesClause();
    }
    setState(332);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::TYPE_ - 14))
      | (1ULL << (ObjectPascalParser::VAR - 14))
      | (1ULL << (ObjectPascalParser::FUNCTION - 14))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 14)))) != 0)) {
      setState(329);
      interfaceDecl();
      setState(334);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceDeclContext::InterfaceDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::InterfaceDeclContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::InterfaceDeclContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::InterfaceDeclContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::InterfaceDeclContext::exportedHeading() {
  return getRuleContext<ObjectPascalParser::ExportedHeadingContext>(0);
}


size_t ObjectPascalParser::InterfaceDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceDecl;
}


std::any ObjectPascalParser::InterfaceDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceDeclContext* ObjectPascalParser::interfaceDecl() {
  InterfaceDeclContext *_localctx = _tracker.createInstance<InterfaceDeclContext>(_ctx, getState());
  enterRule(_localctx, 16, ObjectPascalParser::RuleInterfaceDecl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(339);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 1);
        setState(335);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 2);
        setState(336);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR: {
        enterOuterAlt(_localctx, 3);
        setState(337);
        varSection();
        break;
      }

      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 4);
        setState(338);
        exportedHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportedHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ExportedHeadingContext::ExportedHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ExportedHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExportedHeadingContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ExportedHeadingContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ExportedHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}


size_t ObjectPascalParser::ExportedHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportedHeading;
}


std::any ObjectPascalParser::ExportedHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportedHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportedHeadingContext* ObjectPascalParser::exportedHeading() {
  ExportedHeadingContext *_localctx = _tracker.createInstance<ExportedHeadingContext>(_ctx, getState());
  enterRule(_localctx, 18, ObjectPascalParser::RuleExportedHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(351);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(341);
        procedureHeading();
        setState(342);
        match(ObjectPascalParser::SEMI);
        setState(344);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 47) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
          | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
          | (1ULL << (ObjectPascalParser::CDECL - 47))
          | (1ULL << (ObjectPascalParser::REGISTER - 47))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
          | (1ULL << (ObjectPascalParser::EXPORT - 47))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
          | (1ULL << (ObjectPascalParser::FAR - 47))
          | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
          | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
          | (1ULL << (ObjectPascalParser::PASCAL - 111))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
          | (1ULL << (ObjectPascalParser::SAFECALL - 111))
          | (1ULL << (ObjectPascalParser::STDCALL - 111))
          | (1ULL << (ObjectPascalParser::VARARGS - 111))
          | (1ULL << (ObjectPascalParser::LOCAL - 111))
          | (1ULL << (ObjectPascalParser::NEAR - 111))
          | (1ULL << (ObjectPascalParser::INLINE - 111))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
          setState(343);
          directive();
        }
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(346);
        functionHeading();
        setState(347);
        match(ObjectPascalParser::SEMI);
        setState(349);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 47) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
          | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
          | (1ULL << (ObjectPascalParser::CDECL - 47))
          | (1ULL << (ObjectPascalParser::REGISTER - 47))
          | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
          | (1ULL << (ObjectPascalParser::EXPORT - 47))
          | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
          | (1ULL << (ObjectPascalParser::FAR - 47))
          | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
          | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
          | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
          | (1ULL << (ObjectPascalParser::PASCAL - 111))
          | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
          | (1ULL << (ObjectPascalParser::SAFECALL - 111))
          | (1ULL << (ObjectPascalParser::STDCALL - 111))
          | (1ULL << (ObjectPascalParser::VARARGS - 111))
          | (1ULL << (ObjectPascalParser::LOCAL - 111))
          | (1ULL << (ObjectPascalParser::NEAR - 111))
          | (1ULL << (ObjectPascalParser::INLINE - 111))
          | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
          setState(348);
          directive();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImplementationSectionContext ------------------------------------------------------------------

ObjectPascalParser::ImplementationSectionContext::ImplementationSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ImplementationSectionContext::IMPLEMENTATION() {
  return getToken(ObjectPascalParser::IMPLEMENTATION, 0);
}

ObjectPascalParser::UsesClauseContext* ObjectPascalParser::ImplementationSectionContext::usesClause() {
  return getRuleContext<ObjectPascalParser::UsesClauseContext>(0);
}

std::vector<ObjectPascalParser::DeclSectionContext *> ObjectPascalParser::ImplementationSectionContext::declSection() {
  return getRuleContexts<ObjectPascalParser::DeclSectionContext>();
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::ImplementationSectionContext::declSection(size_t i) {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(i);
}


size_t ObjectPascalParser::ImplementationSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleImplementationSection;
}


std::any ObjectPascalParser::ImplementationSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitImplementationSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ImplementationSectionContext* ObjectPascalParser::implementationSection() {
  ImplementationSectionContext *_localctx = _tracker.createInstance<ImplementationSectionContext>(_ctx, getState());
  enterRule(_localctx, 20, ObjectPascalParser::RuleImplementationSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(353);
    match(ObjectPascalParser::IMPLEMENTATION);
    setState(355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::USES) {
      setState(354);
      usesClause();
    }
    setState(360);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(357);
      declSection();
      setState(362);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

ObjectPascalParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::BlockContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::BlockContext::declSection() {
  return getRuleContext<ObjectPascalParser::DeclSectionContext>(0);
}


size_t ObjectPascalParser::BlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleBlock;
}


std::any ObjectPascalParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 22, ObjectPascalParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(364);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 13) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 13)) & ((1ULL << (ObjectPascalParser::LABEL - 13))
      | (1ULL << (ObjectPascalParser::CONST - 13))
      | (1ULL << (ObjectPascalParser::TYPE_ - 13))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 13))
      | (1ULL << (ObjectPascalParser::VAR - 13))
      | (1ULL << (ObjectPascalParser::FUNCTION - 13))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 13)))) != 0)) {
      setState(363);
      declSection();
    }
    setState(366);
    compoundStmt();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsStmtContext ------------------------------------------------------------------

ObjectPascalParser::ExportsStmtContext::ExportsStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExportsStmtContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

std::vector<ObjectPascalParser::ExportsItemContext *> ObjectPascalParser::ExportsStmtContext::exportsItem() {
  return getRuleContexts<ObjectPascalParser::ExportsItemContext>();
}

ObjectPascalParser::ExportsItemContext* ObjectPascalParser::ExportsStmtContext::exportsItem(size_t i) {
  return getRuleContext<ObjectPascalParser::ExportsItemContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExportsStmtContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExportsStmtContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExportsStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportsStmt;
}


std::any ObjectPascalParser::ExportsStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportsStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportsStmtContext* ObjectPascalParser::exportsStmt() {
  ExportsStmtContext *_localctx = _tracker.createInstance<ExportsStmtContext>(_ctx, getState());
  enterRule(_localctx, 24, ObjectPascalParser::RuleExportsStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(368);
    match(ObjectPascalParser::EXPORT);
    setState(369);
    exportsItem();
    setState(374);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(370);
      match(ObjectPascalParser::COMMA);
      setState(371);
      exportsItem();
      setState(376);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExportsItemContext ------------------------------------------------------------------

ObjectPascalParser::ExportsItemContext::ExportsItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExportsItemContext::SINGLE_QUOTE() {
  return getTokens(ObjectPascalParser::SINGLE_QUOTE);
}

tree::TerminalNode* ObjectPascalParser::ExportsItemContext::SINGLE_QUOTE(size_t i) {
  return getToken(ObjectPascalParser::SINGLE_QUOTE, i);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ExportsItemContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ExportsItemContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExportsItem;
}


std::any ObjectPascalParser::ExportsItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExportsItem(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExportsItemContext* ObjectPascalParser::exportsItem() {
  ExportsItemContext *_localctx = _tracker.createInstance<ExportsItemContext>(_ctx, getState());
  enterRule(_localctx, 26, ObjectPascalParser::RuleExportsItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(394);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(377);
        match(ObjectPascalParser::Identifier);
        setState(384);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::NAME: {
            setState(378);
            match(ObjectPascalParser::NAME);
            break;
          }

          case ObjectPascalParser::INDEX: {
            setState(379);
            match(ObjectPascalParser::INDEX);
            setState(380);
            match(ObjectPascalParser::SINGLE_QUOTE);
            setState(381);
            constExpr();
            setState(382);
            match(ObjectPascalParser::SINGLE_QUOTE);
            break;
          }

          case ObjectPascalParser::EOF:
          case ObjectPascalParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case ObjectPascalParser::EOF:
      case ObjectPascalParser::INDEX:
      case ObjectPascalParser::NAME:
      case ObjectPascalParser::COMMA: {
        enterOuterAlt(_localctx, 2);
        setState(392);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::INDEX: {
            setState(386);
            match(ObjectPascalParser::INDEX);
            break;
          }

          case ObjectPascalParser::NAME: {
            setState(387);
            match(ObjectPascalParser::NAME);
            setState(388);
            match(ObjectPascalParser::SINGLE_QUOTE);
            setState(389);
            constExpr();
            setState(390);
            match(ObjectPascalParser::SINGLE_QUOTE);
            break;
          }

          case ObjectPascalParser::EOF:
          case ObjectPascalParser::COMMA: {
            break;
          }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::DeclSectionContext::DeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::DeclSectionContext::labelDeclSection() {
  return getRuleContext<ObjectPascalParser::LabelDeclSectionContext>(0);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::DeclSectionContext::constSection() {
  return getRuleContext<ObjectPascalParser::ConstSectionContext>(0);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::DeclSectionContext::typeSection() {
  return getRuleContext<ObjectPascalParser::TypeSectionContext>(0);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::DeclSectionContext::varSection() {
  return getRuleContext<ObjectPascalParser::VarSectionContext>(0);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::DeclSectionContext::procedureDeclSection() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclSectionContext>(0);
}


size_t ObjectPascalParser::DeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDeclSection;
}


std::any ObjectPascalParser::DeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DeclSectionContext* ObjectPascalParser::declSection() {
  DeclSectionContext *_localctx = _tracker.createInstance<DeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 28, ObjectPascalParser::RuleDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(401);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(396);
        labelDeclSection();
        break;
      }

      case ObjectPascalParser::CONST: {
        enterOuterAlt(_localctx, 2);
        setState(397);
        constSection();
        break;
      }

      case ObjectPascalParser::TYPE_: {
        enterOuterAlt(_localctx, 3);
        setState(398);
        typeSection();
        break;
      }

      case ObjectPascalParser::VAR: {
        enterOuterAlt(_localctx, 4);
        setState(399);
        varSection();
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR:
      case ObjectPascalParser::DESTRUCTOR:
      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 5);
        setState(400);
        procedureDeclSection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::LabelDeclSectionContext::LabelDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelDeclSectionContext::LABEL() {
  return getToken(ObjectPascalParser::LABEL, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::LabelDeclSectionContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}


size_t ObjectPascalParser::LabelDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelDeclSection;
}


std::any ObjectPascalParser::LabelDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelDeclSectionContext* ObjectPascalParser::labelDeclSection() {
  LabelDeclSectionContext *_localctx = _tracker.createInstance<LabelDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 30, ObjectPascalParser::RuleLabelDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(403);
    match(ObjectPascalParser::LABEL);
    setState(404);
    labelId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstSectionContext ------------------------------------------------------------------

ObjectPascalParser::ConstSectionContext::ConstSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

std::vector<ObjectPascalParser::ConstantDeclContext *> ObjectPascalParser::ConstSectionContext::constantDecl() {
  return getRuleContexts<ObjectPascalParser::ConstantDeclContext>();
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::ConstSectionContext::constantDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstantDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ConstSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ConstSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstSection;
}


std::any ObjectPascalParser::ConstSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstSectionContext* ObjectPascalParser::constSection() {
  ConstSectionContext *_localctx = _tracker.createInstance<ConstSectionContext>(_ctx, getState());
  enterRule(_localctx, 32, ObjectPascalParser::RuleConstSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(406);
    match(ObjectPascalParser::CONST);
    setState(412);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Identifier) {
      setState(407);
      constantDecl();
      setState(408);
      match(ObjectPascalParser::SEMI);
      setState(414);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclContext ------------------------------------------------------------------

ObjectPascalParser::ConstantDeclContext::ConstantDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ConstantDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ConstantDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ConstantDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ConstantDeclContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ConstantDeclContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::ConstantDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstantDecl;
}


std::any ObjectPascalParser::ConstantDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstantDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstantDeclContext* ObjectPascalParser::constantDecl() {
  ConstantDeclContext *_localctx = _tracker.createInstance<ConstantDeclContext>(_ctx, getState());
  enterRule(_localctx, 34, ObjectPascalParser::RuleConstantDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(429);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(415);
      match(ObjectPascalParser::Identifier);
      setState(416);
      match(ObjectPascalParser::ASSIGN);
      setState(417);
      constExpr();
      setState(419);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(418);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(421);
      match(ObjectPascalParser::Identifier);
      setState(422);
      match(ObjectPascalParser::COLON);
      setState(423);
      typeId();
      setState(424);
      match(ObjectPascalParser::ASSIGN);
      setState(425);
      typedConstant();
      setState(427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(426);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSectionContext ------------------------------------------------------------------

ObjectPascalParser::TypeSectionContext::TypeSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

std::vector<ObjectPascalParser::TypeDeclContext *> ObjectPascalParser::TypeSectionContext::typeDecl() {
  return getRuleContexts<ObjectPascalParser::TypeDeclContext>();
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::TypeSectionContext::typeDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TypeSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TypeSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TypeSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeSection;
}


std::any ObjectPascalParser::TypeSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeSectionContext* ObjectPascalParser::typeSection() {
  TypeSectionContext *_localctx = _tracker.createInstance<TypeSectionContext>(_ctx, getState());
  enterRule(_localctx, 36, ObjectPascalParser::RuleTypeSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(431);
    match(ObjectPascalParser::TYPE_);
    setState(435); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(432);
      typeDecl();
      setState(433);
      match(ObjectPascalParser::SEMI);
      setState(437); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclContext ------------------------------------------------------------------

ObjectPascalParser::TypeDeclContext::TypeDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::TypeDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeDeclContext::TYPE_() {
  return getToken(ObjectPascalParser::TYPE_, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::TypeDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::TypeDeclContext::restrictedType() {
  return getRuleContext<ObjectPascalParser::RestrictedTypeContext>(0);
}


size_t ObjectPascalParser::TypeDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeDecl;
}


std::any ObjectPascalParser::TypeDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeDeclContext* ObjectPascalParser::typeDecl() {
  TypeDeclContext *_localctx = _tracker.createInstance<TypeDeclContext>(_ctx, getState());
  enterRule(_localctx, 38, ObjectPascalParser::RuleTypeDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(457);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(439);
      match(ObjectPascalParser::Identifier);
      setState(440);
      match(ObjectPascalParser::ASSIGN);
      setState(442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(441);
        match(ObjectPascalParser::TYPE_);
      }
      setState(444);
      type();
      setState(446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(445);
        portabilityDirective();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(448);
      match(ObjectPascalParser::Identifier);
      setState(449);
      match(ObjectPascalParser::ASSIGN);
      setState(451);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::TYPE_) {
        setState(450);
        match(ObjectPascalParser::TYPE_);
      }
      setState(453);
      restrictedType();
      setState(455);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

      || _la == ObjectPascalParser::DEPRECATED) {
        setState(454);
        portabilityDirective();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedConstantContext ------------------------------------------------------------------

ObjectPascalParser::TypedConstantContext::TypedConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::TypedConstantContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::TypedConstantContext::arrayConstant() {
  return getRuleContext<ObjectPascalParser::ArrayConstantContext>(0);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::TypedConstantContext::recordConstant() {
  return getRuleContext<ObjectPascalParser::RecordConstantContext>(0);
}


size_t ObjectPascalParser::TypedConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypedConstant;
}


std::any ObjectPascalParser::TypedConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypedConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::typedConstant() {
  TypedConstantContext *_localctx = _tracker.createInstance<TypedConstantContext>(_ctx, getState());
  enterRule(_localctx, 40, ObjectPascalParser::RuleTypedConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(462);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(459);
      constExpr();
      break;
    }

    case 2: {
      setState(460);
      arrayConstant();
      break;
    }

    case 3: {
      setState(461);
      recordConstant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayConstantContext ------------------------------------------------------------------

ObjectPascalParser::ArrayConstantContext::ArrayConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::TypedConstantContext *> ObjectPascalParser::ArrayConstantContext::typedConstant() {
  return getRuleContexts<ObjectPascalParser::TypedConstantContext>();
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::ArrayConstantContext::typedConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayConstantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayConstantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayConstant;
}


std::any ObjectPascalParser::ArrayConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayConstantContext* ObjectPascalParser::arrayConstant() {
  ArrayConstantContext *_localctx = _tracker.createInstance<ArrayConstantContext>(_ctx, getState());
  enterRule(_localctx, 42, ObjectPascalParser::RuleArrayConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(464);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(465);
    typedConstant();
    setState(470);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(466);
      match(ObjectPascalParser::COMMA);
      setState(467);
      typedConstant();
      setState(472);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(473);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordConstantContext::RecordConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::RecordFieldConstantContext *> ObjectPascalParser::RecordConstantContext::recordFieldConstant() {
  return getRuleContexts<ObjectPascalParser::RecordFieldConstantContext>();
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::RecordConstantContext::recordFieldConstant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecordFieldConstantContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecordConstantContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::RecordConstantContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::RecordConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordConstant;
}


std::any ObjectPascalParser::RecordConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordConstantContext* ObjectPascalParser::recordConstant() {
  RecordConstantContext *_localctx = _tracker.createInstance<RecordConstantContext>(_ctx, getState());
  enterRule(_localctx, 44, ObjectPascalParser::RuleRecordConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(475);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(481);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::Identifier) {
      setState(476);
      recordFieldConstant();
      setState(477);
      match(ObjectPascalParser::SEMI);
      setState(483);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(484);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordFieldConstantContext ------------------------------------------------------------------

ObjectPascalParser::RecordFieldConstantContext::RecordFieldConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::RecordFieldConstantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypedConstantContext* ObjectPascalParser::RecordFieldConstantContext::typedConstant() {
  return getRuleContext<ObjectPascalParser::TypedConstantContext>(0);
}


size_t ObjectPascalParser::RecordFieldConstantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecordFieldConstant;
}


std::any ObjectPascalParser::RecordFieldConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecordFieldConstant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecordFieldConstantContext* ObjectPascalParser::recordFieldConstant() {
  RecordFieldConstantContext *_localctx = _tracker.createInstance<RecordFieldConstantContext>(_ctx, getState());
  enterRule(_localctx, 46, ObjectPascalParser::RuleRecordFieldConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(486);
    match(ObjectPascalParser::Identifier);
    setState(487);
    match(ObjectPascalParser::COLON);
    setState(488);
    typedConstant();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

ObjectPascalParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::TypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::TypeContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::TypeContext::strucType() {
  return getRuleContext<ObjectPascalParser::StrucTypeContext>(0);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::TypeContext::pointerType() {
  return getRuleContext<ObjectPascalParser::PointerTypeContext>(0);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::TypeContext::stringType() {
  return getRuleContext<ObjectPascalParser::StringTypeContext>(0);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::TypeContext::procedureType() {
  return getRuleContext<ObjectPascalParser::ProcedureTypeContext>(0);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::TypeContext::variantType() {
  return getRuleContext<ObjectPascalParser::VariantTypeContext>(0);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::TypeContext::classRefType() {
  return getRuleContext<ObjectPascalParser::ClassRefTypeContext>(0);
}


size_t ObjectPascalParser::TypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleType;
}


std::any ObjectPascalParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 48, ObjectPascalParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(498);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(490);
      typeId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(491);
      simpleType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(492);
      strucType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(493);
      pointerType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(494);
      stringType();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(495);
      procedureType();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(496);
      variantType();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(497);
      classRefType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestrictedTypeContext ------------------------------------------------------------------

ObjectPascalParser::RestrictedTypeContext::RestrictedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::RestrictedTypeContext::objectType() {
  return getRuleContext<ObjectPascalParser::ObjectTypeContext>(0);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::RestrictedTypeContext::classType() {
  return getRuleContext<ObjectPascalParser::ClassTypeContext>(0);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::RestrictedTypeContext::interfaceType() {
  return getRuleContext<ObjectPascalParser::InterfaceTypeContext>(0);
}


size_t ObjectPascalParser::RestrictedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRestrictedType;
}


std::any ObjectPascalParser::RestrictedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRestrictedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RestrictedTypeContext* ObjectPascalParser::restrictedType() {
  RestrictedTypeContext *_localctx = _tracker.createInstance<RestrictedTypeContext>(_ctx, getState());
  enterRule(_localctx, 50, ObjectPascalParser::RuleRestrictedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(503);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::OBJECT: {
        enterOuterAlt(_localctx, 1);
        setState(500);
        objectType();
        break;
      }

      case ObjectPascalParser::CLASS: {
        enterOuterAlt(_localctx, 2);
        setState(501);
        classType();
        break;
      }

      case ObjectPascalParser::INTERFACE: {
        enterOuterAlt(_localctx, 3);
        setState(502);
        interfaceType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassRefTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassRefTypeContext::ClassRefTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassRefTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ClassRefTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::ClassRefTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassRefType;
}


std::any ObjectPascalParser::ClassRefTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassRefType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassRefTypeContext* ObjectPascalParser::classRefType() {
  ClassRefTypeContext *_localctx = _tracker.createInstance<ClassRefTypeContext>(_ctx, getState());
  enterRule(_localctx, 52, ObjectPascalParser::RuleClassRefType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(505);
    match(ObjectPascalParser::CLASS);
    setState(506);
    match(ObjectPascalParser::OF);
    setState(507);
    typeId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

ObjectPascalParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SimpleTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::SimpleTypeContext::realType() {
  return getRuleContext<ObjectPascalParser::RealTypeContext>(0);
}


size_t ObjectPascalParser::SimpleTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleType;
}


std::any ObjectPascalParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 54, ObjectPascalParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(511);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::Identifier:
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(509);
        ordinalType();
        break;
      }

      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::REAL48: {
        setState(510);
        realType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdinalTypeContext ------------------------------------------------------------------

ObjectPascalParser::OrdinalTypeContext::OrdinalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::OrdinalTypeContext::subrangeType() {
  return getRuleContext<ObjectPascalParser::SubrangeTypeContext>(0);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::OrdinalTypeContext::enumeratedType() {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeContext>(0);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::OrdinalTypeContext::ordIdent() {
  return getRuleContext<ObjectPascalParser::OrdIdentContext>(0);
}


size_t ObjectPascalParser::OrdinalTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdinalType;
}


std::any ObjectPascalParser::OrdinalTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdinalType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ordinalType() {
  OrdinalTypeContext *_localctx = _tracker.createInstance<OrdinalTypeContext>(_ctx, getState());
  enterRule(_localctx, 56, ObjectPascalParser::RuleOrdinalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(516);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Identifier:
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(513);
        subrangeType();
        break;
      }

      case ObjectPascalParser::LEFT_PAREN: {
        setState(514);
        enumeratedType();
        break;
      }

      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD: {
        setState(515);
        ordIdent();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubrangeTypeContext ------------------------------------------------------------------

ObjectPascalParser::SubrangeTypeContext::SubrangeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SubrangeTypeContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::SubrangeTypeContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::SubrangeTypeContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::SubrangeTypeContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::SubrangeTypeContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}


size_t ObjectPascalParser::SubrangeTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSubrangeType;
}


std::any ObjectPascalParser::SubrangeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSubrangeType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SubrangeTypeContext* ObjectPascalParser::subrangeType() {
  SubrangeTypeContext *_localctx = _tracker.createInstance<SubrangeTypeContext>(_ctx, getState());
  enterRule(_localctx, 58, ObjectPascalParser::RuleSubrangeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(518);
        constExpr();
        break;
      }

      case ObjectPascalParser::Identifier: {
        setState(519);
        match(ObjectPascalParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(522);
    match(ObjectPascalParser::DOT_DOT);
    setState(525);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(523);
        constExpr();
        break;
      }

      case ObjectPascalParser::Identifier: {
        setState(524);
        match(ObjectPascalParser::Identifier);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeContext::EnumeratedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

std::vector<ObjectPascalParser::EnumeratedTypeElementContext *> ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement() {
  return getRuleContexts<ObjectPascalParser::EnumeratedTypeElementContext>();
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::EnumeratedTypeContext::enumeratedTypeElement(size_t i) {
  return getRuleContext<ObjectPascalParser::EnumeratedTypeElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::EnumeratedTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::EnumeratedTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedType;
}


std::any ObjectPascalParser::EnumeratedTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeContext* ObjectPascalParser::enumeratedType() {
  EnumeratedTypeContext *_localctx = _tracker.createInstance<EnumeratedTypeContext>(_ctx, getState());
  enterRule(_localctx, 60, ObjectPascalParser::RuleEnumeratedType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(527);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(528);
    enumeratedTypeElement();
    setState(533);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(529);
      match(ObjectPascalParser::COMMA);
      setState(530);
      enumeratedTypeElement();
      setState(535);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(536);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratedTypeElementContext ------------------------------------------------------------------

ObjectPascalParser::EnumeratedTypeElementContext::EnumeratedTypeElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::EnumeratedTypeElementContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::EnumeratedTypeElementContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::EnumeratedTypeElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleEnumeratedTypeElement;
}


std::any ObjectPascalParser::EnumeratedTypeElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitEnumeratedTypeElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::EnumeratedTypeElementContext* ObjectPascalParser::enumeratedTypeElement() {
  EnumeratedTypeElementContext *_localctx = _tracker.createInstance<EnumeratedTypeElementContext>(_ctx, getState());
  enterRule(_localctx, 62, ObjectPascalParser::RuleEnumeratedTypeElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(538);
    match(ObjectPascalParser::Identifier);
    setState(541);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ASSIGN) {
      setState(539);
      match(ObjectPascalParser::ASSIGN);
      setState(540);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringTypeContext ------------------------------------------------------------------

ObjectPascalParser::StringTypeContext::StringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::ANSISTRING() {
  return getToken(ObjectPascalParser::ANSISTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::WIDESTRING() {
  return getToken(ObjectPascalParser::WIDESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::UNICODESTRING() {
  return getToken(ObjectPascalParser::UNICODESTRING, 0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::StringTypeContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StringTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}


size_t ObjectPascalParser::StringTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStringType;
}


std::any ObjectPascalParser::StringTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStringType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringTypeContext* ObjectPascalParser::stringType() {
  StringTypeContext *_localctx = _tracker.createInstance<StringTypeContext>(_ctx, getState());
  enterRule(_localctx, 64, ObjectPascalParser::RuleStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(552);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(543);
      match(ObjectPascalParser::STRING);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(544);
      match(ObjectPascalParser::ANSISTRING);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(545);
      match(ObjectPascalParser::WIDESTRING);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(546);
      match(ObjectPascalParser::UNICODESTRING);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(547);
      match(ObjectPascalParser::STRING);
      setState(548);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(549);
      constExpr();
      setState(550);
      match(ObjectPascalParser::RIGHT_BRACKET);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrucTypeContext ------------------------------------------------------------------

ObjectPascalParser::StrucTypeContext::StrucTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::StrucTypeContext::arrayType() {
  return getRuleContext<ObjectPascalParser::ArrayTypeContext>(0);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::StrucTypeContext::setType() {
  return getRuleContext<ObjectPascalParser::SetTypeContext>(0);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::StrucTypeContext::fileType() {
  return getRuleContext<ObjectPascalParser::FileTypeContext>(0);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::StrucTypeContext::recType() {
  return getRuleContext<ObjectPascalParser::RecTypeContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StrucTypeContext::PACKED() {
  return getTokens(ObjectPascalParser::PACKED);
}

tree::TerminalNode* ObjectPascalParser::StrucTypeContext::PACKED(size_t i) {
  return getToken(ObjectPascalParser::PACKED, i);
}


size_t ObjectPascalParser::StrucTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStrucType;
}


std::any ObjectPascalParser::StrucTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStrucType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StrucTypeContext* ObjectPascalParser::strucType() {
  StrucTypeContext *_localctx = _tracker.createInstance<StrucTypeContext>(_ctx, getState());
  enterRule(_localctx, 66, ObjectPascalParser::RuleStrucType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::PACKED) {
      setState(554);
      match(ObjectPascalParser::PACKED);
    }
    setState(564);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ARRAY: {
        setState(557);
        arrayType();
        break;
      }

      case ObjectPascalParser::SET: {
        setState(558);
        setType();
        break;
      }

      case ObjectPascalParser::FILE: {
        setState(559);
        fileType();
        break;
      }

      case ObjectPascalParser::RECORD: {
        setState(560);
        recType();
        setState(562);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::PACKED) {
          setState(561);
          match(ObjectPascalParser::PACKED);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayTypeContext ------------------------------------------------------------------

ObjectPascalParser::ArrayTypeContext::ArrayTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::ARRAY() {
  return getToken(ObjectPascalParser::ARRAY, 0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ArrayTypeContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::OrdinalTypeContext *> ObjectPascalParser::ArrayTypeContext::ordinalType() {
  return getRuleContexts<ObjectPascalParser::OrdinalTypeContext>();
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::ArrayTypeContext::ordinalType(size_t i) {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ArrayTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ArrayTypeContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ArrayTypeContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ArrayTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleArrayType;
}


std::any ObjectPascalParser::ArrayTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitArrayType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ArrayTypeContext* ObjectPascalParser::arrayType() {
  ArrayTypeContext *_localctx = _tracker.createInstance<ArrayTypeContext>(_ctx, getState());
  enterRule(_localctx, 68, ObjectPascalParser::RuleArrayType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(566);
    match(ObjectPascalParser::ARRAY);
    setState(578);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(567);
      match(ObjectPascalParser::LEFT_BRACKET);
      setState(568);
      ordinalType();
      setState(573);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ObjectPascalParser::COMMA) {
        setState(569);
        match(ObjectPascalParser::COMMA);
        setState(570);
        ordinalType();
        setState(575);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(576);
      match(ObjectPascalParser::RIGHT_BRACKET);
    }
    setState(580);
    match(ObjectPascalParser::OF);
    setState(581);
    type();
    setState(583);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(582);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecTypeContext ------------------------------------------------------------------

ObjectPascalParser::RecTypeContext::RecTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::RECORD() {
  return getToken(ObjectPascalParser::RECORD, 0);
}

tree::TerminalNode* ObjectPascalParser::RecTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecTypeContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::RecTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::RecTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecType;
}


std::any ObjectPascalParser::RecTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecTypeContext* ObjectPascalParser::recType() {
  RecTypeContext *_localctx = _tracker.createInstance<RecTypeContext>(_ctx, getState());
  enterRule(_localctx, 70, ObjectPascalParser::RuleRecType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(585);
    match(ObjectPascalParser::RECORD);
    setState(587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Identifier) {
      setState(586);
      fieldList();
    }
    setState(589);
    match(ObjectPascalParser::END);
    setState(591);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(590);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldListContext ------------------------------------------------------------------

ObjectPascalParser::FieldListContext::FieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FieldDeclContext *> ObjectPascalParser::FieldListContext::fieldDecl() {
  return getRuleContexts<ObjectPascalParser::FieldDeclContext>();
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::FieldListContext::fieldDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::FieldDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FieldListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FieldListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::FieldListContext::variantSection() {
  return getRuleContext<ObjectPascalParser::VariantSectionContext>(0);
}


size_t ObjectPascalParser::FieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldList;
}


std::any ObjectPascalParser::FieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::fieldList() {
  FieldListContext *_localctx = _tracker.createInstance<FieldListContext>(_ctx, getState());
  enterRule(_localctx, 72, ObjectPascalParser::RuleFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(593);
      fieldDecl();
      setState(594);
      match(ObjectPascalParser::SEMI);
      setState(598); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
    setState(601);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::CASE) {
      setState(600);
      variantSection();
    }
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(603);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclContext ------------------------------------------------------------------

ObjectPascalParser::FieldDeclContext::FieldDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::FieldDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FieldDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::FieldDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FieldDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FieldDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFieldDecl;
}


std::any ObjectPascalParser::FieldDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFieldDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FieldDeclContext* ObjectPascalParser::fieldDecl() {
  FieldDeclContext *_localctx = _tracker.createInstance<FieldDeclContext>(_ctx, getState());
  enterRule(_localctx, 74, ObjectPascalParser::RuleFieldDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(606);
    identList();
    setState(607);
    match(ObjectPascalParser::COLON);
    setState(608);
    type();
    setState(610);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(609);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantSectionContext ------------------------------------------------------------------

ObjectPascalParser::VariantSectionContext::VariantSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::VariantSectionContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

std::vector<ObjectPascalParser::RecVariantContext *> ObjectPascalParser::VariantSectionContext::recVariant() {
  return getRuleContexts<ObjectPascalParser::RecVariantContext>();
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::VariantSectionContext::recVariant(size_t i) {
  return getRuleContext<ObjectPascalParser::RecVariantContext>(i);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VariantSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VariantSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VariantSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantSection;
}


std::any ObjectPascalParser::VariantSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantSectionContext* ObjectPascalParser::variantSection() {
  VariantSectionContext *_localctx = _tracker.createInstance<VariantSectionContext>(_ctx, getState());
  enterRule(_localctx, 76, ObjectPascalParser::RuleVariantSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(612);
    match(ObjectPascalParser::CASE);
    setState(615);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(613);
      match(ObjectPascalParser::Identifier);
      setState(614);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(617);
    typeId();
    setState(618);
    match(ObjectPascalParser::OF);
    setState(619);
    recVariant();
    setState(624);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(620);
        match(ObjectPascalParser::SEMI);
        setState(621);
        recVariant(); 
      }
      setState(626);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecVariantContext ------------------------------------------------------------------

ObjectPascalParser::RecVariantContext::RecVariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::RecVariantContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::RecVariantContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RecVariantContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::RecVariantContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}

ObjectPascalParser::FieldListContext* ObjectPascalParser::RecVariantContext::fieldList() {
  return getRuleContext<ObjectPascalParser::FieldListContext>(0);
}


size_t ObjectPascalParser::RecVariantContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRecVariant;
}


std::any ObjectPascalParser::RecVariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRecVariant(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RecVariantContext* ObjectPascalParser::recVariant() {
  RecVariantContext *_localctx = _tracker.createInstance<RecVariantContext>(_ctx, getState());
  enterRule(_localctx, 78, ObjectPascalParser::RuleRecVariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(627);
    constExpr();
    setState(632);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(628);
      match(ObjectPascalParser::COMMA);
      setState(629);
      constExpr();
      setState(634);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(635);
    match(ObjectPascalParser::COLON);
    setState(636);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(638);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Identifier) {
      setState(637);
      fieldList();
    }
    setState(640);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTypeContext ------------------------------------------------------------------

ObjectPascalParser::SetTypeContext::SetTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::SET() {
  return getToken(ObjectPascalParser::SET, 0);
}

tree::TerminalNode* ObjectPascalParser::SetTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::OrdinalTypeContext* ObjectPascalParser::SetTypeContext::ordinalType() {
  return getRuleContext<ObjectPascalParser::OrdinalTypeContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::SetTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::SetTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetType;
}


std::any ObjectPascalParser::SetTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetTypeContext* ObjectPascalParser::setType() {
  SetTypeContext *_localctx = _tracker.createInstance<SetTypeContext>(_ctx, getState());
  enterRule(_localctx, 80, ObjectPascalParser::RuleSetType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(642);
    match(ObjectPascalParser::SET);
    setState(643);
    match(ObjectPascalParser::OF);
    setState(644);
    ordinalType();
    setState(646);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      setState(645);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileTypeContext ------------------------------------------------------------------

ObjectPascalParser::FileTypeContext::FileTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::FileTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FileTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FileTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FileTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFileType;
}


std::any ObjectPascalParser::FileTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFileType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FileTypeContext* ObjectPascalParser::fileType() {
  FileTypeContext *_localctx = _tracker.createInstance<FileTypeContext>(_ctx, getState());
  enterRule(_localctx, 82, ObjectPascalParser::RuleFileType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(648);
    match(ObjectPascalParser::FILE);
    setState(649);
    match(ObjectPascalParser::OF);
    setState(650);
    typeId();
    setState(652);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      setState(651);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerTypeContext ------------------------------------------------------------------

ObjectPascalParser::PointerTypeContext::PointerTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PointerTypeContext::CARET() {
  return getToken(ObjectPascalParser::CARET, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PointerTypeContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PointerTypeContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PointerTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RulePointerType;
}


std::any ObjectPascalParser::PointerTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPointerType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PointerTypeContext* ObjectPascalParser::pointerType() {
  PointerTypeContext *_localctx = _tracker.createInstance<PointerTypeContext>(_ctx, getState());
  enterRule(_localctx, 84, ObjectPascalParser::RulePointerType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(654);
    match(ObjectPascalParser::CARET);
    setState(655);
    typeId();
    setState(657);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(656);
      portabilityDirective();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureTypeContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureTypeContext::ProcedureTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureTypeContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::ProcedureTypeContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}


size_t ObjectPascalParser::ProcedureTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureType;
}


std::any ObjectPascalParser::ProcedureTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureTypeContext* ObjectPascalParser::procedureType() {
  ProcedureTypeContext *_localctx = _tracker.createInstance<ProcedureTypeContext>(_ctx, getState());
  enterRule(_localctx, 86, ObjectPascalParser::RuleProcedureType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        setState(659);
        procedureHeading();
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        setState(660);
        functionHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(665);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::OF) {
      setState(663);
      match(ObjectPascalParser::OF);
      setState(664);
      match(ObjectPascalParser::OBJECT);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarSectionContext ------------------------------------------------------------------

ObjectPascalParser::VarSectionContext::VarSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::VAR() {
  return getToken(ObjectPascalParser::VAR, 0);
}

std::vector<ObjectPascalParser::VarDeclContext *> ObjectPascalParser::VarSectionContext::varDecl() {
  return getRuleContexts<ObjectPascalParser::VarDeclContext>();
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::VarSectionContext::varDecl(size_t i) {
  return getRuleContext<ObjectPascalParser::VarDeclContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::VarSectionContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::VarSectionContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::VarSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarSection;
}


std::any ObjectPascalParser::VarSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarSectionContext* ObjectPascalParser::varSection() {
  VarSectionContext *_localctx = _tracker.createInstance<VarSectionContext>(_ctx, getState());
  enterRule(_localctx, 88, ObjectPascalParser::RuleVarSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(667);
    match(ObjectPascalParser::VAR);
    setState(671); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(668);
      varDecl();
      setState(669);
      match(ObjectPascalParser::SEMI);
      setState(673); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarDeclContext ------------------------------------------------------------------

ObjectPascalParser::VarDeclContext::VarDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::VarDeclContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::VarDeclContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::VarDeclContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::VarDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::ABSOLUTE() {
  return getToken(ObjectPascalParser::ABSOLUTE, 0);
}

tree::TerminalNode* ObjectPascalParser::VarDeclContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}


size_t ObjectPascalParser::VarDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVarDecl;
}


std::any ObjectPascalParser::VarDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVarDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VarDeclContext* ObjectPascalParser::varDecl() {
  VarDeclContext *_localctx = _tracker.createInstance<VarDeclContext>(_ctx, getState());
  enterRule(_localctx, 90, ObjectPascalParser::RuleVarDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(675);
    identList();
    setState(676);
    match(ObjectPascalParser::COLON);
    setState(677);
    type();
    setState(685);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::ABSOLUTE: {
        setState(678);
        match(ObjectPascalParser::ABSOLUTE);
        setState(681);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::Identifier: {
            setState(679);
            match(ObjectPascalParser::Identifier);
            break;
          }

          case ObjectPascalParser::Integer:
          case ObjectPascalParser::Float:
          case ObjectPascalParser::StringLiteral: {
            setState(680);
            constExpr();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::ASSIGN: {
        setState(683);
        match(ObjectPascalParser::ASSIGN);
        setState(684);
        constExpr();
        break;
      }

      case ObjectPascalParser::LIBRARY:
      case ObjectPascalParser::SEMI:
      case ObjectPascalParser::PLATFORM:
      case ObjectPascalParser::DEPRECATED: {
        break;
      }

    default:
      break;
    }
    setState(688);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(687);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

ObjectPascalParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::SimpleGroupedContext *> ObjectPascalParser::ExpressionContext::simpleGrouped() {
  return getRuleContexts<ObjectPascalParser::SimpleGroupedContext>();
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::ExpressionContext::simpleGrouped(size_t i) {
  return getRuleContext<ObjectPascalParser::SimpleGroupedContext>(i);
}

std::vector<ObjectPascalParser::RelOpContext *> ObjectPascalParser::ExpressionContext::relOp() {
  return getRuleContexts<ObjectPascalParser::RelOpContext>();
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::ExpressionContext::relOp(size_t i) {
  return getRuleContext<ObjectPascalParser::RelOpContext>(i);
}


size_t ObjectPascalParser::ExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExpression;
}


std::any ObjectPascalParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 92, ObjectPascalParser::RuleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(690);
    simpleGrouped();
    setState(696);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::IN || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & ((1ULL << (ObjectPascalParser::IS - 89))
      | (1ULL << (ObjectPascalParser::AS - 89))
      | (1ULL << (ObjectPascalParser::ASSIGN - 89))
      | (1ULL << (ObjectPascalParser::GRATER - 89))
      | (1ULL << (ObjectPascalParser::LESS - 89))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 89)))) != 0)) {
      setState(691);
      relOp();
      setState(692);
      simpleGrouped();
      setState(698);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleGroupedContext ------------------------------------------------------------------

ObjectPascalParser::SimpleGroupedContext::SimpleGroupedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::SimpleGroupedContext::simpleExpression() {
  return getRuleContext<ObjectPascalParser::SimpleExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleGroupedContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::SimpleGroupedContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleGrouped;
}


std::any ObjectPascalParser::SimpleGroupedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleGrouped(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleGroupedContext* ObjectPascalParser::simpleGrouped() {
  SimpleGroupedContext *_localctx = _tracker.createInstance<SimpleGroupedContext>(_ctx, getState());
  enterRule(_localctx, 94, ObjectPascalParser::RuleSimpleGrouped);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(704);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(699);
      simpleExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(700);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(701);
      simpleExpression();
      setState(702);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleExpressionContext ------------------------------------------------------------------

ObjectPascalParser::SimpleExpressionContext::SimpleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::TermContext *> ObjectPascalParser::SimpleExpressionContext::term() {
  return getRuleContexts<ObjectPascalParser::TermContext>();
}

ObjectPascalParser::TermContext* ObjectPascalParser::SimpleExpressionContext::term(size_t i) {
  return getRuleContext<ObjectPascalParser::TermContext>(i);
}

std::vector<ObjectPascalParser::AddOpContext *> ObjectPascalParser::SimpleExpressionContext::addOp() {
  return getRuleContexts<ObjectPascalParser::AddOpContext>();
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::SimpleExpressionContext::addOp(size_t i) {
  return getRuleContext<ObjectPascalParser::AddOpContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleExpressionContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}


size_t ObjectPascalParser::SimpleExpressionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleExpression;
}


std::any ObjectPascalParser::SimpleExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleExpression(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleExpressionContext* ObjectPascalParser::simpleExpression() {
  SimpleExpressionContext *_localctx = _tracker.createInstance<SimpleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 96, ObjectPascalParser::RuleSimpleExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(707);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::PLUS

    || _la == ObjectPascalParser::MINUS) {
      setState(706);
      _la = _input->LA(1);
      if (!(_la == ObjectPascalParser::PLUS

      || _la == ObjectPascalParser::MINUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(709);
    term();
    setState(715);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 90) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 90)) & ((1ULL << (ObjectPascalParser::OR - 90))
      | (1ULL << (ObjectPascalParser::XOR - 90))
      | (1ULL << (ObjectPascalParser::PLUS - 90))
      | (1ULL << (ObjectPascalParser::MINUS - 90)))) != 0)) {
      setState(710);
      addOp();
      setState(711);
      term();
      setState(717);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

ObjectPascalParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::FactorContext *> ObjectPascalParser::TermContext::factor() {
  return getRuleContexts<ObjectPascalParser::FactorContext>();
}

ObjectPascalParser::FactorContext* ObjectPascalParser::TermContext::factor(size_t i) {
  return getRuleContext<ObjectPascalParser::FactorContext>(i);
}

std::vector<ObjectPascalParser::MulOpContext *> ObjectPascalParser::TermContext::mulOp() {
  return getRuleContexts<ObjectPascalParser::MulOpContext>();
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::TermContext::mulOp(size_t i) {
  return getRuleContext<ObjectPascalParser::MulOpContext>(i);
}


size_t ObjectPascalParser::TermContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTerm;
}


std::any ObjectPascalParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TermContext* ObjectPascalParser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 98, ObjectPascalParser::RuleTerm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    factor();
    setState(724);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & ((1ULL << (ObjectPascalParser::DIV - 92))
      | (1ULL << (ObjectPascalParser::MOD - 92))
      | (1ULL << (ObjectPascalParser::AND - 92))
      | (1ULL << (ObjectPascalParser::SHL - 92))
      | (1ULL << (ObjectPascalParser::SHR - 92))
      | (1ULL << (ObjectPascalParser::STAR - 92)))) != 0)) {
      setState(719);
      mulOp();
      setState(720);
      factor();
      setState(726);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

ObjectPascalParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::FactorContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::FactorContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::DOG() {
  return getToken(ObjectPascalParser::DOG, 0);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::FactorContext::number() {
  return getRuleContext<ObjectPascalParser::NumberContext>(0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::FactorContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NIL() {
  return getToken(ObjectPascalParser::NIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::FactorContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FactorContext::NOT() {
  return getToken(ObjectPascalParser::NOT, 0);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::FactorContext::factor() {
  return getRuleContext<ObjectPascalParser::FactorContext>(0);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::FactorContext::setConstructor() {
  return getRuleContext<ObjectPascalParser::SetConstructorContext>(0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::FactorContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::FactorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFactor;
}


std::any ObjectPascalParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FactorContext* ObjectPascalParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 100, ObjectPascalParser::RuleFactor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(751);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(727);
      designator();
      setState(732);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::LEFT_PAREN) {
        setState(728);
        match(ObjectPascalParser::LEFT_PAREN);
        setState(729);
        exprList();
        setState(730);
        match(ObjectPascalParser::RIGHT_PAREN);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(734);
      match(ObjectPascalParser::DOG);
      setState(735);
      designator();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(736);
      number();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(737);
      string();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(738);
      match(ObjectPascalParser::NIL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(739);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(740);
      expression();
      setState(741);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(743);
      match(ObjectPascalParser::NOT);
      setState(744);
      factor();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(745);
      setConstructor();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(746);
      typeId();
      setState(747);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(748);
      expression();
      setState(749);
      match(ObjectPascalParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DesignatorContext ------------------------------------------------------------------

ObjectPascalParser::DesignatorContext::DesignatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::DesignatorContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::DOT() {
  return getTokens(ObjectPascalParser::DOT);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::DOT(size_t i) {
  return getToken(ObjectPascalParser::DOT, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::LEFT_BRACKET() {
  return getTokens(ObjectPascalParser::LEFT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::LEFT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::LEFT_BRACKET, i);
}

std::vector<ObjectPascalParser::ExprListContext *> ObjectPascalParser::DesignatorContext::exprList() {
  return getRuleContexts<ObjectPascalParser::ExprListContext>();
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::DesignatorContext::exprList(size_t i) {
  return getRuleContext<ObjectPascalParser::ExprListContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::RIGHT_BRACKET() {
  return getTokens(ObjectPascalParser::RIGHT_BRACKET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::RIGHT_BRACKET(size_t i) {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DesignatorContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::DesignatorContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::DesignatorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDesignator;
}


std::any ObjectPascalParser::DesignatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDesignator(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::designator() {
  DesignatorContext *_localctx = _tracker.createInstance<DesignatorContext>(_ctx, getState());
  enterRule(_localctx, 102, ObjectPascalParser::RuleDesignator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(753);
    qualId();
    setState(763);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 122) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 122)) & ((1ULL << (ObjectPascalParser::DOT - 122))
      | (1ULL << (ObjectPascalParser::LEFT_BRACKET - 122))
      | (1ULL << (ObjectPascalParser::CARET - 122)))) != 0)) {
      setState(761);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ObjectPascalParser::DOT: {
          setState(754);
          match(ObjectPascalParser::DOT);
          setState(755);
          match(ObjectPascalParser::Identifier);
          break;
        }

        case ObjectPascalParser::LEFT_BRACKET: {
          setState(756);
          match(ObjectPascalParser::LEFT_BRACKET);
          setState(757);
          exprList();
          setState(758);
          match(ObjectPascalParser::RIGHT_BRACKET);
          break;
        }

        case ObjectPascalParser::CARET: {
          setState(760);
          match(ObjectPascalParser::CARET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(765);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetConstructorContext ------------------------------------------------------------------

ObjectPascalParser::SetConstructorContext::SetConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

std::vector<ObjectPascalParser::SetElementContext *> ObjectPascalParser::SetConstructorContext::setElement() {
  return getRuleContexts<ObjectPascalParser::SetElementContext>();
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::SetConstructorContext::setElement(size_t i) {
  return getRuleContext<ObjectPascalParser::SetElementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::SetConstructorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::SetConstructorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::SetConstructorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetConstructor;
}


std::any ObjectPascalParser::SetConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetConstructor(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetConstructorContext* ObjectPascalParser::setConstructor() {
  SetConstructorContext *_localctx = _tracker.createInstance<SetConstructorContext>(_ctx, getState());
  enterRule(_localctx, 104, ObjectPascalParser::RuleSetConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    match(ObjectPascalParser::LEFT_BRACKET);
    setState(767);
    setElement();
    setState(772);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(768);
      match(ObjectPascalParser::COMMA);
      setState(769);
      setElement();
      setState(774);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(775);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetElementContext ------------------------------------------------------------------

ObjectPascalParser::SetElementContext::SetElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::SetElementContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::SetElementContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::SetElementContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::SetElementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSetElement;
}


std::any ObjectPascalParser::SetElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSetElement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SetElementContext* ObjectPascalParser::setElement() {
  SetElementContext *_localctx = _tracker.createInstance<SetElementContext>(_ctx, getState());
  enterRule(_localctx, 106, ObjectPascalParser::RuleSetElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(777);
    expression();
    setState(780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(778);
      match(ObjectPascalParser::DOT_DOT);
      setState(779);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprListContext ------------------------------------------------------------------

ObjectPascalParser::ExprListContext::ExprListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ExprListContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ExprListContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExprListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::ExprListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::ExprListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExprList;
}


std::any ObjectPascalParser::ExprListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExprList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::exprList() {
  ExprListContext *_localctx = _tracker.createInstance<ExprListContext>(_ctx, getState());
  enterRule(_localctx, 108, ObjectPascalParser::RuleExprList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(782);
    expression();
    setState(787);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(783);
      match(ObjectPascalParser::COMMA);
      setState(784);
      expression();
      setState(789);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

ObjectPascalParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::StatementContext::simpleStatement() {
  return getRuleContext<ObjectPascalParser::SimpleStatementContext>(0);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::StatementContext::structStmt() {
  return getRuleContext<ObjectPascalParser::StructStmtContext>(0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::StatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::StatementContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}


size_t ObjectPascalParser::StatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStatement;
}


std::any ObjectPascalParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 110, ObjectPascalParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(793);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      setState(790);
      labelId();
      setState(791);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(797);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INHERITED:
      case ObjectPascalParser::GOTO:
      case ObjectPascalParser::Identifier: {
        setState(795);
        simpleStatement();
        break;
      }

      case ObjectPascalParser::CASE:
      case ObjectPascalParser::BEGIN:
      case ObjectPascalParser::IF:
      case ObjectPascalParser::REPEAT:
      case ObjectPascalParser::WHILE:
      case ObjectPascalParser::FOR:
      case ObjectPascalParser::WITH:
      case ObjectPascalParser::TRY:
      case ObjectPascalParser::RAISE: {
        setState(796);
        structStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtListContext ------------------------------------------------------------------

ObjectPascalParser::StmtListContext::StmtListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::StmtListContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::StmtListContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::StmtListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::StmtListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::StmtListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStmtList;
}


std::any ObjectPascalParser::StmtListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStmtList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::stmtList() {
  StmtListContext *_localctx = _tracker.createInstance<StmtListContext>(_ctx, getState());
  enterRule(_localctx, 112, ObjectPascalParser::RuleStmtList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(802); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(799);
      statement();
      setState(800);
      match(ObjectPascalParser::SEMI);
      setState(804); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (ObjectPascalParser::CASE - 43))
      | (1ULL << (ObjectPascalParser::INHERITED - 43))
      | (1ULL << (ObjectPascalParser::GOTO - 43))
      | (1ULL << (ObjectPascalParser::BEGIN - 43))
      | (1ULL << (ObjectPascalParser::IF - 43))
      | (1ULL << (ObjectPascalParser::REPEAT - 43))
      | (1ULL << (ObjectPascalParser::WHILE - 43))
      | (1ULL << (ObjectPascalParser::FOR - 43))
      | (1ULL << (ObjectPascalParser::WITH - 43))
      | (1ULL << (ObjectPascalParser::TRY - 43))
      | (1ULL << (ObjectPascalParser::RAISE - 43)))) != 0) || _la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleStatementContext ------------------------------------------------------------------

ObjectPascalParser::SimpleStatementContext::SimpleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::SimpleStatementContext::assignmentStmt() {
  return getRuleContext<ObjectPascalParser::AssignmentStmtContext>(0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::INHERITED() {
  return getToken(ObjectPascalParser::INHERITED, 0);
}

tree::TerminalNode* ObjectPascalParser::SimpleStatementContext::GOTO() {
  return getToken(ObjectPascalParser::GOTO, 0);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::SimpleStatementContext::labelId() {
  return getRuleContext<ObjectPascalParser::LabelIdContext>(0);
}

ObjectPascalParser::ProcedureCallContext* ObjectPascalParser::SimpleStatementContext::procedureCall() {
  return getRuleContext<ObjectPascalParser::ProcedureCallContext>(0);
}


size_t ObjectPascalParser::SimpleStatementContext::getRuleIndex() const {
  return ObjectPascalParser::RuleSimpleStatement;
}


std::any ObjectPascalParser::SimpleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitSimpleStatement(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::SimpleStatementContext* ObjectPascalParser::simpleStatement() {
  SimpleStatementContext *_localctx = _tracker.createInstance<SimpleStatementContext>(_ctx, getState());
  enterRule(_localctx, 114, ObjectPascalParser::RuleSimpleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(811);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(806);
      assignmentStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(807);
      match(ObjectPascalParser::INHERITED);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(808);
      match(ObjectPascalParser::GOTO);
      setState(809);
      labelId();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(810);
      procedureCall();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructStmtContext ------------------------------------------------------------------

ObjectPascalParser::StructStmtContext::StructStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::StructStmtContext::compoundStmt() {
  return getRuleContext<ObjectPascalParser::CompoundStmtContext>(0);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::StructStmtContext::conditionalStmt() {
  return getRuleContext<ObjectPascalParser::ConditionalStmtContext>(0);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::StructStmtContext::loopStmt() {
  return getRuleContext<ObjectPascalParser::LoopStmtContext>(0);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::StructStmtContext::withStmt() {
  return getRuleContext<ObjectPascalParser::WithStmtContext>(0);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::StructStmtContext::tryExceptStmt() {
  return getRuleContext<ObjectPascalParser::TryExceptStmtContext>(0);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::StructStmtContext::tryFinallyStmt() {
  return getRuleContext<ObjectPascalParser::TryFinallyStmtContext>(0);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::StructStmtContext::raiseStmt() {
  return getRuleContext<ObjectPascalParser::RaiseStmtContext>(0);
}


size_t ObjectPascalParser::StructStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleStructStmt;
}


std::any ObjectPascalParser::StructStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitStructStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StructStmtContext* ObjectPascalParser::structStmt() {
  StructStmtContext *_localctx = _tracker.createInstance<StructStmtContext>(_ctx, getState());
  enterRule(_localctx, 116, ObjectPascalParser::RuleStructStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(820);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(813);
      compoundStmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(814);
      conditionalStmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(815);
      loopStmt();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(816);
      withStmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(817);
      tryExceptStmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(818);
      tryFinallyStmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(819);
      raiseStmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStmtContext ------------------------------------------------------------------

ObjectPascalParser::CompoundStmtContext::CompoundStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::BEGIN() {
  return getToken(ObjectPascalParser::BEGIN, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CompoundStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::CompoundStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::CompoundStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCompoundStmt;
}


std::any ObjectPascalParser::CompoundStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCompoundStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CompoundStmtContext* ObjectPascalParser::compoundStmt() {
  CompoundStmtContext *_localctx = _tracker.createInstance<CompoundStmtContext>(_ctx, getState());
  enterRule(_localctx, 118, ObjectPascalParser::RuleCompoundStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(822);
    match(ObjectPascalParser::BEGIN);
    setState(823);
    stmtList();
    setState(825);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(824);
      match(ObjectPascalParser::SEMI);
    }
    setState(827);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalStmtContext ------------------------------------------------------------------

ObjectPascalParser::ConditionalStmtContext::ConditionalStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ConditionalStmtContext::ifStmt() {
  return getRuleContext<ObjectPascalParser::IfStmtContext>(0);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::ConditionalStmtContext::caseStmt() {
  return getRuleContext<ObjectPascalParser::CaseStmtContext>(0);
}


size_t ObjectPascalParser::ConditionalStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConditionalStmt;
}


std::any ObjectPascalParser::ConditionalStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConditionalStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConditionalStmtContext* ObjectPascalParser::conditionalStmt() {
  ConditionalStmtContext *_localctx = _tracker.createInstance<ConditionalStmtContext>(_ctx, getState());
  enterRule(_localctx, 120, ObjectPascalParser::RuleConditionalStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(831);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::IF: {
        enterOuterAlt(_localctx, 1);
        setState(829);
        ifStmt();
        break;
      }

      case ObjectPascalParser::CASE: {
        enterOuterAlt(_localctx, 2);
        setState(830);
        caseStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureCallContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureCallContext::ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ProcedureCallContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureCallContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::ExprListContext* ObjectPascalParser::ProcedureCallContext::exprList() {
  return getRuleContext<ObjectPascalParser::ExprListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureCallContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ProcedureCallContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureCall;
}


std::any ObjectPascalParser::ProcedureCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureCall(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureCallContext* ObjectPascalParser::procedureCall() {
  ProcedureCallContext *_localctx = _tracker.createInstance<ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 122, ObjectPascalParser::RuleProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(833);
    qualId();
    setState(838);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(834);
      match(ObjectPascalParser::LEFT_PAREN);
      setState(835);
      exprList();
      setState(836);
      match(ObjectPascalParser::RIGHT_PAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentStmtContext ------------------------------------------------------------------

ObjectPascalParser::AssignmentStmtContext::AssignmentStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DesignatorContext* ObjectPascalParser::AssignmentStmtContext::designator() {
  return getRuleContext<ObjectPascalParser::DesignatorContext>(0);
}

tree::TerminalNode* ObjectPascalParser::AssignmentStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::AssignmentStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}


size_t ObjectPascalParser::AssignmentStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAssignmentStmt;
}


std::any ObjectPascalParser::AssignmentStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAssignmentStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AssignmentStmtContext* ObjectPascalParser::assignmentStmt() {
  AssignmentStmtContext *_localctx = _tracker.createInstance<AssignmentStmtContext>(_ctx, getState());
  enterRule(_localctx, 124, ObjectPascalParser::RuleAssignmentStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(840);
    designator();
    setState(841);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(842);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfStmtContext ------------------------------------------------------------------

ObjectPascalParser::IfStmtContext::IfStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::IF() {
  return getToken(ObjectPascalParser::IF, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::IfStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::THEN() {
  return getToken(ObjectPascalParser::THEN, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::IfStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::IfStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::IfStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}


size_t ObjectPascalParser::IfStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIfStmt;
}


std::any ObjectPascalParser::IfStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIfStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IfStmtContext* ObjectPascalParser::ifStmt() {
  IfStmtContext *_localctx = _tracker.createInstance<IfStmtContext>(_ctx, getState());
  enterRule(_localctx, 126, ObjectPascalParser::RuleIfStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    match(ObjectPascalParser::IF);
    setState(845);
    expression();
    setState(846);
    match(ObjectPascalParser::THEN);
    setState(847);
    statement();
    setState(850);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(848);
      match(ObjectPascalParser::ELSE);
      setState(849);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseStmtContext ------------------------------------------------------------------

ObjectPascalParser::CaseStmtContext::CaseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::CASE() {
  return getToken(ObjectPascalParser::CASE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::CaseStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<ObjectPascalParser::CaseSelectorContext *> ObjectPascalParser::CaseStmtContext::caseSelector() {
  return getRuleContexts<ObjectPascalParser::CaseSelectorContext>();
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::CaseStmtContext::caseSelector(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseSelectorContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::CaseStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::CaseStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::CaseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseStmt;
}


std::any ObjectPascalParser::CaseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseStmtContext* ObjectPascalParser::caseStmt() {
  CaseStmtContext *_localctx = _tracker.createInstance<CaseStmtContext>(_ctx, getState());
  enterRule(_localctx, 128, ObjectPascalParser::RuleCaseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(852);
    match(ObjectPascalParser::CASE);
    setState(853);
    expression();
    setState(854);
    match(ObjectPascalParser::OF);

    setState(855);
    caseSelector();
    setState(860);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(856);
        match(ObjectPascalParser::SEMI);
        setState(857);
        caseSelector(); 
      }
      setState(862);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
    setState(865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::ELSE) {
      setState(863);
      match(ObjectPascalParser::ELSE);
      setState(864);
      stmtList();
    }
    setState(868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(867);
      match(ObjectPascalParser::SEMI);
    }
    setState(870);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseSelectorContext ------------------------------------------------------------------

ObjectPascalParser::CaseSelectorContext::CaseSelectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::CaseLabelContext *> ObjectPascalParser::CaseSelectorContext::caseLabel() {
  return getRuleContexts<ObjectPascalParser::CaseLabelContext>();
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::CaseSelectorContext::caseLabel(size_t i) {
  return getRuleContext<ObjectPascalParser::CaseLabelContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::CaseSelectorContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::CaseSelectorContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::CaseSelectorContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::CaseSelectorContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseSelector;
}


std::any ObjectPascalParser::CaseSelectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseSelector(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseSelectorContext* ObjectPascalParser::caseSelector() {
  CaseSelectorContext *_localctx = _tracker.createInstance<CaseSelectorContext>(_ctx, getState());
  enterRule(_localctx, 130, ObjectPascalParser::RuleCaseSelector);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(872);
    caseLabel();
    setState(877);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(873);
      match(ObjectPascalParser::COMMA);
      setState(874);
      caseLabel();
      setState(879);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(880);
    match(ObjectPascalParser::COLON);
    setState(881);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseLabelContext ------------------------------------------------------------------

ObjectPascalParser::CaseLabelContext::CaseLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::ConstExprContext *> ObjectPascalParser::CaseLabelContext::constExpr() {
  return getRuleContexts<ObjectPascalParser::ConstExprContext>();
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::CaseLabelContext::constExpr(size_t i) {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(i);
}

tree::TerminalNode* ObjectPascalParser::CaseLabelContext::DOT_DOT() {
  return getToken(ObjectPascalParser::DOT_DOT, 0);
}


size_t ObjectPascalParser::CaseLabelContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCaseLabel;
}


std::any ObjectPascalParser::CaseLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCaseLabel(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CaseLabelContext* ObjectPascalParser::caseLabel() {
  CaseLabelContext *_localctx = _tracker.createInstance<CaseLabelContext>(_ctx, getState());
  enterRule(_localctx, 132, ObjectPascalParser::RuleCaseLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(883);
    constExpr();
    setState(886);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::DOT_DOT) {
      setState(884);
      match(ObjectPascalParser::DOT_DOT);
      setState(885);
      constExpr();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LoopStmtContext ------------------------------------------------------------------

ObjectPascalParser::LoopStmtContext::LoopStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::LoopStmtContext::repeatStmt() {
  return getRuleContext<ObjectPascalParser::RepeatStmtContext>(0);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::LoopStmtContext::whileStmt() {
  return getRuleContext<ObjectPascalParser::WhileStmtContext>(0);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::LoopStmtContext::forStmt() {
  return getRuleContext<ObjectPascalParser::ForStmtContext>(0);
}


size_t ObjectPascalParser::LoopStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLoopStmt;
}


std::any ObjectPascalParser::LoopStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLoopStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LoopStmtContext* ObjectPascalParser::loopStmt() {
  LoopStmtContext *_localctx = _tracker.createInstance<LoopStmtContext>(_ctx, getState());
  enterRule(_localctx, 134, ObjectPascalParser::RuleLoopStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(891);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REPEAT: {
        enterOuterAlt(_localctx, 1);
        setState(888);
        repeatStmt();
        break;
      }

      case ObjectPascalParser::WHILE: {
        enterOuterAlt(_localctx, 2);
        setState(889);
        whileStmt();
        break;
      }

      case ObjectPascalParser::FOR: {
        enterOuterAlt(_localctx, 3);
        setState(890);
        forStmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatStmtContext ------------------------------------------------------------------

ObjectPascalParser::RepeatStmtContext::RepeatStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::REPEAT() {
  return getToken(ObjectPascalParser::REPEAT, 0);
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::RepeatStmtContext::stmtList() {
  return getRuleContext<ObjectPascalParser::StmtListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::UNTIL() {
  return getToken(ObjectPascalParser::UNTIL, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::RepeatStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::RepeatStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::RepeatStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRepeatStmt;
}


std::any ObjectPascalParser::RepeatStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRepeatStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RepeatStmtContext* ObjectPascalParser::repeatStmt() {
  RepeatStmtContext *_localctx = _tracker.createInstance<RepeatStmtContext>(_ctx, getState());
  enterRule(_localctx, 136, ObjectPascalParser::RuleRepeatStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(893);
    match(ObjectPascalParser::REPEAT);
    setState(894);
    stmtList();
    setState(896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(895);
      match(ObjectPascalParser::SEMI);
    }
    setState(898);
    match(ObjectPascalParser::UNTIL);
    setState(899);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileStmtContext ------------------------------------------------------------------

ObjectPascalParser::WhileStmtContext::WhileStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::WHILE() {
  return getToken(ObjectPascalParser::WHILE, 0);
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::WhileStmtContext::expression() {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(0);
}

tree::TerminalNode* ObjectPascalParser::WhileStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WhileStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WhileStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWhileStmt;
}


std::any ObjectPascalParser::WhileStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWhileStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WhileStmtContext* ObjectPascalParser::whileStmt() {
  WhileStmtContext *_localctx = _tracker.createInstance<WhileStmtContext>(_ctx, getState());
  enterRule(_localctx, 138, ObjectPascalParser::RuleWhileStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(901);
    match(ObjectPascalParser::WHILE);
    setState(902);
    expression();
    setState(903);
    match(ObjectPascalParser::DO);
    setState(904);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStmtContext ------------------------------------------------------------------

ObjectPascalParser::ForStmtContext::ForStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::FOR() {
  return getToken(ObjectPascalParser::FOR, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ForStmtContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::COLON_ASSIGN() {
  return getToken(ObjectPascalParser::COLON_ASSIGN, 0);
}

std::vector<ObjectPascalParser::ExpressionContext *> ObjectPascalParser::ForStmtContext::expression() {
  return getRuleContexts<ObjectPascalParser::ExpressionContext>();
}

ObjectPascalParser::ExpressionContext* ObjectPascalParser::ForStmtContext::expression(size_t i) {
  return getRuleContext<ObjectPascalParser::ExpressionContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ForStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::TO() {
  return getToken(ObjectPascalParser::TO, 0);
}

tree::TerminalNode* ObjectPascalParser::ForStmtContext::DOWNTO() {
  return getToken(ObjectPascalParser::DOWNTO, 0);
}


size_t ObjectPascalParser::ForStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleForStmt;
}


std::any ObjectPascalParser::ForStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitForStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ForStmtContext* ObjectPascalParser::forStmt() {
  ForStmtContext *_localctx = _tracker.createInstance<ForStmtContext>(_ctx, getState());
  enterRule(_localctx, 140, ObjectPascalParser::RuleForStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    match(ObjectPascalParser::FOR);
    setState(907);
    qualId();
    setState(908);
    match(ObjectPascalParser::COLON_ASSIGN);
    setState(909);
    expression();
    setState(910);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::TO

    || _la == ObjectPascalParser::DOWNTO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(911);
    expression();
    setState(912);
    match(ObjectPascalParser::DO);
    setState(913);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithStmtContext ------------------------------------------------------------------

ObjectPascalParser::WithStmtContext::WithStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::WITH() {
  return getToken(ObjectPascalParser::WITH, 0);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::WithStmtContext::qualIdList() {
  return getRuleContext<ObjectPascalParser::QualIdListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::WithStmtContext::DO() {
  return getToken(ObjectPascalParser::DO, 0);
}

ObjectPascalParser::StatementContext* ObjectPascalParser::WithStmtContext::statement() {
  return getRuleContext<ObjectPascalParser::StatementContext>(0);
}


size_t ObjectPascalParser::WithStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleWithStmt;
}


std::any ObjectPascalParser::WithStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitWithStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::WithStmtContext* ObjectPascalParser::withStmt() {
  WithStmtContext *_localctx = _tracker.createInstance<WithStmtContext>(_ctx, getState());
  enterRule(_localctx, 142, ObjectPascalParser::RuleWithStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(915);
    match(ObjectPascalParser::WITH);
    setState(916);
    qualIdList();
    setState(917);
    match(ObjectPascalParser::DO);
    setState(918);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryExceptStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryExceptStmtContext::TryExceptStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryExceptStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryExceptStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::EXCEPT() {
  return getToken(ObjectPascalParser::EXCEPT, 0);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::TryExceptStmtContext::exceptionBlock() {
  return getRuleContext<ObjectPascalParser::ExceptionBlockContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::TryExceptStmtContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::TryExceptStmtContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::TryExceptStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryExceptStmt;
}


std::any ObjectPascalParser::TryExceptStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryExceptStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryExceptStmtContext* ObjectPascalParser::tryExceptStmt() {
  TryExceptStmtContext *_localctx = _tracker.createInstance<TryExceptStmtContext>(_ctx, getState());
  enterRule(_localctx, 144, ObjectPascalParser::RuleTryExceptStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(920);
    match(ObjectPascalParser::TRY);
    setState(921);
    statement();
    setState(926);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(922);
      match(ObjectPascalParser::SEMI);
      setState(923);
      statement();
      setState(928);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(929);
    match(ObjectPascalParser::EXCEPT);
    setState(930);
    exceptionBlock();
    setState(931);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionBlockContext ------------------------------------------------------------------

ObjectPascalParser::ExceptionBlockContext::ExceptionBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::ON() {
  return getTokens(ObjectPascalParser::ON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ON(size_t i) {
  return getToken(ObjectPascalParser::ON, i);
}

std::vector<ObjectPascalParser::TypeIdContext *> ObjectPascalParser::ExceptionBlockContext::typeId() {
  return getRuleContexts<ObjectPascalParser::TypeIdContext>();
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::ExceptionBlockContext::typeId(size_t i) {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::DO() {
  return getTokens(ObjectPascalParser::DO);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::DO(size_t i) {
  return getToken(ObjectPascalParser::DO, i);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::ExceptionBlockContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::ExceptionBlockContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::ELSE() {
  return getToken(ObjectPascalParser::ELSE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::COLON() {
  return getTokens(ObjectPascalParser::COLON);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::COLON(size_t i) {
  return getToken(ObjectPascalParser::COLON, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExceptionBlockContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ExceptionBlockContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::ExceptionBlockContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExceptionBlock;
}


std::any ObjectPascalParser::ExceptionBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExceptionBlock(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExceptionBlockContext* ObjectPascalParser::exceptionBlock() {
  ExceptionBlockContext *_localctx = _tracker.createInstance<ExceptionBlockContext>(_ctx, getState());
  enterRule(_localctx, 146, ObjectPascalParser::RuleExceptionBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(933);
    match(ObjectPascalParser::ON);
    setState(936);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(934);
      match(ObjectPascalParser::Identifier);
      setState(935);
      match(ObjectPascalParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(938);
    typeId();
    setState(939);
    match(ObjectPascalParser::DO);
    setState(940);
    statement();
    setState(953);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(941);
      match(ObjectPascalParser::SEMI);
      setState(942);
      match(ObjectPascalParser::ON);
      setState(945);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
      case 1: {
        setState(943);
        match(ObjectPascalParser::Identifier);
        setState(944);
        match(ObjectPascalParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(947);
      typeId();
      setState(948);
      match(ObjectPascalParser::DO);
      setState(949);
      statement();
      setState(955);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(956);
    match(ObjectPascalParser::ELSE);
    setState(960);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 43) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 43)) & ((1ULL << (ObjectPascalParser::CASE - 43))
      | (1ULL << (ObjectPascalParser::INHERITED - 43))
      | (1ULL << (ObjectPascalParser::GOTO - 43))
      | (1ULL << (ObjectPascalParser::BEGIN - 43))
      | (1ULL << (ObjectPascalParser::IF - 43))
      | (1ULL << (ObjectPascalParser::REPEAT - 43))
      | (1ULL << (ObjectPascalParser::WHILE - 43))
      | (1ULL << (ObjectPascalParser::FOR - 43))
      | (1ULL << (ObjectPascalParser::WITH - 43))
      | (1ULL << (ObjectPascalParser::TRY - 43))
      | (1ULL << (ObjectPascalParser::RAISE - 43)))) != 0) || _la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral) {
      setState(957);
      statement();
      setState(962);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(964);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(963);
      match(ObjectPascalParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryFinallyStmtContext ------------------------------------------------------------------

ObjectPascalParser::TryFinallyStmtContext::TryFinallyStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::TRY() {
  return getToken(ObjectPascalParser::TRY, 0);
}

std::vector<ObjectPascalParser::StatementContext *> ObjectPascalParser::TryFinallyStmtContext::statement() {
  return getRuleContexts<ObjectPascalParser::StatementContext>();
}

ObjectPascalParser::StatementContext* ObjectPascalParser::TryFinallyStmtContext::statement(size_t i) {
  return getRuleContext<ObjectPascalParser::StatementContext>(i);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::FINALLY() {
  return getToken(ObjectPascalParser::FINALLY, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::TryFinallyStmtContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}


size_t ObjectPascalParser::TryFinallyStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTryFinallyStmt;
}


std::any ObjectPascalParser::TryFinallyStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTryFinallyStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TryFinallyStmtContext* ObjectPascalParser::tryFinallyStmt() {
  TryFinallyStmtContext *_localctx = _tracker.createInstance<TryFinallyStmtContext>(_ctx, getState());
  enterRule(_localctx, 148, ObjectPascalParser::RuleTryFinallyStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(966);
    match(ObjectPascalParser::TRY);
    setState(967);
    statement();
    setState(968);
    match(ObjectPascalParser::FINALLY);
    setState(969);
    statement();
    setState(971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::SEMI) {
      setState(970);
      match(ObjectPascalParser::SEMI);
    }
    setState(973);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RaiseStmtContext ------------------------------------------------------------------

ObjectPascalParser::RaiseStmtContext::RaiseStmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::RAISE() {
  return getToken(ObjectPascalParser::RAISE, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::RaiseStmtContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

tree::TerminalNode* ObjectPascalParser::RaiseStmtContext::AT() {
  return getToken(ObjectPascalParser::AT, 0);
}


size_t ObjectPascalParser::RaiseStmtContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRaiseStmt;
}


std::any ObjectPascalParser::RaiseStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRaiseStmt(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RaiseStmtContext* ObjectPascalParser::raiseStmt() {
  RaiseStmtContext *_localctx = _tracker.createInstance<RaiseStmtContext>(_ctx, getState());
  enterRule(_localctx, 150, ObjectPascalParser::RuleRaiseStmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    match(ObjectPascalParser::RAISE);
    setState(977);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      setState(976);
      match(ObjectPascalParser::Identifier);
      break;
    }

    default:
      break;
    }
    setState(981);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::AT) {
      setState(979);
      match(ObjectPascalParser::AT);
      setState(980);
      match(ObjectPascalParser::Identifier);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclSectionContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclSectionContext::ProcedureDeclSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::procedureDecl() {
  return getRuleContext<ObjectPascalParser::ProcedureDeclContext>(0);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::functionDecl() {
  return getRuleContext<ObjectPascalParser::FunctionDeclContext>(0);
}

ObjectPascalParser::ConstructorDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::constructorDecl() {
  return getRuleContext<ObjectPascalParser::ConstructorDeclContext>(0);
}

ObjectPascalParser::DestructorDeclContext* ObjectPascalParser::ProcedureDeclSectionContext::destructorDecl() {
  return getRuleContext<ObjectPascalParser::DestructorDeclContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDeclSection;
}


std::any ObjectPascalParser::ProcedureDeclSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDeclSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclSectionContext* ObjectPascalParser::procedureDeclSection() {
  ProcedureDeclSectionContext *_localctx = _tracker.createInstance<ProcedureDeclSectionContext>(_ctx, getState());
  enterRule(_localctx, 152, ObjectPascalParser::RuleProcedureDeclSection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(987);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(983);
        procedureDecl();
        break;
      }

      case ObjectPascalParser::FUNCTION: {
        enterOuterAlt(_localctx, 2);
        setState(984);
        functionDecl();
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR: {
        enterOuterAlt(_localctx, 3);
        setState(985);
        constructorDecl();
        break;
      }

      case ObjectPascalParser::DESTRUCTOR: {
        enterOuterAlt(_localctx, 4);
        setState(986);
        destructorDecl();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureDeclContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureDeclContext::ProcedureDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::ProcedureDeclContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ProcedureDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ProcedureDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::ProcedureDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ProcedureDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ProcedureDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::ProcedureDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureDecl;
}


std::any ObjectPascalParser::ProcedureDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureDeclContext* ObjectPascalParser::procedureDecl() {
  ProcedureDeclContext *_localctx = _tracker.createInstance<ProcedureDeclContext>(_ctx, getState());
  enterRule(_localctx, 154, ObjectPascalParser::RuleProcedureDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(989);
    procedureHeading();
    setState(990);
    match(ObjectPascalParser::SEMI);
    setState(992);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(991);
      directive();
    }
    setState(995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(994);
      portabilityDirective();
    }
    setState(997);
    block();
    setState(998);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDeclContext ------------------------------------------------------------------

ObjectPascalParser::FunctionDeclContext::FunctionDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::FunctionDeclContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FunctionDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::FunctionDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::FunctionDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::FunctionDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::FunctionDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::FunctionDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionDecl;
}


std::any ObjectPascalParser::FunctionDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionDeclContext* ObjectPascalParser::functionDecl() {
  FunctionDeclContext *_localctx = _tracker.createInstance<FunctionDeclContext>(_ctx, getState());
  enterRule(_localctx, 156, ObjectPascalParser::RuleFunctionDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1000);
    functionHeading();
    setState(1001);
    match(ObjectPascalParser::SEMI);
    setState(1003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1002);
      directive();
    }
    setState(1006);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1005);
      portabilityDirective();
    }
    setState(1008);
    block();
    setState(1009);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclContext ------------------------------------------------------------------

ObjectPascalParser::ConstructorDeclContext::ConstructorDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::ConstructorDeclContext::constructorHeading() {
  return getRuleContext<ObjectPascalParser::ConstructorHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ConstructorDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::ConstructorDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::ConstructorDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::ConstructorDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::ConstructorDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::ConstructorDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstructorDecl;
}


std::any ObjectPascalParser::ConstructorDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstructorDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstructorDeclContext* ObjectPascalParser::constructorDecl() {
  ConstructorDeclContext *_localctx = _tracker.createInstance<ConstructorDeclContext>(_ctx, getState());
  enterRule(_localctx, 158, ObjectPascalParser::RuleConstructorDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1011);
    constructorHeading();
    setState(1012);
    match(ObjectPascalParser::SEMI);
    setState(1014);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1013);
      directive();
    }
    setState(1017);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1016);
      portabilityDirective();
    }
    setState(1019);
    block();
    setState(1020);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestructorDeclContext ------------------------------------------------------------------

ObjectPascalParser::DestructorDeclContext::DestructorDeclContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::DestructorDeclContext::destructorHeading() {
  return getRuleContext<ObjectPascalParser::DestructorHeadingContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::DestructorDeclContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::DestructorDeclContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

ObjectPascalParser::BlockContext* ObjectPascalParser::DestructorDeclContext::block() {
  return getRuleContext<ObjectPascalParser::BlockContext>(0);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::DestructorDeclContext::directive() {
  return getRuleContext<ObjectPascalParser::DirectiveContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::DestructorDeclContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::DestructorDeclContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDestructorDecl;
}


std::any ObjectPascalParser::DestructorDeclContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDestructorDecl(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DestructorDeclContext* ObjectPascalParser::destructorDecl() {
  DestructorDeclContext *_localctx = _tracker.createInstance<DestructorDeclContext>(_ctx, getState());
  enterRule(_localctx, 160, ObjectPascalParser::RuleDestructorDecl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    destructorHeading();
    setState(1023);
    match(ObjectPascalParser::SEMI);
    setState(1025);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & ((1ULL << (ObjectPascalParser::VIRTUAL - 47))
      | (1ULL << (ObjectPascalParser::ABSTRACT - 47))
      | (1ULL << (ObjectPascalParser::CDECL - 47))
      | (1ULL << (ObjectPascalParser::REGISTER - 47))
      | (1ULL << (ObjectPascalParser::DYNAMIC - 47))
      | (1ULL << (ObjectPascalParser::EXPORT - 47))
      | (1ULL << (ObjectPascalParser::EXTERNAL - 47))
      | (1ULL << (ObjectPascalParser::FAR - 47))
      | (1ULL << (ObjectPascalParser::FORWARD - 47)))) != 0) || ((((_la - 111) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 111)) & ((1ULL << (ObjectPascalParser::MESSAGE - 111))
      | (1ULL << (ObjectPascalParser::OVERRIDE - 111))
      | (1ULL << (ObjectPascalParser::OVERLOAD - 111))
      | (1ULL << (ObjectPascalParser::PASCAL - 111))
      | (1ULL << (ObjectPascalParser::REINTRODUCE - 111))
      | (1ULL << (ObjectPascalParser::SAFECALL - 111))
      | (1ULL << (ObjectPascalParser::STDCALL - 111))
      | (1ULL << (ObjectPascalParser::VARARGS - 111))
      | (1ULL << (ObjectPascalParser::LOCAL - 111))
      | (1ULL << (ObjectPascalParser::NEAR - 111))
      | (1ULL << (ObjectPascalParser::INLINE - 111))
      | (1ULL << (ObjectPascalParser::ASSEMBLER - 111)))) != 0)) {
      setState(1024);
      directive();
    }
    setState(1028);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1027);
      portabilityDirective();
    }
    setState(1030);
    block();
    setState(1031);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionHeadingContext ------------------------------------------------------------------

ObjectPascalParser::FunctionHeadingContext::FunctionHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::FUNCTION() {
  return getToken(ObjectPascalParser::FUNCTION, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::FunctionHeadingContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FunctionHeadingContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::FunctionHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::FunctionHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFunctionHeading;
}


std::any ObjectPascalParser::FunctionHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFunctionHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::functionHeading() {
  FunctionHeadingContext *_localctx = _tracker.createInstance<FunctionHeadingContext>(_ctx, getState());
  enterRule(_localctx, 162, ObjectPascalParser::RuleFunctionHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1033);
    match(ObjectPascalParser::FUNCTION);
    setState(1034);
    match(ObjectPascalParser::Identifier);
    setState(1036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1035);
      formalParameters();
    }
    setState(1038);
    match(ObjectPascalParser::COLON);
    setState(1041);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::REAL:
      case ObjectPascalParser::SINGLE:
      case ObjectPascalParser::DOUBLE:
      case ObjectPascalParser::EXTENDED:
      case ObjectPascalParser::CURRENCY:
      case ObjectPascalParser::COMP:
      case ObjectPascalParser::SHORTINT:
      case ObjectPascalParser::SMALLINT:
      case ObjectPascalParser::INTEGER:
      case ObjectPascalParser::BYTE:
      case ObjectPascalParser::LONGINT:
      case ObjectPascalParser::WORD:
      case ObjectPascalParser::BOOLEAN:
      case ObjectPascalParser::CHAR:
      case ObjectPascalParser::WIDECHAR:
      case ObjectPascalParser::PCHAR:
      case ObjectPascalParser::REAL48:
      case ObjectPascalParser::LEFT_PAREN:
      case ObjectPascalParser::CARDINAL:
      case ObjectPascalParser::INT64:
      case ObjectPascalParser::LONGWORD:
      case ObjectPascalParser::Identifier:
      case ObjectPascalParser::Integer:
      case ObjectPascalParser::Float:
      case ObjectPascalParser::StringLiteral: {
        setState(1039);
        simpleType();
        break;
      }

      case ObjectPascalParser::STRING: {
        setState(1040);
        match(ObjectPascalParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ProcedureHeadingContext::ProcedureHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::PROCEDURE() {
  return getToken(ObjectPascalParser::PROCEDURE, 0);
}

tree::TerminalNode* ObjectPascalParser::ProcedureHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ProcedureHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ProcedureHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleProcedureHeading;
}


std::any ObjectPascalParser::ProcedureHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitProcedureHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::procedureHeading() {
  ProcedureHeadingContext *_localctx = _tracker.createInstance<ProcedureHeadingContext>(_ctx, getState());
  enterRule(_localctx, 164, ObjectPascalParser::RuleProcedureHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1043);
    match(ObjectPascalParser::PROCEDURE);
    setState(1044);
    match(ObjectPascalParser::Identifier);
    setState(1046);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1045);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

ObjectPascalParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}

std::vector<ObjectPascalParser::FormalParmContext *> ObjectPascalParser::FormalParametersContext::formalParm() {
  return getRuleContexts<ObjectPascalParser::FormalParmContext>();
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::FormalParametersContext::formalParm(size_t i) {
  return getRuleContext<ObjectPascalParser::FormalParmContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::FormalParametersContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::FormalParametersContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::FormalParametersContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParameters;
}


std::any ObjectPascalParser::FormalParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameters(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 166, ObjectPascalParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1048);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1050);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::VAR - 14))
      | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0) || _la == ObjectPascalParser::Identifier) {
      setState(1049);
      formalParm();
    }
    setState(1056);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::COMMA) {
      setState(1052);
      match(ObjectPascalParser::COMMA);
      setState(1053);
      formalParm();
      setState(1058);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1059);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParmContext ------------------------------------------------------------------

ObjectPascalParser::FormalParmContext::FormalParmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::FormalParmContext::parameter() {
  return getRuleContext<ObjectPascalParser::ParameterContext>(0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::VAR() {
  return getToken(ObjectPascalParser::VAR, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::CONST() {
  return getToken(ObjectPascalParser::CONST, 0);
}

tree::TerminalNode* ObjectPascalParser::FormalParmContext::OUT() {
  return getToken(ObjectPascalParser::OUT, 0);
}


size_t ObjectPascalParser::FormalParmContext::getRuleIndex() const {
  return ObjectPascalParser::RuleFormalParm;
}


std::any ObjectPascalParser::FormalParmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitFormalParm(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::FormalParmContext* ObjectPascalParser::formalParm() {
  FormalParmContext *_localctx = _tracker.createInstance<FormalParmContext>(_ctx, getState());
  enterRule(_localctx, 168, ObjectPascalParser::RuleFormalParm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1062);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 14) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
      | (1ULL << (ObjectPascalParser::VAR - 14))
      | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0)) {
      setState(1061);
      _la = _input->LA(1);
      if (!(((((_la - 14) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 14)) & ((1ULL << (ObjectPascalParser::CONST - 14))
        | (1ULL << (ObjectPascalParser::VAR - 14))
        | (1ULL << (ObjectPascalParser::OUT - 14)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1064);
    parameter();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

ObjectPascalParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ParameterContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::SimpleTypeContext* ObjectPascalParser::ParameterContext::simpleType() {
  return getRuleContext<ObjectPascalParser::SimpleTypeContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::STRING() {
  return getToken(ObjectPascalParser::STRING, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::FILE() {
  return getToken(ObjectPascalParser::FILE, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ARRAY() {
  return getToken(ObjectPascalParser::ARRAY, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::OF() {
  return getToken(ObjectPascalParser::OF, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::ParameterContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::ParameterContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}


size_t ObjectPascalParser::ParameterContext::getRuleIndex() const {
  return ObjectPascalParser::RuleParameter;
}


std::any ObjectPascalParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ParameterContext* ObjectPascalParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 170, ObjectPascalParser::RuleParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1086);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1066);
      identList();
      setState(1077);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::COLON) {
        setState(1067);
        match(ObjectPascalParser::COLON);
        setState(1075);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::REAL:
          case ObjectPascalParser::SINGLE:
          case ObjectPascalParser::DOUBLE:
          case ObjectPascalParser::EXTENDED:
          case ObjectPascalParser::CURRENCY:
          case ObjectPascalParser::COMP:
          case ObjectPascalParser::SHORTINT:
          case ObjectPascalParser::SMALLINT:
          case ObjectPascalParser::INTEGER:
          case ObjectPascalParser::BYTE:
          case ObjectPascalParser::LONGINT:
          case ObjectPascalParser::WORD:
          case ObjectPascalParser::BOOLEAN:
          case ObjectPascalParser::CHAR:
          case ObjectPascalParser::WIDECHAR:
          case ObjectPascalParser::PCHAR:
          case ObjectPascalParser::ARRAY:
          case ObjectPascalParser::REAL48:
          case ObjectPascalParser::LEFT_PAREN:
          case ObjectPascalParser::CARDINAL:
          case ObjectPascalParser::INT64:
          case ObjectPascalParser::LONGWORD:
          case ObjectPascalParser::Identifier:
          case ObjectPascalParser::Integer:
          case ObjectPascalParser::Float:
          case ObjectPascalParser::StringLiteral: {
            setState(1070);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == ObjectPascalParser::ARRAY) {
              setState(1068);
              match(ObjectPascalParser::ARRAY);
              setState(1069);
              match(ObjectPascalParser::OF);
            }
            setState(1072);
            simpleType();
            break;
          }

          case ObjectPascalParser::STRING: {
            setState(1073);
            match(ObjectPascalParser::STRING);
            break;
          }

          case ObjectPascalParser::FILE: {
            setState(1074);
            match(ObjectPascalParser::FILE);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1079);
      match(ObjectPascalParser::Identifier);
      setState(1080);
      match(ObjectPascalParser::COLON);
      setState(1081);
      simpleType();
      setState(1084);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::ASSIGN) {
        setState(1082);
        match(ObjectPascalParser::ASSIGN);
        setState(1083);
        constExpr();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveContext ------------------------------------------------------------------

ObjectPascalParser::DirectiveContext::DirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::CDECL() {
  return getToken(ObjectPascalParser::CDECL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REGISTER() {
  return getToken(ObjectPascalParser::REGISTER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::DYNAMIC() {
  return getToken(ObjectPascalParser::DYNAMIC, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VIRTUAL() {
  return getToken(ObjectPascalParser::VIRTUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::EXPORT() {
  return getToken(ObjectPascalParser::EXPORT, 0);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::DirectiveContext::externalDirective() {
  return getRuleContext<ObjectPascalParser::ExternalDirectiveContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::NEAR() {
  return getToken(ObjectPascalParser::NEAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FAR() {
  return getToken(ObjectPascalParser::FAR, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::FORWARD() {
  return getToken(ObjectPascalParser::FORWARD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::INLINE() {
  return getToken(ObjectPascalParser::INLINE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ASSEMBLER() {
  return getToken(ObjectPascalParser::ASSEMBLER, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::MESSAGE() {
  return getToken(ObjectPascalParser::MESSAGE, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::DirectiveContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERRIDE() {
  return getToken(ObjectPascalParser::OVERRIDE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::OVERLOAD() {
  return getToken(ObjectPascalParser::OVERLOAD, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::PASCAL() {
  return getToken(ObjectPascalParser::PASCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::REINTRODUCE() {
  return getToken(ObjectPascalParser::REINTRODUCE, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::SAFECALL() {
  return getToken(ObjectPascalParser::SAFECALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::STDCALL() {
  return getToken(ObjectPascalParser::STDCALL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::VARARGS() {
  return getToken(ObjectPascalParser::VARARGS, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::LOCAL() {
  return getToken(ObjectPascalParser::LOCAL, 0);
}

tree::TerminalNode* ObjectPascalParser::DirectiveContext::ABSTRACT() {
  return getToken(ObjectPascalParser::ABSTRACT, 0);
}


size_t ObjectPascalParser::DirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDirective;
}


std::any ObjectPascalParser::DirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DirectiveContext* ObjectPascalParser::directive() {
  DirectiveContext *_localctx = _tracker.createInstance<DirectiveContext>(_ctx, getState());
  enterRule(_localctx, 172, ObjectPascalParser::RuleDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1110);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CDECL: {
        enterOuterAlt(_localctx, 1);
        setState(1088);
        match(ObjectPascalParser::CDECL);
        break;
      }

      case ObjectPascalParser::REGISTER: {
        enterOuterAlt(_localctx, 2);
        setState(1089);
        match(ObjectPascalParser::REGISTER);
        break;
      }

      case ObjectPascalParser::DYNAMIC: {
        enterOuterAlt(_localctx, 3);
        setState(1090);
        match(ObjectPascalParser::DYNAMIC);
        break;
      }

      case ObjectPascalParser::VIRTUAL: {
        enterOuterAlt(_localctx, 4);
        setState(1091);
        match(ObjectPascalParser::VIRTUAL);
        break;
      }

      case ObjectPascalParser::EXPORT: {
        enterOuterAlt(_localctx, 5);
        setState(1092);
        match(ObjectPascalParser::EXPORT);
        break;
      }

      case ObjectPascalParser::EXTERNAL: {
        enterOuterAlt(_localctx, 6);
        setState(1093);
        externalDirective();
        break;
      }

      case ObjectPascalParser::NEAR: {
        enterOuterAlt(_localctx, 7);
        setState(1094);
        match(ObjectPascalParser::NEAR);
        break;
      }

      case ObjectPascalParser::FAR: {
        enterOuterAlt(_localctx, 8);
        setState(1095);
        match(ObjectPascalParser::FAR);
        break;
      }

      case ObjectPascalParser::FORWARD: {
        enterOuterAlt(_localctx, 9);
        setState(1096);
        match(ObjectPascalParser::FORWARD);
        break;
      }

      case ObjectPascalParser::INLINE: {
        enterOuterAlt(_localctx, 10);
        setState(1097);
        match(ObjectPascalParser::INLINE);
        break;
      }

      case ObjectPascalParser::ASSEMBLER: {
        enterOuterAlt(_localctx, 11);
        setState(1098);
        match(ObjectPascalParser::ASSEMBLER);
        break;
      }

      case ObjectPascalParser::MESSAGE: {
        enterOuterAlt(_localctx, 12);
        setState(1099);
        match(ObjectPascalParser::MESSAGE);
        setState(1100);
        constExpr();
        break;
      }

      case ObjectPascalParser::OVERRIDE: {
        enterOuterAlt(_localctx, 13);
        setState(1101);
        match(ObjectPascalParser::OVERRIDE);
        break;
      }

      case ObjectPascalParser::OVERLOAD: {
        enterOuterAlt(_localctx, 14);
        setState(1102);
        match(ObjectPascalParser::OVERLOAD);
        break;
      }

      case ObjectPascalParser::PASCAL: {
        enterOuterAlt(_localctx, 15);
        setState(1103);
        match(ObjectPascalParser::PASCAL);
        break;
      }

      case ObjectPascalParser::REINTRODUCE: {
        enterOuterAlt(_localctx, 16);
        setState(1104);
        match(ObjectPascalParser::REINTRODUCE);
        break;
      }

      case ObjectPascalParser::SAFECALL: {
        enterOuterAlt(_localctx, 17);
        setState(1105);
        match(ObjectPascalParser::SAFECALL);
        break;
      }

      case ObjectPascalParser::STDCALL: {
        enterOuterAlt(_localctx, 18);
        setState(1106);
        match(ObjectPascalParser::STDCALL);
        break;
      }

      case ObjectPascalParser::VARARGS: {
        enterOuterAlt(_localctx, 19);
        setState(1107);
        match(ObjectPascalParser::VARARGS);
        break;
      }

      case ObjectPascalParser::LOCAL: {
        enterOuterAlt(_localctx, 20);
        setState(1108);
        match(ObjectPascalParser::LOCAL);
        break;
      }

      case ObjectPascalParser::ABSTRACT: {
        enterOuterAlt(_localctx, 21);
        setState(1109);
        match(ObjectPascalParser::ABSTRACT);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExternalDirectiveContext ------------------------------------------------------------------

ObjectPascalParser::ExternalDirectiveContext::ExternalDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::EXTERNAL() {
  return getToken(ObjectPascalParser::EXTERNAL, 0);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ExternalDirectiveContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::NAME() {
  return getToken(ObjectPascalParser::NAME, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::ExternalDirectiveContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::ExternalDirectiveContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}


size_t ObjectPascalParser::ExternalDirectiveContext::getRuleIndex() const {
  return ObjectPascalParser::RuleExternalDirective;
}


std::any ObjectPascalParser::ExternalDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitExternalDirective(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ExternalDirectiveContext* ObjectPascalParser::externalDirective() {
  ExternalDirectiveContext *_localctx = _tracker.createInstance<ExternalDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 174, ObjectPascalParser::RuleExternalDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1112);
    match(ObjectPascalParser::EXTERNAL);
    setState(1123);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::StringLiteral) {
      setState(1113);
      string();
      setState(1121);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ObjectPascalParser::NAME) {
        setState(1114);
        match(ObjectPascalParser::NAME);
        setState(1118);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ObjectPascalParser::Identifier) {
          setState(1115);
          match(ObjectPascalParser::Identifier);
          setState(1120);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectTypeContext ------------------------------------------------------------------

ObjectPascalParser::ObjectTypeContext::ObjectTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::OBJECT() {
  return getToken(ObjectPascalParser::OBJECT, 0);
}

tree::TerminalNode* ObjectPascalParser::ObjectTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::ObjectTypeContext::objHeritage() {
  return getRuleContext<ObjectPascalParser::ObjHeritageContext>(0);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ObjectTypeContext::objFieldList() {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(0);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ObjectTypeContext::methodList() {
  return getRuleContext<ObjectPascalParser::MethodListContext>(0);
}


size_t ObjectPascalParser::ObjectTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjectType;
}


std::any ObjectPascalParser::ObjectTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjectType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjectTypeContext* ObjectPascalParser::objectType() {
  ObjectTypeContext *_localctx = _tracker.createInstance<ObjectTypeContext>(_ctx, getState());
  enterRule(_localctx, 176, ObjectPascalParser::RuleObjectType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    match(ObjectPascalParser::OBJECT);
    setState(1127);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1126);
      objHeritage();
    }
    setState(1130);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::Identifier) {
      setState(1129);
      objFieldList();
    }
    setState(1133);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 16) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 16)) & ((1ULL << (ObjectPascalParser::CLASS - 16))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::FUNCTION - 16))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 16)))) != 0)) {
      setState(1132);
      methodList();
    }
    setState(1135);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ObjHeritageContext::ObjHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::ObjHeritageContext::qualId() {
  return getRuleContext<ObjectPascalParser::QualIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ObjHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjHeritage;
}


std::any ObjectPascalParser::ObjHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjHeritageContext* ObjectPascalParser::objHeritage() {
  ObjHeritageContext *_localctx = _tracker.createInstance<ObjHeritageContext>(_ctx, getState());
  enterRule(_localctx, 178, ObjectPascalParser::RuleObjHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1137);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1138);
    qualId();
    setState(1139);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodListContext ------------------------------------------------------------------

ObjectPascalParser::MethodListContext::MethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}

std::vector<ObjectPascalParser::MethodHeadingContext *> ObjectPascalParser::MethodListContext::methodHeading() {
  return getRuleContexts<ObjectPascalParser::MethodHeadingContext>();
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::MethodListContext::methodHeading(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodHeadingContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::VIRTUAL() {
  return getTokens(ObjectPascalParser::VIRTUAL);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::VIRTUAL(size_t i) {
  return getToken(ObjectPascalParser::VIRTUAL, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::MethodListContext::ABSTRACT() {
  return getTokens(ObjectPascalParser::ABSTRACT);
}

tree::TerminalNode* ObjectPascalParser::MethodListContext::ABSTRACT(size_t i) {
  return getToken(ObjectPascalParser::ABSTRACT, i);
}


size_t ObjectPascalParser::MethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodList;
}


std::any ObjectPascalParser::MethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::methodList() {
  MethodListContext *_localctx = _tracker.createInstance<MethodListContext>(_ctx, getState());
  enterRule(_localctx, 180, ObjectPascalParser::RuleMethodList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1152); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1141);
              methodHeading();
              setState(1148);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
              case 1: {
                setState(1142);
                match(ObjectPascalParser::SEMI);
                setState(1143);
                match(ObjectPascalParser::VIRTUAL);
                setState(1146);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
                case 1: {
                  setState(1144);
                  match(ObjectPascalParser::SEMI);
                  setState(1145);
                  match(ObjectPascalParser::ABSTRACT);
                  break;
                }

                default:
                  break;
                }
                break;
              }

              default:
                break;
              }
              setState(1150);
              match(ObjectPascalParser::SEMI);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1154); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodHeadingContext ------------------------------------------------------------------

ObjectPascalParser::MethodHeadingContext::MethodHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ProcedureHeadingContext* ObjectPascalParser::MethodHeadingContext::procedureHeading() {
  return getRuleContext<ObjectPascalParser::ProcedureHeadingContext>(0);
}

ObjectPascalParser::FunctionHeadingContext* ObjectPascalParser::MethodHeadingContext::functionHeading() {
  return getRuleContext<ObjectPascalParser::FunctionHeadingContext>(0);
}

tree::TerminalNode* ObjectPascalParser::MethodHeadingContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::MethodHeadingContext::constructorHeading() {
  return getRuleContext<ObjectPascalParser::ConstructorHeadingContext>(0);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::MethodHeadingContext::destructorHeading() {
  return getRuleContext<ObjectPascalParser::DestructorHeadingContext>(0);
}


size_t ObjectPascalParser::MethodHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMethodHeading;
}


std::any ObjectPascalParser::MethodHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMethodHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MethodHeadingContext* ObjectPascalParser::methodHeading() {
  MethodHeadingContext *_localctx = _tracker.createInstance<MethodHeadingContext>(_ctx, getState());
  enterRule(_localctx, 182, ObjectPascalParser::RuleMethodHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1165);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::CLASS:
      case ObjectPascalParser::FUNCTION:
      case ObjectPascalParser::PROCEDURE: {
        enterOuterAlt(_localctx, 1);
        setState(1157);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::CLASS) {
          setState(1156);
          match(ObjectPascalParser::CLASS);
        }
        setState(1161);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::PROCEDURE: {
            setState(1159);
            procedureHeading();
            break;
          }

          case ObjectPascalParser::FUNCTION: {
            setState(1160);
            functionHeading();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::CONSTRUCTOR: {
        enterOuterAlt(_localctx, 2);
        setState(1163);
        constructorHeading();
        break;
      }

      case ObjectPascalParser::DESTRUCTOR: {
        enterOuterAlt(_localctx, 3);
        setState(1164);
        destructorHeading();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::ConstructorHeadingContext::ConstructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::CONSTRUCTOR() {
  return getToken(ObjectPascalParser::CONSTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::ConstructorHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::ConstructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::ConstructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstructorHeading;
}


std::any ObjectPascalParser::ConstructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstructorHeadingContext* ObjectPascalParser::constructorHeading() {
  ConstructorHeadingContext *_localctx = _tracker.createInstance<ConstructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 184, ObjectPascalParser::RuleConstructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1167);
    match(ObjectPascalParser::CONSTRUCTOR);
    setState(1168);
    match(ObjectPascalParser::Identifier);
    setState(1170);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1169);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestructorHeadingContext ------------------------------------------------------------------

ObjectPascalParser::DestructorHeadingContext::DestructorHeadingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::DESTRUCTOR() {
  return getToken(ObjectPascalParser::DESTRUCTOR, 0);
}

tree::TerminalNode* ObjectPascalParser::DestructorHeadingContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::FormalParametersContext* ObjectPascalParser::DestructorHeadingContext::formalParameters() {
  return getRuleContext<ObjectPascalParser::FormalParametersContext>(0);
}


size_t ObjectPascalParser::DestructorHeadingContext::getRuleIndex() const {
  return ObjectPascalParser::RuleDestructorHeading;
}


std::any ObjectPascalParser::DestructorHeadingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitDestructorHeading(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::DestructorHeadingContext* ObjectPascalParser::destructorHeading() {
  DestructorHeadingContext *_localctx = _tracker.createInstance<DestructorHeadingContext>(_ctx, getState());
  enterRule(_localctx, 186, ObjectPascalParser::RuleDestructorHeading);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1172);
    match(ObjectPascalParser::DESTRUCTOR);
    setState(1173);
    match(ObjectPascalParser::Identifier);
    setState(1175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1174);
      formalParameters();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ObjFieldListContext::ObjFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ObjFieldListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ObjFieldListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeContext* ObjectPascalParser::ObjFieldListContext::type() {
  return getRuleContext<ObjectPascalParser::TypeContext>(0);
}


size_t ObjectPascalParser::ObjFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleObjFieldList;
}


std::any ObjectPascalParser::ObjFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitObjFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::objFieldList() {
  ObjFieldListContext *_localctx = _tracker.createInstance<ObjFieldListContext>(_ctx, getState());
  enterRule(_localctx, 188, ObjectPascalParser::RuleObjFieldList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1177);
    identList();
    setState(1178);
    match(ObjectPascalParser::COLON);
    setState(1179);
    type();
    setState(1181);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitSectionContext ------------------------------------------------------------------

ObjectPascalParser::InitSectionContext::InitSectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::INITIALIZATION() {
  return getToken(ObjectPascalParser::INITIALIZATION, 0);
}

std::vector<ObjectPascalParser::StmtListContext *> ObjectPascalParser::InitSectionContext::stmtList() {
  return getRuleContexts<ObjectPascalParser::StmtListContext>();
}

ObjectPascalParser::StmtListContext* ObjectPascalParser::InitSectionContext::stmtList(size_t i) {
  return getRuleContext<ObjectPascalParser::StmtListContext>(i);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::FINALIZATION() {
  return getToken(ObjectPascalParser::FINALIZATION, 0);
}

tree::TerminalNode* ObjectPascalParser::InitSectionContext::BEGIN() {
  return getToken(ObjectPascalParser::BEGIN, 0);
}


size_t ObjectPascalParser::InitSectionContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInitSection;
}


std::any ObjectPascalParser::InitSectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInitSection(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InitSectionContext* ObjectPascalParser::initSection() {
  InitSectionContext *_localctx = _tracker.createInstance<InitSectionContext>(_ctx, getState());
  enterRule(_localctx, 190, ObjectPascalParser::RuleInitSection);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1196);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INITIALIZATION: {
        enterOuterAlt(_localctx, 1);
        setState(1183);
        match(ObjectPascalParser::INITIALIZATION);
        setState(1184);
        stmtList();
        setState(1187);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ObjectPascalParser::FINALIZATION) {
          setState(1185);
          match(ObjectPascalParser::FINALIZATION);
          setState(1186);
          stmtList();
        }
        setState(1189);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::BEGIN: {
        enterOuterAlt(_localctx, 2);
        setState(1191);
        match(ObjectPascalParser::BEGIN);
        setState(1192);
        stmtList();
        setState(1193);
        match(ObjectPascalParser::END);
        break;
      }

      case ObjectPascalParser::END: {
        enterOuterAlt(_localctx, 3);
        setState(1195);
        match(ObjectPascalParser::END);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

ObjectPascalParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::CLASS() {
  return getToken(ObjectPascalParser::CLASS, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::ClassTypeContext::classHeritage() {
  return getRuleContext<ObjectPascalParser::ClassHeritageContext>(0);
}

std::vector<ObjectPascalParser::ClassFieldListContext *> ObjectPascalParser::ClassTypeContext::classFieldList() {
  return getRuleContexts<ObjectPascalParser::ClassFieldListContext>();
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::ClassTypeContext::classFieldList(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassFieldListContext>(i);
}

std::vector<ObjectPascalParser::ClassMethodListContext *> ObjectPascalParser::ClassTypeContext::classMethodList() {
  return getRuleContexts<ObjectPascalParser::ClassMethodListContext>();
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::ClassTypeContext::classMethodList(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(i);
}

std::vector<ObjectPascalParser::ClassPropertyListContext *> ObjectPascalParser::ClassTypeContext::classPropertyList() {
  return getRuleContexts<ObjectPascalParser::ClassPropertyListContext>();
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::ClassTypeContext::classPropertyList(size_t i) {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(i);
}


size_t ObjectPascalParser::ClassTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassType;
}


std::any ObjectPascalParser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassTypeContext* ObjectPascalParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 192, ObjectPascalParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1198);
    match(ObjectPascalParser::CLASS);
    setState(1200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1199);
      classHeritage();
    }
    setState(1207);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 16) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 16)) & ((1ULL << (ObjectPascalParser::CLASS - 16))
      | (1ULL << (ObjectPascalParser::CONSTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::DESTRUCTOR - 16))
      | (1ULL << (ObjectPascalParser::PUBLIC - 16))
      | (1ULL << (ObjectPascalParser::PROTECTED - 16))
      | (1ULL << (ObjectPascalParser::PRIVATE - 16))
      | (1ULL << (ObjectPascalParser::PUBLISHED - 16))
      | (1ULL << (ObjectPascalParser::PROPERTY - 16))
      | (1ULL << (ObjectPascalParser::FUNCTION - 16))
      | (1ULL << (ObjectPascalParser::PROCEDURE - 16)))) != 0) || _la == ObjectPascalParser::Identifier) {
      setState(1205);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
      case 1: {
        setState(1202);
        classFieldList();
        break;
      }

      case 2: {
        setState(1203);
        classMethodList();
        break;
      }

      case 3: {
        setState(1204);
        classPropertyList();
        break;
      }

      default:
        break;
      }
      setState(1209);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1210);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeritageContext ------------------------------------------------------------------

ObjectPascalParser::ClassHeritageContext::ClassHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ClassHeritageContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::ClassHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::ClassHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassHeritage;
}


std::any ObjectPascalParser::ClassHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassHeritageContext* ObjectPascalParser::classHeritage() {
  ClassHeritageContext *_localctx = _tracker.createInstance<ClassHeritageContext>(_ctx, getState());
  enterRule(_localctx, 194, ObjectPascalParser::RuleClassHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1212);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1213);
    identList();
    setState(1214);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassFieldListContext ------------------------------------------------------------------

ObjectPascalParser::ClassFieldListContext::ClassFieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassFieldListContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

std::vector<ObjectPascalParser::ObjFieldListContext *> ObjectPascalParser::ClassFieldListContext::objFieldList() {
  return getRuleContexts<ObjectPascalParser::ObjFieldListContext>();
}

ObjectPascalParser::ObjFieldListContext* ObjectPascalParser::ClassFieldListContext::objFieldList(size_t i) {
  return getRuleContext<ObjectPascalParser::ObjFieldListContext>(i);
}


size_t ObjectPascalParser::ClassFieldListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassFieldList;
}


std::any ObjectPascalParser::ClassFieldListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassFieldList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassFieldListContext* ObjectPascalParser::classFieldList() {
  ClassFieldListContext *_localctx = _tracker.createInstance<ClassFieldListContext>(_ctx, getState());
  enterRule(_localctx, 196, ObjectPascalParser::RuleClassFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0)) {
      setState(1216);
      classVisibility();
    }
    setState(1220); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1219);
              objFieldList();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1222); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassMethodListContext ------------------------------------------------------------------

ObjectPascalParser::ClassMethodListContext::ClassMethodListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassMethodListContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

std::vector<ObjectPascalParser::MethodListContext *> ObjectPascalParser::ClassMethodListContext::methodList() {
  return getRuleContexts<ObjectPascalParser::MethodListContext>();
}

ObjectPascalParser::MethodListContext* ObjectPascalParser::ClassMethodListContext::methodList(size_t i) {
  return getRuleContext<ObjectPascalParser::MethodListContext>(i);
}


size_t ObjectPascalParser::ClassMethodListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassMethodList;
}


std::any ObjectPascalParser::ClassMethodListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassMethodList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::classMethodList() {
  ClassMethodListContext *_localctx = _tracker.createInstance<ClassMethodListContext>(_ctx, getState());
  enterRule(_localctx, 198, ObjectPascalParser::RuleClassMethodList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1225);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0)) {
      setState(1224);
      classVisibility();
    }
    setState(1228); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1227);
              methodList();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1230); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassPropertyListContext ------------------------------------------------------------------

ObjectPascalParser::ClassPropertyListContext::ClassPropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::ClassPropertyListContext::classVisibility() {
  return getRuleContext<ObjectPascalParser::ClassVisibilityContext>(0);
}

std::vector<ObjectPascalParser::PropertyListContext *> ObjectPascalParser::ClassPropertyListContext::propertyList() {
  return getRuleContexts<ObjectPascalParser::PropertyListContext>();
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::ClassPropertyListContext::propertyList(size_t i) {
  return getRuleContext<ObjectPascalParser::PropertyListContext>(i);
}


size_t ObjectPascalParser::ClassPropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassPropertyList;
}


std::any ObjectPascalParser::ClassPropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::classPropertyList() {
  ClassPropertyListContext *_localctx = _tracker.createInstance<ClassPropertyListContext>(_ctx, getState());
  enterRule(_localctx, 200, ObjectPascalParser::RuleClassPropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1233);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0)) {
      setState(1232);
      classVisibility();
    }
    setState(1236); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1235);
              propertyList();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1238); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyListContext::PropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::PROPERTY() {
  return getToken(ObjectPascalParser::PROPERTY, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyListContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::PropertyListContext::propertyInterface() {
  return getRuleContext<ObjectPascalParser::PropertyInterfaceContext>(0);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::PropertyListContext::propertySpecifiers() {
  return getRuleContext<ObjectPascalParser::PropertySpecifiersContext>(0);
}

ObjectPascalParser::PortabilityDirectiveContext* ObjectPascalParser::PropertyListContext::portabilityDirective() {
  return getRuleContext<ObjectPascalParser::PortabilityDirectiveContext>(0);
}


size_t ObjectPascalParser::PropertyListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyList;
}


std::any ObjectPascalParser::PropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyListContext* ObjectPascalParser::propertyList() {
  PropertyListContext *_localctx = _tracker.createInstance<PropertyListContext>(_ctx, getState());
  enterRule(_localctx, 202, ObjectPascalParser::RulePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1240);
    match(ObjectPascalParser::PROPERTY);
    setState(1241);
    match(ObjectPascalParser::Identifier);
    setState(1243);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET

    || _la == ObjectPascalParser::COLON) {
      setState(1242);
      propertyInterface();
    }
    setState(1246);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::INDEX)
      | (1ULL << ObjectPascalParser::READ)
      | (1ULL << ObjectPascalParser::WRITE)
      | (1ULL << ObjectPascalParser::STORED)
      | (1ULL << ObjectPascalParser::DEFAULT)
      | (1ULL << ObjectPascalParser::NODEFAULT)
      | (1ULL << ObjectPascalParser::IMPLEMENTS))) != 0)) {
      setState(1245);
      propertySpecifiers();
    }
    setState(1249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LIBRARY || _la == ObjectPascalParser::PLATFORM

    || _la == ObjectPascalParser::DEPRECATED) {
      setState(1248);
      portabilityDirective();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyInterfaceContext ------------------------------------------------------------------

ObjectPascalParser::PropertyInterfaceContext::PropertyInterfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyInterfaceContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::PropertyInterfaceContext::propertyParameterList() {
  return getRuleContext<ObjectPascalParser::PropertyParameterListContext>(0);
}


size_t ObjectPascalParser::PropertyInterfaceContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyInterface;
}


std::any ObjectPascalParser::PropertyInterfaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyInterface(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyInterfaceContext* ObjectPascalParser::propertyInterface() {
  PropertyInterfaceContext *_localctx = _tracker.createInstance<PropertyInterfaceContext>(_ctx, getState());
  enterRule(_localctx, 204, ObjectPascalParser::RulePropertyInterface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_BRACKET) {
      setState(1251);
      propertyParameterList();
    }
    setState(1254);
    match(ObjectPascalParser::COLON);
    setState(1255);
    match(ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyParameterListContext ------------------------------------------------------------------

ObjectPascalParser::PropertyParameterListContext::PropertyParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::LEFT_BRACKET() {
  return getToken(ObjectPascalParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::RIGHT_BRACKET() {
  return getToken(ObjectPascalParser::RIGHT_BRACKET, 0);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::PropertyParameterListContext::identList() {
  return getRuleContext<ObjectPascalParser::IdentListContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::COLON() {
  return getToken(ObjectPascalParser::COLON, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertyParameterListContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::PropertyParameterListContext::SEMI() {
  return getTokens(ObjectPascalParser::SEMI);
}

tree::TerminalNode* ObjectPascalParser::PropertyParameterListContext::SEMI(size_t i) {
  return getToken(ObjectPascalParser::SEMI, i);
}


size_t ObjectPascalParser::PropertyParameterListContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertyParameterList;
}


std::any ObjectPascalParser::PropertyParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertyParameterList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertyParameterListContext* ObjectPascalParser::propertyParameterList() {
  PropertyParameterListContext *_localctx = _tracker.createInstance<PropertyParameterListContext>(_ctx, getState());
  enterRule(_localctx, 206, ObjectPascalParser::RulePropertyParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    match(ObjectPascalParser::LEFT_BRACKET);

    setState(1258);
    identList();
    setState(1259);
    match(ObjectPascalParser::COLON);
    setState(1260);
    typeId();
    setState(1265);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ObjectPascalParser::SEMI) {
      setState(1262);
      match(ObjectPascalParser::SEMI);
      setState(1267);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1268);
    match(ObjectPascalParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertySpecifiersContext ------------------------------------------------------------------

ObjectPascalParser::PropertySpecifiersContext::PropertySpecifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::INDEX() {
  return getToken(ObjectPascalParser::INDEX, 0);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::PropertySpecifiersContext::constExpr() {
  return getRuleContext<ObjectPascalParser::ConstExprContext>(0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::READ() {
  return getToken(ObjectPascalParser::READ, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::WRITE() {
  return getToken(ObjectPascalParser::WRITE, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::STORED() {
  return getToken(ObjectPascalParser::STORED, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::NODEFAULT() {
  return getToken(ObjectPascalParser::NODEFAULT, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::DEFAULT() {
  return getToken(ObjectPascalParser::DEFAULT, 0);
}

tree::TerminalNode* ObjectPascalParser::PropertySpecifiersContext::IMPLEMENTS() {
  return getToken(ObjectPascalParser::IMPLEMENTS, 0);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::PropertySpecifiersContext::typeId() {
  return getRuleContext<ObjectPascalParser::TypeIdContext>(0);
}


size_t ObjectPascalParser::PropertySpecifiersContext::getRuleIndex() const {
  return ObjectPascalParser::RulePropertySpecifiers;
}


std::any ObjectPascalParser::PropertySpecifiersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitPropertySpecifiers(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::PropertySpecifiersContext* ObjectPascalParser::propertySpecifiers() {
  PropertySpecifiersContext *_localctx = _tracker.createInstance<PropertySpecifiersContext>(_ctx, getState());
  enterRule(_localctx, 208, ObjectPascalParser::RulePropertySpecifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ObjectPascalParser::INDEX: {
        enterOuterAlt(_localctx, 1);
        setState(1270);
        match(ObjectPascalParser::INDEX);
        setState(1271);
        constExpr();
        break;
      }

      case ObjectPascalParser::READ: {
        enterOuterAlt(_localctx, 2);
        setState(1272);
        match(ObjectPascalParser::READ);
        setState(1273);
        match(ObjectPascalParser::Identifier);
        break;
      }

      case ObjectPascalParser::WRITE: {
        enterOuterAlt(_localctx, 3);
        setState(1274);
        match(ObjectPascalParser::WRITE);
        setState(1275);
        match(ObjectPascalParser::Identifier);
        break;
      }

      case ObjectPascalParser::STORED: {
        enterOuterAlt(_localctx, 4);
        setState(1276);
        match(ObjectPascalParser::STORED);
        setState(1279);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::Identifier: {
            setState(1277);
            match(ObjectPascalParser::Identifier);
            break;
          }

          case ObjectPascalParser::Integer:
          case ObjectPascalParser::Float:
          case ObjectPascalParser::StringLiteral: {
            setState(1278);
            constExpr();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::DEFAULT:
      case ObjectPascalParser::NODEFAULT: {
        enterOuterAlt(_localctx, 5);
        setState(1284);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ObjectPascalParser::DEFAULT: {
            setState(1281);
            match(ObjectPascalParser::DEFAULT);
            setState(1282);
            constExpr();
            break;
          }

          case ObjectPascalParser::NODEFAULT: {
            setState(1283);
            match(ObjectPascalParser::NODEFAULT);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case ObjectPascalParser::IMPLEMENTS: {
        enterOuterAlt(_localctx, 6);
        setState(1286);
        match(ObjectPascalParser::IMPLEMENTS);
        setState(1287);
        typeId();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceTypeContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceTypeContext::InterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::INTERFACE() {
  return getToken(ObjectPascalParser::INTERFACE, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceTypeContext::END() {
  return getToken(ObjectPascalParser::END, 0);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::InterfaceTypeContext::interfaceHeritage() {
  return getRuleContext<ObjectPascalParser::InterfaceHeritageContext>(0);
}

ObjectPascalParser::ClassMethodListContext* ObjectPascalParser::InterfaceTypeContext::classMethodList() {
  return getRuleContext<ObjectPascalParser::ClassMethodListContext>(0);
}

ObjectPascalParser::ClassPropertyListContext* ObjectPascalParser::InterfaceTypeContext::classPropertyList() {
  return getRuleContext<ObjectPascalParser::ClassPropertyListContext>(0);
}


size_t ObjectPascalParser::InterfaceTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceType;
}


std::any ObjectPascalParser::InterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceTypeContext* ObjectPascalParser::interfaceType() {
  InterfaceTypeContext *_localctx = _tracker.createInstance<InterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 210, ObjectPascalParser::RuleInterfaceType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1290);
    match(ObjectPascalParser::INTERFACE);
    setState(1292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ObjectPascalParser::LEFT_PAREN) {
      setState(1291);
      interfaceHeritage();
    }
    setState(1295);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      setState(1294);
      classMethodList();
      break;
    }

    default:
      break;
    }
    setState(1298);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED)
      | (1ULL << ObjectPascalParser::PROPERTY))) != 0)) {
      setState(1297);
      classPropertyList();
    }
    setState(1300);
    match(ObjectPascalParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceHeritageContext ------------------------------------------------------------------

ObjectPascalParser::InterfaceHeritageContext::InterfaceHeritageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::LEFT_PAREN() {
  return getToken(ObjectPascalParser::LEFT_PAREN, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::InterfaceHeritageContext::RIGHT_PAREN() {
  return getToken(ObjectPascalParser::RIGHT_PAREN, 0);
}


size_t ObjectPascalParser::InterfaceHeritageContext::getRuleIndex() const {
  return ObjectPascalParser::RuleInterfaceHeritage;
}


std::any ObjectPascalParser::InterfaceHeritageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceHeritage(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::InterfaceHeritageContext* ObjectPascalParser::interfaceHeritage() {
  InterfaceHeritageContext *_localctx = _tracker.createInstance<InterfaceHeritageContext>(_ctx, getState());
  enterRule(_localctx, 212, ObjectPascalParser::RuleInterfaceHeritage);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1302);
    match(ObjectPascalParser::LEFT_PAREN);
    setState(1303);
    match(ObjectPascalParser::Identifier);
    setState(1304);
    match(ObjectPascalParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresClauseContext ------------------------------------------------------------------

ObjectPascalParser::RequiresClauseContext::RequiresClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::REQUIRES() {
  return getToken(ObjectPascalParser::REQUIRES, 0);
}

tree::TerminalNode* ObjectPascalParser::RequiresClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::RequiresClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::RequiresClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::RequiresClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRequiresClause;
}


std::any ObjectPascalParser::RequiresClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRequiresClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RequiresClauseContext* ObjectPascalParser::requiresClause() {
  RequiresClauseContext *_localctx = _tracker.createInstance<RequiresClauseContext>(_ctx, getState());
  enterRule(_localctx, 214, ObjectPascalParser::RuleRequiresClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1306);
    match(ObjectPascalParser::REQUIRES);
    setState(1308); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1307);
      identList();
      setState(1310); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
    setState(1312);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ContainsClauseContext ------------------------------------------------------------------

ObjectPascalParser::ContainsClauseContext::ContainsClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::CONTAINS() {
  return getToken(ObjectPascalParser::CONTAINS, 0);
}

tree::TerminalNode* ObjectPascalParser::ContainsClauseContext::SEMI() {
  return getToken(ObjectPascalParser::SEMI, 0);
}

std::vector<ObjectPascalParser::IdentListContext *> ObjectPascalParser::ContainsClauseContext::identList() {
  return getRuleContexts<ObjectPascalParser::IdentListContext>();
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::ContainsClauseContext::identList(size_t i) {
  return getRuleContext<ObjectPascalParser::IdentListContext>(i);
}


size_t ObjectPascalParser::ContainsClauseContext::getRuleIndex() const {
  return ObjectPascalParser::RuleContainsClause;
}


std::any ObjectPascalParser::ContainsClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitContainsClause(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ContainsClauseContext* ObjectPascalParser::containsClause() {
  ContainsClauseContext *_localctx = _tracker.createInstance<ContainsClauseContext>(_ctx, getState());
  enterRule(_localctx, 216, ObjectPascalParser::RuleContainsClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1314);
    match(ObjectPascalParser::CONTAINS);
    setState(1316); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1315);
      identList();
      setState(1318); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::Identifier);
    setState(1320);
    match(ObjectPascalParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentListContext ------------------------------------------------------------------

ObjectPascalParser::IdentListContext::IdentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::IdentListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::IdentListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::IdentListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleIdentList;
}


std::any ObjectPascalParser::IdentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitIdentList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::IdentListContext* ObjectPascalParser::identList() {
  IdentListContext *_localctx = _tracker.createInstance<IdentListContext>(_ctx, getState());
  enterRule(_localctx, 218, ObjectPascalParser::RuleIdentList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1322);
    match(ObjectPascalParser::Identifier);
    setState(1327);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1323);
        match(ObjectPascalParser::COMMA);
        setState(1324);
        match(ObjectPascalParser::Identifier); 
      }
      setState(1329);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdListContext ------------------------------------------------------------------

ObjectPascalParser::QualIdListContext::QualIdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::QualIdContext *> ObjectPascalParser::QualIdListContext::qualId() {
  return getRuleContexts<ObjectPascalParser::QualIdContext>();
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::QualIdListContext::qualId(size_t i) {
  return getRuleContext<ObjectPascalParser::QualIdContext>(i);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdListContext::COMMA() {
  return getTokens(ObjectPascalParser::COMMA);
}

tree::TerminalNode* ObjectPascalParser::QualIdListContext::COMMA(size_t i) {
  return getToken(ObjectPascalParser::COMMA, i);
}


size_t ObjectPascalParser::QualIdListContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualIdList;
}


std::any ObjectPascalParser::QualIdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualIdList(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdListContext* ObjectPascalParser::qualIdList() {
  QualIdListContext *_localctx = _tracker.createInstance<QualIdListContext>(_ctx, getState());
  enterRule(_localctx, 220, ObjectPascalParser::RuleQualIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1330);
    qualId();
    setState(1333); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1331);
      match(ObjectPascalParser::COMMA);
      setState(1332);
      qualId();
      setState(1335); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ObjectPascalParser::COMMA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualIdContext ------------------------------------------------------------------

ObjectPascalParser::QualIdContext::QualIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::QualIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

std::vector<tree::TerminalNode *> ObjectPascalParser::QualIdContext::CARET() {
  return getTokens(ObjectPascalParser::CARET);
}

tree::TerminalNode* ObjectPascalParser::QualIdContext::CARET(size_t i) {
  return getToken(ObjectPascalParser::CARET, i);
}


size_t ObjectPascalParser::QualIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleQualId;
}


std::any ObjectPascalParser::QualIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitQualId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::QualIdContext* ObjectPascalParser::qualId() {
  QualIdContext *_localctx = _tracker.createInstance<QualIdContext>(_ctx, getState());
  enterRule(_localctx, 222, ObjectPascalParser::RuleQualId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1337);
    unitId();
    setState(1345);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      setState(1338);
      match(ObjectPascalParser::DOT);
      setState(1339);
      match(ObjectPascalParser::Identifier);
      setState(1341); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1340);
                match(ObjectPascalParser::CARET);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1343); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdContext ------------------------------------------------------------------

ObjectPascalParser::TypeIdContext::TypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::TypeIdContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::TypeIdContext::unitId() {
  return getRuleContext<ObjectPascalParser::UnitIdContext>(0);
}

tree::TerminalNode* ObjectPascalParser::TypeIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::TypeIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleTypeId;
}


std::any ObjectPascalParser::TypeIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitTypeId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::TypeIdContext* ObjectPascalParser::typeId() {
  TypeIdContext *_localctx = _tracker.createInstance<TypeIdContext>(_ctx, getState());
  enterRule(_localctx, 224, ObjectPascalParser::RuleTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1350);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      setState(1347);
      unitId();
      setState(1348);
      match(ObjectPascalParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1352);
    match(ObjectPascalParser::Identifier);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharExprContext ------------------------------------------------------------------

ObjectPascalParser::CharExprContext::CharExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::CharExprContext::StringLiteral() {
  return getToken(ObjectPascalParser::StringLiteral, 0);
}


size_t ObjectPascalParser::CharExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleCharExpr;
}


std::any ObjectPascalParser::CharExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitCharExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::charExpr() {
  CharExprContext *_localctx = _tracker.createInstance<CharExprContext>(_ctx, getState());
  enterRule(_localctx, 226, ObjectPascalParser::RuleCharExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1354);
    match(ObjectPascalParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitIdContext ------------------------------------------------------------------

ObjectPascalParser::UnitIdContext::UnitIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ObjectPascalParser::UnitIdContext::Identifier() {
  return getTokens(ObjectPascalParser::Identifier);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::Identifier(size_t i) {
  return getToken(ObjectPascalParser::Identifier, i);
}

tree::TerminalNode* ObjectPascalParser::UnitIdContext::DOT() {
  return getToken(ObjectPascalParser::DOT, 0);
}


size_t ObjectPascalParser::UnitIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleUnitId;
}


std::any ObjectPascalParser::UnitIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitUnitId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::UnitIdContext* ObjectPascalParser::unitId() {
  UnitIdContext *_localctx = _tracker.createInstance<UnitIdContext>(_ctx, getState());
  enterRule(_localctx, 228, ObjectPascalParser::RuleUnitId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1360);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1356);
      match(ObjectPascalParser::Identifier);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1357);
      match(ObjectPascalParser::Identifier);
      setState(1358);
      match(ObjectPascalParser::DOT);
      setState(1359);
      match(ObjectPascalParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelIdContext ------------------------------------------------------------------

ObjectPascalParser::LabelIdContext::LabelIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::LabelIdContext::Identifier() {
  return getToken(ObjectPascalParser::Identifier, 0);
}

tree::TerminalNode* ObjectPascalParser::LabelIdContext::IntegerLiteral() {
  return getToken(ObjectPascalParser::IntegerLiteral, 0);
}


size_t ObjectPascalParser::LabelIdContext::getRuleIndex() const {
  return ObjectPascalParser::RuleLabelId;
}


std::any ObjectPascalParser::LabelIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitLabelId(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::LabelIdContext* ObjectPascalParser::labelId() {
  LabelIdContext *_localctx = _tracker.createInstance<LabelIdContext>(_ctx, getState());
  enterRule(_localctx, 230, ObjectPascalParser::RuleLabelId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1362);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::Identifier

    || _la == ObjectPascalParser::IntegerLiteral)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

ObjectPascalParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::StringContext::StringLiteral() {
  return getToken(ObjectPascalParser::StringLiteral, 0);
}


size_t ObjectPascalParser::StringContext::getRuleIndex() const {
  return ObjectPascalParser::RuleString;
}


std::any ObjectPascalParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::StringContext* ObjectPascalParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 232, ObjectPascalParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1364);
    match(ObjectPascalParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

ObjectPascalParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::NumberContext::Integer() {
  return getToken(ObjectPascalParser::Integer, 0);
}

tree::TerminalNode* ObjectPascalParser::NumberContext::Float() {
  return getToken(ObjectPascalParser::Float, 0);
}


size_t ObjectPascalParser::NumberContext::getRuleIndex() const {
  return ObjectPascalParser::RuleNumber;
}


std::any ObjectPascalParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::NumberContext* ObjectPascalParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 234, ObjectPascalParser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1366);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::Integer

    || _la == ObjectPascalParser::Float)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstExprContext ------------------------------------------------------------------

ObjectPascalParser::ConstExprContext::ConstExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ObjectPascalParser::NumberContext *> ObjectPascalParser::ConstExprContext::number() {
  return getRuleContexts<ObjectPascalParser::NumberContext>();
}

ObjectPascalParser::NumberContext* ObjectPascalParser::ConstExprContext::number(size_t i) {
  return getRuleContext<ObjectPascalParser::NumberContext>(i);
}

ObjectPascalParser::StringContext* ObjectPascalParser::ConstExprContext::string() {
  return getRuleContext<ObjectPascalParser::StringContext>(0);
}

ObjectPascalParser::CharExprContext* ObjectPascalParser::ConstExprContext::charExpr() {
  return getRuleContext<ObjectPascalParser::CharExprContext>(0);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::ConstExprContext::additiveOp() {
  return getRuleContext<ObjectPascalParser::AdditiveOpContext>(0);
}


size_t ObjectPascalParser::ConstExprContext::getRuleIndex() const {
  return ObjectPascalParser::RuleConstExpr;
}


std::any ObjectPascalParser::ConstExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitConstExpr(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ConstExprContext* ObjectPascalParser::constExpr() {
  ConstExprContext *_localctx = _tracker.createInstance<ConstExprContext>(_ctx, getState());
  enterRule(_localctx, 236, ObjectPascalParser::RuleConstExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1375);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1368);
      number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1369);
      string();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1370);
      charExpr();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1371);
      number();
      setState(1372);
      additiveOp();
      setState(1373);
      number();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RealTypeContext ------------------------------------------------------------------

ObjectPascalParser::RealTypeContext::RealTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL48() {
  return getToken(ObjectPascalParser::REAL48, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::REAL() {
  return getToken(ObjectPascalParser::REAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::SINGLE() {
  return getToken(ObjectPascalParser::SINGLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::DOUBLE() {
  return getToken(ObjectPascalParser::DOUBLE, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::EXTENDED() {
  return getToken(ObjectPascalParser::EXTENDED, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::CURRENCY() {
  return getToken(ObjectPascalParser::CURRENCY, 0);
}

tree::TerminalNode* ObjectPascalParser::RealTypeContext::COMP() {
  return getToken(ObjectPascalParser::COMP, 0);
}


size_t ObjectPascalParser::RealTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRealType;
}


std::any ObjectPascalParser::RealTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRealType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RealTypeContext* ObjectPascalParser::realType() {
  RealTypeContext *_localctx = _tracker.createInstance<RealTypeContext>(_ctx, getState());
  enterRule(_localctx, 238, ObjectPascalParser::RuleRealType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1377);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::REAL)
      | (1ULL << ObjectPascalParser::SINGLE)
      | (1ULL << ObjectPascalParser::DOUBLE)
      | (1ULL << ObjectPascalParser::EXTENDED)
      | (1ULL << ObjectPascalParser::CURRENCY)
      | (1ULL << ObjectPascalParser::COMP))) != 0) || _la == ObjectPascalParser::REAL48)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrdIdentContext ------------------------------------------------------------------

ObjectPascalParser::OrdIdentContext::OrdIdentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SHORTINT() {
  return getToken(ObjectPascalParser::SHORTINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::SMALLINT() {
  return getToken(ObjectPascalParser::SMALLINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INTEGER() {
  return getToken(ObjectPascalParser::INTEGER, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BYTE() {
  return getToken(ObjectPascalParser::BYTE, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CARDINAL() {
  return getToken(ObjectPascalParser::CARDINAL, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGINT() {
  return getToken(ObjectPascalParser::LONGINT, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::INT64() {
  return getToken(ObjectPascalParser::INT64, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WORD() {
  return getToken(ObjectPascalParser::WORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::BOOLEAN() {
  return getToken(ObjectPascalParser::BOOLEAN, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::CHAR() {
  return getToken(ObjectPascalParser::CHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::WIDECHAR() {
  return getToken(ObjectPascalParser::WIDECHAR, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::LONGWORD() {
  return getToken(ObjectPascalParser::LONGWORD, 0);
}

tree::TerminalNode* ObjectPascalParser::OrdIdentContext::PCHAR() {
  return getToken(ObjectPascalParser::PCHAR, 0);
}


size_t ObjectPascalParser::OrdIdentContext::getRuleIndex() const {
  return ObjectPascalParser::RuleOrdIdent;
}


std::any ObjectPascalParser::OrdIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitOrdIdent(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::OrdIdentContext* ObjectPascalParser::ordIdent() {
  OrdIdentContext *_localctx = _tracker.createInstance<OrdIdentContext>(_ctx, getState());
  enterRule(_localctx, 240, ObjectPascalParser::RuleOrdIdent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1379);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::SHORTINT)
      | (1ULL << ObjectPascalParser::SMALLINT)
      | (1ULL << ObjectPascalParser::INTEGER)
      | (1ULL << ObjectPascalParser::BYTE)
      | (1ULL << ObjectPascalParser::LONGINT)
      | (1ULL << ObjectPascalParser::WORD)
      | (1ULL << ObjectPascalParser::BOOLEAN)
      | (1ULL << ObjectPascalParser::CHAR)
      | (1ULL << ObjectPascalParser::WIDECHAR)
      | (1ULL << ObjectPascalParser::PCHAR))) != 0) || ((((_la - 150) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 150)) & ((1ULL << (ObjectPascalParser::CARDINAL - 150))
      | (1ULL << (ObjectPascalParser::INT64 - 150))
      | (1ULL << (ObjectPascalParser::LONGWORD - 150)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariantTypeContext ------------------------------------------------------------------

ObjectPascalParser::VariantTypeContext::VariantTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::VARIANT() {
  return getToken(ObjectPascalParser::VARIANT, 0);
}

tree::TerminalNode* ObjectPascalParser::VariantTypeContext::OLEVARIANT() {
  return getToken(ObjectPascalParser::OLEVARIANT, 0);
}


size_t ObjectPascalParser::VariantTypeContext::getRuleIndex() const {
  return ObjectPascalParser::RuleVariantType;
}


std::any ObjectPascalParser::VariantTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitVariantType(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::VariantTypeContext* ObjectPascalParser::variantType() {
  VariantTypeContext *_localctx = _tracker.createInstance<VariantTypeContext>(_ctx, getState());
  enterRule(_localctx, 242, ObjectPascalParser::RuleVariantType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1381);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::VARIANT

    || _la == ObjectPascalParser::OLEVARIANT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelOpContext ------------------------------------------------------------------

ObjectPascalParser::RelOpContext::RelOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER() {
  return getToken(ObjectPascalParser::GRATER, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS() {
  return getToken(ObjectPascalParser::LESS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::LESS_EQUAL() {
  return getToken(ObjectPascalParser::LESS_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::GRATER_EQUAL() {
  return getToken(ObjectPascalParser::GRATER_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::NOT_EQUAL() {
  return getToken(ObjectPascalParser::NOT_EQUAL, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::ASSIGN() {
  return getToken(ObjectPascalParser::ASSIGN, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IN() {
  return getToken(ObjectPascalParser::IN, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::IS() {
  return getToken(ObjectPascalParser::IS, 0);
}

tree::TerminalNode* ObjectPascalParser::RelOpContext::AS() {
  return getToken(ObjectPascalParser::AS, 0);
}


size_t ObjectPascalParser::RelOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleRelOp;
}


std::any ObjectPascalParser::RelOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitRelOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::RelOpContext* ObjectPascalParser::relOp() {
  RelOpContext *_localctx = _tracker.createInstance<RelOpContext>(_ctx, getState());
  enterRule(_localctx, 244, ObjectPascalParser::RuleRelOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1383);
    _la = _input->LA(1);
    if (!(_la == ObjectPascalParser::IN || ((((_la - 89) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 89)) & ((1ULL << (ObjectPascalParser::IS - 89))
      | (1ULL << (ObjectPascalParser::AS - 89))
      | (1ULL << (ObjectPascalParser::ASSIGN - 89))
      | (1ULL << (ObjectPascalParser::GRATER - 89))
      | (1ULL << (ObjectPascalParser::LESS - 89))
      | (1ULL << (ObjectPascalParser::GRATER_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::LESS_EQUAL - 89))
      | (1ULL << (ObjectPascalParser::NOT_EQUAL - 89)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AddOpContext ------------------------------------------------------------------

ObjectPascalParser::AddOpContext::AddOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::OR() {
  return getToken(ObjectPascalParser::OR, 0);
}

tree::TerminalNode* ObjectPascalParser::AddOpContext::XOR() {
  return getToken(ObjectPascalParser::XOR, 0);
}


size_t ObjectPascalParser::AddOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAddOp;
}


std::any ObjectPascalParser::AddOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAddOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AddOpContext* ObjectPascalParser::addOp() {
  AddOpContext *_localctx = _tracker.createInstance<AddOpContext>(_ctx, getState());
  enterRule(_localctx, 246, ObjectPascalParser::RuleAddOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1385);
    _la = _input->LA(1);
    if (!(((((_la - 90) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 90)) & ((1ULL << (ObjectPascalParser::OR - 90))
      | (1ULL << (ObjectPascalParser::XOR - 90))
      | (1ULL << (ObjectPascalParser::PLUS - 90))
      | (1ULL << (ObjectPascalParser::MINUS - 90)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MulOpContext ------------------------------------------------------------------

ObjectPascalParser::MulOpContext::MulOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::DIV() {
  return getToken(ObjectPascalParser::DIV, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::MOD() {
  return getToken(ObjectPascalParser::MOD, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::AND() {
  return getToken(ObjectPascalParser::AND, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHL() {
  return getToken(ObjectPascalParser::SHL, 0);
}

tree::TerminalNode* ObjectPascalParser::MulOpContext::SHR() {
  return getToken(ObjectPascalParser::SHR, 0);
}


size_t ObjectPascalParser::MulOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleMulOp;
}


std::any ObjectPascalParser::MulOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitMulOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::MulOpContext* ObjectPascalParser::mulOp() {
  MulOpContext *_localctx = _tracker.createInstance<MulOpContext>(_ctx, getState());
  enterRule(_localctx, 248, ObjectPascalParser::RuleMulOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1387);
    _la = _input->LA(1);
    if (!(((((_la - 92) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 92)) & ((1ULL << (ObjectPascalParser::DIV - 92))
      | (1ULL << (ObjectPascalParser::MOD - 92))
      | (1ULL << (ObjectPascalParser::AND - 92))
      | (1ULL << (ObjectPascalParser::SHL - 92))
      | (1ULL << (ObjectPascalParser::SHR - 92))
      | (1ULL << (ObjectPascalParser::STAR - 92)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveOpContext ------------------------------------------------------------------

ObjectPascalParser::AdditiveOpContext::AdditiveOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::PLUS() {
  return getToken(ObjectPascalParser::PLUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::MINUS() {
  return getToken(ObjectPascalParser::MINUS, 0);
}

tree::TerminalNode* ObjectPascalParser::AdditiveOpContext::STAR() {
  return getToken(ObjectPascalParser::STAR, 0);
}


size_t ObjectPascalParser::AdditiveOpContext::getRuleIndex() const {
  return ObjectPascalParser::RuleAdditiveOp;
}


std::any ObjectPascalParser::AdditiveOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitAdditiveOp(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::AdditiveOpContext* ObjectPascalParser::additiveOp() {
  AdditiveOpContext *_localctx = _tracker.createInstance<AdditiveOpContext>(_ctx, getState());
  enterRule(_localctx, 250, ObjectPascalParser::RuleAdditiveOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1389);
    _la = _input->LA(1);
    if (!(((((_la - 138) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 138)) & ((1ULL << (ObjectPascalParser::PLUS - 138))
      | (1ULL << (ObjectPascalParser::MINUS - 138))
      | (1ULL << (ObjectPascalParser::STAR - 138)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVisibilityContext ------------------------------------------------------------------

ObjectPascalParser::ClassVisibilityContext::ClassVisibilityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLIC() {
  return getToken(ObjectPascalParser::PUBLIC, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PROTECTED() {
  return getToken(ObjectPascalParser::PROTECTED, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PRIVATE() {
  return getToken(ObjectPascalParser::PRIVATE, 0);
}

tree::TerminalNode* ObjectPascalParser::ClassVisibilityContext::PUBLISHED() {
  return getToken(ObjectPascalParser::PUBLISHED, 0);
}


size_t ObjectPascalParser::ClassVisibilityContext::getRuleIndex() const {
  return ObjectPascalParser::RuleClassVisibility;
}


std::any ObjectPascalParser::ClassVisibilityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<ObjectPascalParserVisitor*>(visitor))
    return parserVisitor->visitClassVisibility(this);
  else
    return visitor->visitChildren(this);
}

ObjectPascalParser::ClassVisibilityContext* ObjectPascalParser::classVisibility() {
  ClassVisibilityContext *_localctx = _tracker.createInstance<ClassVisibilityContext>(_ctx, getState());
  enterRule(_localctx, 252, ObjectPascalParser::RuleClassVisibility);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ObjectPascalParser::PUBLIC)
      | (1ULL << ObjectPascalParser::PROTECTED)
      | (1ULL << ObjectPascalParser::PRIVATE)
      | (1ULL << ObjectPascalParser::PUBLISHED))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void ObjectPascalParser::initialize() {
  std::call_once(objectpascalparserParserOnceFlag, objectpascalparserParserInitialize);
}
